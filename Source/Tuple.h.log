==============================================================================================
Dereferenced
==============================================================================================
$$define $TYPENAME_ITEM($index) typename T$index
$$define $TYPE_ITEM($index) T$index
$$define $PARAMETER_ITEM($index) T$index p$index
$$define $ARGUMENT_ITEM($index) p$index

$$define $TYPENAME_LIST($count,$function) $if($function,typename R$if($eq($count,0), ,$(,)), )$loopsep($count,0,$TYPENAME_ITEM,$(,))
$$define $TYPE_LIST($count) $loopsep($count,0,$TYPE_ITEM,$(,))
$$define $PARAMETER_LIST($count) $loopsep($count,0,$PARAMETER_ITEM,$(,))
$$define $ARGUMENT_LIST($count) $loopsep($count,0,$ARGUMENT_ITEM,$(,))

$$define $CURRIED_TYPE_LIST($count) $loopsep($sub($count,1),1,$TYPE_ITEM,$(,))
$$define $CURRIED_PARAMETER_LIST($count) $loopsep($sub($count,1),1,$PARAMETER_ITEM,$(,))

$$define $FUNCTION_TYPE($count,$function) $if($function,R,void)($TYPE_LIST($count))
$$define $FUNCTION_DECL($count,$function,$name) $if($function,R,void)($name)($TYPE_LIST($count))

$$define $METHOD_TYPENAME_LIST($count,$function,$classname) typename $classname $if($function,$(,)typename R, )$if($eq($count,0), ,$(,))$loopsep($count,0,$TYPENAME_ITEM,$(,))

$$define $MAX_FUNCTION_NUMBER() 11

$$define $TYPENAME_NULL($index) typename T$index = TupleNullItem
$$define $TUPLE_ITEM($index) T$index f$index;
$$define $TUPLE_COMPARE($index) if (a.f$index < b.f$index) return -1; else if (a.f$index > b.f$index) return 1;
$$define $TUPLE_ASSIGN($index) f$index$(()p$index$())

$$define $TUPLE_DECLARATION($count) $$begin
$(/)***********************************************************************
vl::Tuple<$TYPE_LIST($count)>
***********************************************************************$(/)
	template<$loopsep($count,0,$TYPENAME_ITEM,$(,))>
	class Tuple<$TYPE_LIST($count)> : public Object
	{
	public:
		$loop($count,0,$TUPLE_ITEM)
$( )
		Tuple()
		{
		}
$( )
		Tuple($PARAMETER_LIST($count))
			:$loopsep($count,0,$TUPLE_ASSIGN,$(,))
		{
		}
$( )
		static int Compare(const Tuple<$TYPE_LIST($count)>& a, const Tuple<$TYPE_LIST($count)>& b)
		{
			$loop($count,0,$TUPLE_COMPARE)
			return 0;
		}
$( )
		bool operator==(const Tuple<$TYPE_LIST($count)>& value)const{ return Compare(*this, value) == 0; }
		bool operator!=(const Tuple<$TYPE_LIST($count)>& value)const{ return Compare(*this, value) != 0; }
		bool operator< (const Tuple<$TYPE_LIST($count)>& value)const{ return Compare(*this, value) < 0; }
		bool operator<=(const Tuple<$TYPE_LIST($count)>& value)const{ return Compare(*this, value) <= 0; }
		bool operator> (const Tuple<$TYPE_LIST($count)>& value)const{ return Compare(*this, value) > 0; }
		bool operator>=(const Tuple<$TYPE_LIST($count)>& value)const{ return Compare(*this, value) >= 0; }
	};
$$end

/***********************************************************************
Vczh Library++ 3.0
Developer: Zihan Chen(vczh)
Framework::Tuple
	
This file is generated by: Vczh Functional Macro
***********************************************************************/

#ifndef VCZH_TUPLE
#define VCZH_TUPLE

namespace vl
{
	class TupleNullItem
	{
	};

	template<$loopsep(11,0,$TYPENAME_NULL,$(,))>
	class Tuple
	{
	};
$$define $TUPLE_APPLY($count) $$begin
$( )
$TUPLE_DECLARATION($count)
$( )
$$end
$loop($sub($MAX_FUNCTION_NUMBER(),1),1,$TUPLE_APPLY)
}

#endif

==============================================================================================
Syntax Tree
==============================================================================================
MACRO {
    REFERENCE {
        $TYPENAME_ITEM : $index
        CONCAT {
            TEXT : typename
            TEXT :  
            TEXT : T
            NAME : $index
        }
    }
    REFERENCE {
        $TYPE_ITEM : $index
        CONCAT {
            TEXT : T
            NAME : $index
        }
    }
    REFERENCE {
        $PARAMETER_ITEM : $index
        CONCAT {
            TEXT : T
            CONCAT {
                NAME : $index
                TEXT :  
            }
            TEXT : p
            NAME : $index
        }
    }
    REFERENCE {
        $ARGUMENT_ITEM : $index
        CONCAT {
            TEXT : p
            NAME : $index
        }
    }
    REFERENCE {
        $TYPENAME_LIST : $count , $function
        CONCAT {
            INVOKE {
                NAME : $if
                ARGUMENTS {
                    NAME : $function
                    CONCAT {
                        TEXT : typename
                        TEXT :  
                        TEXT : R
                        INVOKE {
                            NAME : $if
                            ARGUMENTS {
                                CONCAT {
                                    INVOKE {
                                        NAME : $eq
                                        ARGUMENTS {
                                            NAME : $count
                                            CONCAT {
                                                TEXT : 0
                                            }
                                        }
                                    }
                                }
                                CONCAT {
                                    TEXT :  
                                }
                                CONCAT {
                                    TEXT : ,
                                }
                            }
                        }
                    }
                    CONCAT {
                        TEXT :  
                    }
                }
            }
            INVOKE {
                NAME : $loopsep
                ARGUMENTS {
                    NAME : $count
                    CONCAT {
                        TEXT : 0
                    }
                    NAME : $TYPENAME_ITEM
                    CONCAT {
                        TEXT : ,
                    }
                }
            }
        }
    }
    REFERENCE {
        $TYPE_LIST : $count
        CONCAT {
            INVOKE {
                NAME : $loopsep
                ARGUMENTS {
                    NAME : $count
                    CONCAT {
                        TEXT : 0
                    }
                    NAME : $TYPE_ITEM
                    CONCAT {
                        TEXT : ,
                    }
                }
            }
        }
    }
    REFERENCE {
        $PARAMETER_LIST : $count
        CONCAT {
            INVOKE {
                NAME : $loopsep
                ARGUMENTS {
                    NAME : $count
                    CONCAT {
                        TEXT : 0
                    }
                    NAME : $PARAMETER_ITEM
                    CONCAT {
                        TEXT : ,
                    }
                }
            }
        }
    }
    REFERENCE {
        $ARGUMENT_LIST : $count
        CONCAT {
            INVOKE {
                NAME : $loopsep
                ARGUMENTS {
                    NAME : $count
                    CONCAT {
                        TEXT : 0
                    }
                    NAME : $ARGUMENT_ITEM
                    CONCAT {
                        TEXT : ,
                    }
                }
            }
        }
    }
    REFERENCE {
        $CURRIED_TYPE_LIST : $count
        CONCAT {
            INVOKE {
                NAME : $loopsep
                ARGUMENTS {
                    CONCAT {
                        INVOKE {
                            NAME : $sub
                            ARGUMENTS {
                                NAME : $count
                                CONCAT {
                                    TEXT : 1
                                }
                            }
                        }
                    }
                    CONCAT {
                        TEXT : 1
                    }
                    NAME : $TYPE_ITEM
                    CONCAT {
                        TEXT : ,
                    }
                }
            }
        }
    }
    REFERENCE {
        $CURRIED_PARAMETER_LIST : $count
        CONCAT {
            INVOKE {
                NAME : $loopsep
                ARGUMENTS {
                    CONCAT {
                        INVOKE {
                            NAME : $sub
                            ARGUMENTS {
                                NAME : $count
                                CONCAT {
                                    TEXT : 1
                                }
                            }
                        }
                    }
                    CONCAT {
                        TEXT : 1
                    }
                    NAME : $PARAMETER_ITEM
                    CONCAT {
                        TEXT : ,
                    }
                }
            }
        }
    }
    REFERENCE {
        $FUNCTION_TYPE : $count , $function
        CONCAT {
            INVOKE {
                NAME : $if
                ARGUMENTS {
                    NAME : $function
                    CONCAT {
                        TEXT : R
                    }
                    CONCAT {
                        TEXT : void
                    }
                }
            }
            CONCAT {
            
    TEXT: (
                CONCAT {
                    INVOKE {
                        NAME : $TYPE_LIST
                        ARGUMENTS {
                            NAME : $count
                        }
                    }
                }
            
    TEXT: )
            }
        }
    }
    REFERENCE {
        $FUNCTION_DECL : $count , $function , $name
        CONCAT {
            INVOKE {
                NAME : $if
                ARGUMENTS {
                    NAME : $function
                    CONCAT {
                        TEXT : R
                    }
                    CONCAT {
                        TEXT : void
                    }
                }
            }
            CONCAT {
            
    TEXT: (
                NAME : $name
            
    TEXT: )
            }
            CONCAT {
            
    TEXT: (
                CONCAT {
                    INVOKE {
                        NAME : $TYPE_LIST
                        ARGUMENTS {
                            NAME : $count
                        }
                    }
                }
            
    TEXT: )
            }
        }
    }
    REFERENCE {
        $METHOD_TYPENAME_LIST : $count , $function , $classname
        CONCAT {
            TEXT : typename
            TEXT :  
            CONCAT {
                NAME : $classname
                TEXT :  
            }
            INVOKE {
                NAME : $if
                ARGUMENTS {
                    NAME : $function
                    CONCAT {
                        TEXT : ,
                        TEXT : typename
                        TEXT :  
                        TEXT : R
                    }
                    CONCAT {
                        TEXT :  
                    }
                }
            }
            INVOKE {
                NAME : $if
                ARGUMENTS {
                    CONCAT {
                        INVOKE {
                            NAME : $eq
                            ARGUMENTS {
                                NAME : $count
                                CONCAT {
                                    TEXT : 0
                                }
                            }
                        }
                    }
                    CONCAT {
                        TEXT :  
                    }
                    CONCAT {
                        TEXT : ,
                    }
                }
            }
            INVOKE {
                NAME : $loopsep
                ARGUMENTS {
                    NAME : $count
                    CONCAT {
                        TEXT : 0
                    }
                    NAME : $TYPENAME_ITEM
                    CONCAT {
                        TEXT : ,
                    }
                }
            }
        }
    }
    REFERENCE {
        $MAX_FUNCTION_NUMBER : 
        CONCAT {
            TEXT : 11
        }
    }
    REFERENCE {
        $TYPENAME_NULL : $index
        CONCAT {
            TEXT : typename
            TEXT :  
            TEXT : T
            CONCAT {
                NAME : $index
                TEXT :  
            }
            TEXT : =
            TEXT :  
            TEXT : TupleNullItem
        }
    }
    REFERENCE {
        $TUPLE_ITEM : $index
        CONCAT {
            TEXT : T
            CONCAT {
                NAME : $index
                TEXT :  
            }
            TEXT : f
            CONCAT {
                NAME : $index
                TEXT : ;
            }
        }
    }
    REFERENCE {
        $TUPLE_COMPARE : $index
        CONCAT {
            TEXT : if
            TEXT :  
            CONCAT {
            
    TEXT: (
                CONCAT {
                    TEXT : a.f
                    CONCAT {
                        NAME : $index
                        TEXT :  
                    }
                    TEXT : <
                    TEXT :  
                    TEXT : b.f
                    NAME : $index
                }
            
    TEXT: )
            }
            TEXT :  
            TEXT : return
            TEXT :  
            TEXT : -1;
            TEXT :  
            TEXT : else
            TEXT :  
            TEXT : if
            TEXT :  
            CONCAT {
            
    TEXT: (
                CONCAT {
                    TEXT : a.f
                    CONCAT {
                        NAME : $index
                        TEXT :  
                    }
                    TEXT : >
                    TEXT :  
                    TEXT : b.f
                    NAME : $index
                }
            
    TEXT: )
            }
            TEXT :  
            TEXT : return
            TEXT :  
            TEXT : 1;
        }
    }
    REFERENCE {
        $TUPLE_ASSIGN : $index
        CONCAT {
            TEXT : f
            CONCAT {
                NAME : $index
                TEXT : (
            }
            TEXT : p
            CONCAT {
                NAME : $index
                TEXT : )
            }
        }
    }
    REFERENCE {
        $TUPLE_DECLARATION : $count
        CONCAT {
            TEXT : /
            TEXT : ***********************************************************************
        }
        CONCAT {
            TEXT : vl::Tuple<
            INVOKE {
                NAME : $TYPE_LIST
                ARGUMENTS {
                    NAME : $count
                }
            }
            TEXT : >
        }
        CONCAT {
            TEXT : ***********************************************************************
            TEXT : /
        }
        CONCAT {
            TEXT : 	
            TEXT : template<
            INVOKE {
                NAME : $loopsep
                ARGUMENTS {
                    NAME : $count
                    CONCAT {
                        TEXT : 0
                    }
                    NAME : $TYPENAME_ITEM
                    CONCAT {
                        TEXT : ,
                    }
                }
            }
            TEXT : >
        }
        CONCAT {
            TEXT : 	
            TEXT : class
            TEXT :  
            TEXT : Tuple<
            INVOKE {
                NAME : $TYPE_LIST
                ARGUMENTS {
                    NAME : $count
                }
            }
            TEXT : >
            TEXT :  
            TEXT : :
            TEXT :  
            TEXT : public
            TEXT :  
            TEXT : Object
        }
        CONCAT {
            TEXT : 	
            TEXT : {
        }
        CONCAT {
            TEXT : 	
            TEXT : public:
        }
        CONCAT {
            TEXT : 		
            INVOKE {
                NAME : $loop
                ARGUMENTS {
                    NAME : $count
                    CONCAT {
                        TEXT : 0
                    }
                    NAME : $TUPLE_ITEM
                }
            }
        }
        CONCAT {
            TEXT :  
        }
        CONCAT {
            TEXT : 		
            TEXT : Tuple
            TEXT : ()
        }
        CONCAT {
            TEXT : 		
            TEXT : {
        }
        CONCAT {
            TEXT : 		
            TEXT : }
        }
        CONCAT {
            TEXT :  
        }
        CONCAT {
            TEXT : 		
            TEXT : Tuple
            CONCAT {
            
    TEXT: (
                CONCAT {
                    INVOKE {
                        NAME : $PARAMETER_LIST
                        ARGUMENTS {
                            NAME : $count
                        }
                    }
                }
            
    TEXT: )
            }
        }
        CONCAT {
            TEXT : 			
            TEXT : :
            INVOKE {
                NAME : $loopsep
                ARGUMENTS {
                    NAME : $count
                    CONCAT {
                        TEXT : 0
                    }
                    NAME : $TUPLE_ASSIGN
                    CONCAT {
                        TEXT : ,
                    }
                }
            }
        }
        CONCAT {
            TEXT : 		
            TEXT : {
        }
        CONCAT {
            TEXT : 		
            TEXT : }
        }
        CONCAT {
            TEXT :  
        }
        CONCAT {
            TEXT : 		
            TEXT : static
            TEXT :  
            TEXT : int
            TEXT :  
            TEXT : Compare
            CONCAT {
            
    TEXT: (
                CONCAT {
                    TEXT : const
                    TEXT :  
                    TEXT : Tuple<
                    INVOKE {
                        NAME : $TYPE_LIST
                        ARGUMENTS {
                            NAME : $count
                        }
                    }
                    TEXT : >&
                    TEXT :  
                    TEXT : a
                    TEXT : ,
                    TEXT :  
                    TEXT : const
                    TEXT :  
                    TEXT : Tuple<
                    INVOKE {
                        NAME : $TYPE_LIST
                        ARGUMENTS {
                            NAME : $count
                        }
                    }
                    TEXT : >&
                    TEXT :  
                    TEXT : b
                }
            
    TEXT: )
            }
        }
        CONCAT {
            TEXT : 		
            TEXT : {
        }
        CONCAT {
            TEXT : 			
            INVOKE {
                NAME : $loop
                ARGUMENTS {
                    NAME : $count
                    CONCAT {
                        TEXT : 0
                    }
                    NAME : $TUPLE_COMPARE
                }
            }
        }
        CONCAT {
            TEXT : 			
            TEXT : return
            TEXT :  
            TEXT : 0;
        }
        CONCAT {
            TEXT : 		
            TEXT : }
        }
        CONCAT {
            TEXT :  
        }
        CONCAT {
            TEXT : 		
            TEXT : bool
            TEXT :  
            TEXT : operator==
            CONCAT {
            
    TEXT: (
                CONCAT {
                    TEXT : const
                    TEXT :  
                    TEXT : Tuple<
                    INVOKE {
                        NAME : $TYPE_LIST
                        ARGUMENTS {
                            NAME : $count
                        }
                    }
                    TEXT : >&
                    TEXT :  
                    TEXT : value
                }
            
    TEXT: )
            }
            TEXT : const{
            TEXT :  
            TEXT : return
            TEXT :  
            TEXT : Compare
            CONCAT {
            
    TEXT: (
                CONCAT {
                    TEXT : *this
                    TEXT : ,
                    TEXT :  
                    TEXT : value
                }
            
    TEXT: )
            }
            TEXT :  
            TEXT : ==
            TEXT :  
            TEXT : 0;
            TEXT :  
            TEXT : }
        }
        CONCAT {
            TEXT : 		
            TEXT : bool
            TEXT :  
            TEXT : operator!=
            CONCAT {
            
    TEXT: (
                CONCAT {
                    TEXT : const
                    TEXT :  
                    TEXT : Tuple<
                    INVOKE {
                        NAME : $TYPE_LIST
                        ARGUMENTS {
                            NAME : $count
                        }
                    }
                    TEXT : >&
                    TEXT :  
                    TEXT : value
                }
            
    TEXT: )
            }
            TEXT : const{
            TEXT :  
            TEXT : return
            TEXT :  
            TEXT : Compare
            CONCAT {
            
    TEXT: (
                CONCAT {
                    TEXT : *this
                    TEXT : ,
                    TEXT :  
                    TEXT : value
                }
            
    TEXT: )
            }
            TEXT :  
            TEXT : !=
            TEXT :  
            TEXT : 0;
            TEXT :  
            TEXT : }
        }
        CONCAT {
            TEXT : 		
            TEXT : bool
            TEXT :  
            TEXT : operator<
            TEXT :  
            CONCAT {
            
    TEXT: (
                CONCAT {
                    TEXT : const
                    TEXT :  
                    TEXT : Tuple<
                    INVOKE {
                        NAME : $TYPE_LIST
                        ARGUMENTS {
                            NAME : $count
                        }
                    }
                    TEXT : >&
                    TEXT :  
                    TEXT : value
                }
            
    TEXT: )
            }
            TEXT : const{
            TEXT :  
            TEXT : return
            TEXT :  
            TEXT : Compare
            CONCAT {
            
    TEXT: (
                CONCAT {
                    TEXT : *this
                    TEXT : ,
                    TEXT :  
                    TEXT : value
                }
            
    TEXT: )
            }
            TEXT :  
            TEXT : <
            TEXT :  
            TEXT : 0;
            TEXT :  
            TEXT : }
        }
        CONCAT {
            TEXT : 		
            TEXT : bool
            TEXT :  
            TEXT : operator<=
            CONCAT {
            
    TEXT: (
                CONCAT {
                    TEXT : const
                    TEXT :  
                    TEXT : Tuple<
                    INVOKE {
                        NAME : $TYPE_LIST
                        ARGUMENTS {
                            NAME : $count
                        }
                    }
                    TEXT : >&
                    TEXT :  
                    TEXT : value
                }
            
    TEXT: )
            }
            TEXT : const{
            TEXT :  
            TEXT : return
            TEXT :  
            TEXT : Compare
            CONCAT {
            
    TEXT: (
                CONCAT {
                    TEXT : *this
                    TEXT : ,
                    TEXT :  
                    TEXT : value
                }
            
    TEXT: )
            }
            TEXT :  
            TEXT : <=
            TEXT :  
            TEXT : 0;
            TEXT :  
            TEXT : }
        }
        CONCAT {
            TEXT : 		
            TEXT : bool
            TEXT :  
            TEXT : operator>
            TEXT :  
            CONCAT {
            
    TEXT: (
                CONCAT {
                    TEXT : const
                    TEXT :  
                    TEXT : Tuple<
                    INVOKE {
                        NAME : $TYPE_LIST
                        ARGUMENTS {
                            NAME : $count
                        }
                    }
                    TEXT : >&
                    TEXT :  
                    TEXT : value
                }
            
    TEXT: )
            }
            TEXT : const{
            TEXT :  
            TEXT : return
            TEXT :  
            TEXT : Compare
            CONCAT {
            
    TEXT: (
                CONCAT {
                    TEXT : *this
                    TEXT : ,
                    TEXT :  
                    TEXT : value
                }
            
    TEXT: )
            }
            TEXT :  
            TEXT : >
            TEXT :  
            TEXT : 0;
            TEXT :  
            TEXT : }
        }
        CONCAT {
            TEXT : 		
            TEXT : bool
            TEXT :  
            TEXT : operator>=
            CONCAT {
            
    TEXT: (
                CONCAT {
                    TEXT : const
                    TEXT :  
                    TEXT : Tuple<
                    INVOKE {
                        NAME : $TYPE_LIST
                        ARGUMENTS {
                            NAME : $count
                        }
                    }
                    TEXT : >&
                    TEXT :  
                    TEXT : value
                }
            
    TEXT: )
            }
            TEXT : const{
            TEXT :  
            TEXT : return
            TEXT :  
            TEXT : Compare
            CONCAT {
            
    TEXT: (
                CONCAT {
                    TEXT : *this
                    TEXT : ,
                    TEXT :  
                    TEXT : value
                }
            
    TEXT: )
            }
            TEXT :  
            TEXT : >=
            TEXT :  
            TEXT : 0;
            TEXT :  
            TEXT : }
        }
        CONCAT {
            TEXT : 	
            TEXT : };
        }
    }
    CONCAT {
        TEXT : /***********************************************************************
Vczh Library++ 3.0
Developer: Zihan Chen(vczh)
Framework::Tuple
	
This file is generated by: Vczh Functional Macro
***********************************************************************/
    }
    CONCAT {
        TEXT : #ifndef
        TEXT :  
        TEXT : VCZH_TUPLE
    }
    CONCAT {
        TEXT : #define
        TEXT :  
        TEXT : VCZH_TUPLE
    }
    CONCAT {
        TEXT : namespace
        TEXT :  
        TEXT : vl
    }
    CONCAT {
        TEXT : {
    }
    CONCAT {
        TEXT : 	
        TEXT : class
        TEXT :  
        TEXT : TupleNullItem
    }
    CONCAT {
        TEXT : 	
        TEXT : {
    }
    CONCAT {
        TEXT : 	
        TEXT : };
    }
    CONCAT {
        TEXT : 	
        TEXT : template<
        INVOKE {
            NAME : $loopsep
            ARGUMENTS {
                CONCAT {
                    TEXT : 11
                }
                CONCAT {
                    TEXT : 0
                }
                NAME : $TYPENAME_NULL
                CONCAT {
                    TEXT : ,
                }
            }
        }
        TEXT : >
    }
    CONCAT {
        TEXT : 	
        TEXT : class
        TEXT :  
        TEXT : Tuple
    }
    CONCAT {
        TEXT : 	
        TEXT : {
    }
    CONCAT {
        TEXT : 	
        TEXT : };
    }
    REFERENCE {
        $TUPLE_APPLY : $count
        CONCAT {
            TEXT :  
        }
        CONCAT {
            INVOKE {
                NAME : $TUPLE_DECLARATION
                ARGUMENTS {
                    NAME : $count
                }
            }
        }
        CONCAT {
            TEXT :  
        }
    }
    CONCAT {
        INVOKE {
            NAME : $loop
            ARGUMENTS {
                CONCAT {
                    INVOKE {
                        NAME : $sub
                        ARGUMENTS {
                            CONCAT {
                                INVOKE {
                                    NAME : $MAX_FUNCTION_NUMBER
                                    ARGUMENTS {
                                    }
                                }
                            }
                            CONCAT {
                                TEXT : 1
                            }
                        }
                    }
                }
                CONCAT {
                    TEXT : 1
                }
                NAME : $TUPLE_APPLY
            }
        }
    }
    CONCAT {
        TEXT : }
    }
    CONCAT {
        TEXT : #endif
    }
}
==============================================================================================
Running Result
==============================================================================================
