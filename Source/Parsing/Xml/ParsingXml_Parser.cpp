#include "ParsingXml_Parser.h"

namespace vl
{
	namespace parsing
	{
		namespace xml
		{
/***********************************************************************
ParserText
***********************************************************************/

const wchar_t parserTextBuffer[] = 
L"\r\n" L""
L"\r\n" L"class Node"
L"\r\n" L"{"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Text : Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken content;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class CData : Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken content (XmlUnescapeCData);"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Attribute : Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken name\t\t\t\t\t\t\t\t\t@Color(\"AttName\");"
L"\r\n" L"\ttoken value (XmlUnescapeAttributeValue)\t\t@Color(\"AttValue\");"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Comment : Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken content (XmlUnescapeComment);"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Element : Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken name\t\t\t\t\t\t\t\t\t@Color(\"TagName\");"
L"\r\n" L"\ttoken closingName\t\t\t\t\t\t\t@Color(\"TagName\");"
L"\r\n" L"\tAttribute[] attributes;"
L"\r\n" L"\tNode[] subNodes (XmlMergeTextFragment);"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Instruction : Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken name\t\t\t\t\t\t\t\t\t@Color(\"TagName\");"
L"\r\n" L"\tAttribute[] attributes;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Document : Node"
L"\r\n" L"{"
L"\r\n" L"\tNode[] prologs;"
L"\r\n" L"\tElement rootElement;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"token INSTRUCTION_OPEN = \"/</?\"\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token INSTRUCTION_CLOSE = \"/?/>\"\t\t@Color(\"Boundary\");"
L"\r\n" L"token COMPLEX_ELEMENT_OPEN = \"/<//\"\t\t@Color(\"Boundary\");"
L"\r\n" L"token SINGLE_ELEMENT_CLOSE = \"///>\"\t\t@Color(\"Boundary\");"
L"\r\n" L"token ELEMENT_OPEN = \"/<\"\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token ELEMENT_CLOSE = \"/>\"\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token EQUAL = \"/=\";"
L"\r\n" L""
L"\r\n" L"token NAME = \"[a-zA-Z0-9:._/-]+\"\t\t\t\t\t\t\t\t@ContextColor();"
L"\r\n" L"token ATTVALUE = \"\"\"[^<>\"\"]*\"\"|\'[^<>\']*\'\"\t\t\t\t\t\t@ContextColor();"
L"\r\n" L"token COMMENT = \"/</!--([^/->]|-[^/->]|--[^>])*--/>\"\t\t\t@Color(\"Comment\");"
L"\r\n" L"token CDATA = \"/</!/[CDATA/[([^/]]|/][^/]]|/]/][^>])*/]/]/>\";"
L"\r\n" L"token TEXT = \"([^<>=\"\"\' /r/n/ta-zA-Z0-9:._/-])+|\"\"|\'\";"
L"\r\n" L""
L"\r\n" L"discardtoken SPACE = \"/s+\";"
L"\r\n" L""
L"\r\n" L"rule Attribute XAttribute = NAME:name \"=\" ATTVALUE:value as Attribute;"
L"\r\n" L"rule Text XText = (NAME:content | EQUAL:content | ATTVALUE:content | TEXT:content) as Text;"
L"\r\n" L"rule CData XCData = CDATA:content as CData;"
L"\r\n" L"rule Comment XComment = COMMENT:content as Comment;"
L"\r\n" L"rule Element XElement = \"<\" NAME:name {XAttribute:attributes} (\"/>\" | \">\" {XSubNode:subNodes} \"</\" NAME:closingName \">\") as Element;"
L"\r\n" L"rule Node XSubNode = !XText | !XCData | !XComment | !XElement;"
L"\r\n" L"rule Instruction XInstruction = \"<?\" NAME:name {XAttribute:attributes} \"?>\" as Instruction;"
L"\r\n" L"rule Document XDocument = {XInstruction:prologs | XComment:prologs} XElement:rootElement as Document;"
;

			vl::WString XmlGetParserTextBuffer()
			{
				return parserTextBuffer;
			}

/***********************************************************************
SerializedTable
***********************************************************************/

const vint parserBufferLength = 5216; // 23281 bytes before compressing
const vint parserBufferBlock = 1024;
const vint parserBufferRemain = 96;
const vint parserBufferRows = 6;
const char* parserBuffer[] = {
"\x00\x0E\x00\x02\x83\x80\x07\x7D\x00\x82\x03\xFF\x45\x08\x82\x83\x20\x01\x37\x00\x6C\x0F\x80\x02\x38\x03\x82\x86\x07\x0C\x80\x14\x20\x01\x30\x01\x33\x00\x4E\x1D\x80\x0D\x30\x01\x33\x82\x17\x88\x8A\x9A\x8E\x80\x8A\x88\x88\x15\xA9\x84\x99\x8C\x81\x20\x00\x3A\x37\xA1\xA3\x85\x97\x96\x82\x8D\x95\x0C\xAD\x91\x93\x81\x9A\x8C\x04\x8D\x36\xB8\xB8\x96\x23\x92\x89\x3A\x93\x28\xBF\x8B\x81\xA3\x8F\x94\x8A\x8B\x1A\xB4\x88\x9C\x8E\x88\x92\x90\x8F\x3C\xD1\x8C\x80\xA8\x82\xA2\xAB\xA2\x18\x9A\x9C\xBF\x8A\x98\xB0\xA8\x9F\x63\xD3\xA5\xB5\xA4\xA0\xAC\x87\xA3\x0C\xC2\x13\x8F\xAE\x30\x00\x33\x91\x15\xF9\x22\xAA\x92\xBC\x82\xB3\xBA\x32\x83\xB8\xA8\x8A\xB8\x88\xBE\xBF\x80\x80\x02\xD0\xB4\xC4\x94\xBA\x98\x76\x88\x8B\xC4\x8D\xC0\x03\xC7\xBF\x1E\x81\xC3\xC4\x84\xB6\xC3\xCB\xAB\x89\x82\x9B\xC3\x8D\xCF\xCD\xC9\xC9\xA9\x85\x85\xC3\x87\xC0\xCD\xD9\xD5\x02\xAD\xC0\x1D\xB0\xD7\xA8\xD8\xA9\x96\xAE\x88\xC6\xAA\x8A\xDC\xDF\xD7\xA3\x89\x8C\x01\xEB\xD9\x9F\x92\x3C\x39\xB5\xD7\xBA\x89\xE2\x83\x7F\xE5\x54\x90\xBD\xB8\x9F\xE1\xEB\xD3\x8A\xD4\x94\xE4\xD3\xDD\x87\xED\xCD\x99\xCC\xA5\xA1\xBB\xE0\x00\xDC\x01\x04\x48\xB9\xB8\x95\x89\x30\x02\x30\xCF\xCE\x85\xBF\x7B\xFC\xFD\xD0\xDA\x00\x44\x23\x48\x4E\x47\xFD\x7D\x7A\x56\x69\x10\x6A\x70\x54\x7B\x05\xBC\x7E\x79\x80\x10\x63\x18\x7F\x7A\x39\x4D\x8B\x7F\x81\x03\x45\x13\x53\x49\x14\xB8\x46\x87\x3F\x0B\x1A\x49\x11\x73\x73\x39\x45\x47\x53\x12\xB8\x45\x7E\x76\xFA\x4D\x84\x02\x46\x22\x50\x4F\x5D\x4F\x16\xAF\x8C\x40\x47\xDD\x5E\x86\x85\x03\x1A\x70\x75\x4E\x7C\x57\x75\x77\x7F\x53\xDC\x40\x06\x8C\x42\x7D\x6E\x57\x49\x6C\x3E\x88\x49\x52\x89\x00\x02\x98\x7D\x91\xE4\x40\x06\x1D\x53\xF8\x67\x42\x02\x46\x55\x8E\x41\x82\x47\x03\x80\x08\x86\x40\x12\xAC\x85\x90\x83\x16\xA3\x90\x02\x50\x0A\xA7\x4C\x7A\x9A\x65\x8D\x77\x99\x85\x16\x8F\x83\x46\x84\x4F\x5D\x82\x9A\x46\x70\x17\x52\x70\x44\x20\x65\x8F\x86\x9D\x11\x93\x8B\x81\x4E\x21\x8C\x45\x44\x44\x10\x78\x4A\x86\x44\x1C\x87\xAA\x8D\x83\x6A\x8F\xA0\x56\x9E\x0A\x1A\x40\x98\x94\x52\x84\x90\x56\xA0\x69\x9A\x46\xA5\xA4\x6E\x88\xAA\x46\x84\x56\x65\x85\x7D\x5F\x5E\x7B\x40\x57\x91\xE8\x4C\x43\xA8\x49\x92\x86\x9A\x45\x92\xB4\xA7\x43\x01\x56\xA2\x9B\x89\xAE\x9C\xED\x5A\x45\x8B\x53\xF7\x71\x80\x67\x49\xA0\x8D\x89\xA0\x42\x23\xBD\x55\x8B\x7C\xF8\x69\x81\x97\x44\x7D\x59\xAC\x43\xA6\xD0\x9D\xA9\x7D\xB2\x05\x8B\xB4\x41\xB3\x00\x0F\xB7\x54\x8A\x39\x6B\x8D\x70\xAC\x03\x78\xA1\x58\x75\xE8\x82\x48\x8C\x00\xD0\x78\x40\x9C\xB5\xF9\x68\x9D\x80\x04\x1A\x71\x0A\x44\xBE\xD4\x7D\xBA\x4B\x87\x16\xBE\xB3\x58\xC0\x0D\x82\xCF\xBC\xC1\xFD\x46\xC4\x68\xC2\xFD\x7C\xBC\xB2\x4E\x53\x1B\x40\x02\x14\x00\x15\x1B\x9A\xC4\x23\x8F\x1A\x4F\x17\x00\x1A\xC0\x14\x00\x1A\xA2\x4D\xB8\x00\x2F\x00\x0C\x0C\xC9\x00\x3F\x0D\xBD\x95\x11\x22\x80\xC6\xC4\x14\xD6\xCE\x40\x47\x19\xDB\xC7\xC4\x13\x1D\xC0\x01\xC6\x86\x23\xE5\xCA\xC9\xC9\x3E\x27\x73\x42\x01\x1A\x54\x06\x66\xC6\x4D\x00\x0F\xC4\xCE\x1A\x98\x10\x00\xC7\x1A\x8C\xD0\x01\xD2\x21\xD2\xCC\xC6\xC7\x20\xFA\x4D\xCE\xC9\x28\xE5\xCB\x95\x5A\x0C\x46\xDC\x41\xC4\x23\xA2\x47\x10\x00\x52\xD0\xD8\xD9\xD6\x54\xFA\x4C\x44\xC7\x0E\x78\xCA\xC7\xCE\xB6\x8C\x45\xCB\xDD\x00\x01\xDB\xAF\x5D\x1A\x58\x78\x41\xD4\x6C\xD9\xD2\x4B\xDB\x39\xDF\xC5\xD7\xD7\x08\x65\xC7\xCB\xC8\x4D\x84\x4C\x8E\xAC\x6B\xDA\x8D\xDB\xE0\x4F\xF7\xC9\xCC\xDD\x88\xC4\x40\xD0\x00\x55\x96\xB8\x41\x95\x1A\x91\x15\xC4\x00\x36\x78\xC9\xE7\x40\x25\xFD\x00\x00\xD1\x03\xEE\x80\x8C\xE9\x53\xD9\xDD\xC8\x43\x5B\x23\x4D\x08\x00\x7A\x30\xE7\xEE\x16\x00\x30\x00\x03\xED\x39\x00\x0A\x0C\x00\x2E\x15\xE5\xCB\xED\x5D\x00\x0B\x0B\x9E\x0C\x5E\xBA\x61\x7C\x1C\x5C\x4C\x51\xE9\xA3\xDA\x83\x06\x46\x22\x00\x05\xEE\x17\x5C\xC1\xD9\xF5\xF2\x2A\x00\x09\xF4\x1F\x00\x27\x0A\xF4\x00\xDC\xE7\xC1\xD2\xF9\xE0\xE5\xF1\xB0\x43\x7E\xF1\xA3\x5C\xD2\xB1\xD5\xDC\x45\xF6\x76\xDC\xD5\xC9\x08\xBF\xFD\xF8\x0B\xF9\xDC\x67\x79\xDE\x00\x09\x78\xF2\x77\x73\x7B\x28\x77\x75\xD0\x05\x8D\x7F\x03\xA8\x7B\x80\xC9\x69\x04\x00\x61\x77\x77\xDB\x5B\x75\x71\x03\x2F\x73\xE7\x16\x31\x40\x9B\x1C\x26\x26\x2C\x1A\x22\xE2\x28\x6C\x7F\x92\x75\x76\x4B\xB0\x7F\x80\xCA\x35\x7F\x7E\x04\xA5\x61\x79\x0C\x8F\x84\x00\xA8\x60\x86\x00\x24\x7A\x86\x32\x88\x83\x02\x80\x02\x83\xF0\x78\x84\x80\x28\x61\x6A\xE7\x0B\x6E\x75",
"\x1B\x59\x6E\x69\x1C\x24\x06\x46\x2D\x8F\x80\xF5\x40\x02\x75\xD9\x66\x7C\x08\x28\x65\x23\x92\x7D\x2D\x64\x61\x57\x75\xEE\x36\x2B\x77\xDE\x7D\x79\x78\xC3\x65\x78\xC7\x02\x81\x82\xE5\x76\x82\x7C\x67\x86\x7E\xF3\x56\x36\x43\xD8\x15\x49\x62\x1F\x76\x26\x43\x1A\x4B\x6F\xC4\x61\x5E\x8C\xF1\x69\x22\x85\x7A\x5C\x20\x0C\x82\x26\x69\x10\x40\x00\x9E\x3F\x5C\x3D\xEB\x4C\x20\x90\x77\x46\x51\xA9\x38\x25\x78\x8A\x4C\x51\x27\x11\x61\x4D\x45\x38\x21\x20\x86\x00\x08\x00\x53\x8A\x8B\xC9\x08\x95\x51\x3C\x75\x51\x68\x7E\x80\x00\x27\x82\x9A\x90\x60\x4F\x02\x23\xA3\x83\x92\x9E\x45\x71\x93\xC8\x38\x22\x83\x04\x37\x93\x14\x9B\x90\x41\x44\x9E\x93\x91\x03\x8E\x3E\xD3\x33\x58\x52\x54\x99\x68\x52\x84\x99\x25\xF1\x7A\x56\x10\x8D\x34\x94\x97\x9F\x82\x78\x26\xE8\x87\x65\xEC\x72\x92\x27\x36\x2D\x6F\x14\xC3\x73\x8A\x75\x50\x2B\x8A\x7B\x0B\x9A\xD3\x4F\x49\x5A\xFB\x13\x4F\x9A\xCA\x93\x88\xB6\x41\x4E\x9A\x4F\x48\x5B\x99\x7D\x0B\x9B\xFF\x53\x89\x7B\xCD\x59\x7B\x8A\xE4\x6C\x9F\x00\xEF\x90\x01\x6C\x93\x8E\x69\x11\x64\x5A\x4E\x32\x40\x9C\x6A\xB7\x8A\x9F\xC6\x53\x47\x1D\xD3\x89\x9C\x79\xA7\x65\x64\xF4\x82\x25\x34\xD9\x63\x9B\x65\xA8\x53\x22\xAA\x4D\x39\xAB\x4A\x4B\x99\xEC\x5E\x7B\x99\x12\x82\x9F\x40\xBF\x97\x53\x5A\x79\x8F\x8F\x00\x00\x5E\xB8\x27\x44\x94\x15\x74\x5D\x92\x08\x2E\x6A\x48\xD0\x44\x5C\x93\xAC\x43\x98\x00\x02\x74\x43\x34\x9B\xA4\x68\x6D\xA3\x5A\x2C\x41\x6A\x3F\xD9\x77\x64\x95\x4E\x9B\x99\x0A\xB5\x7F\x32\xFE\x96\x9B\x93\x18\x9A\x9B\xB0\x6A\x28\x39\xC3\x49\x3F\x86\x9A\xA2\xA9\xF4\x25\x9F\xB6\x68\x95\xA3\x94\x73\x9B\x99\x1E\x25\x47\x14\xB5\xA3\x5D\x92\xB8\xA5\x39\xBA\x97\x61\x82\x41\x98\x27\x21\x83\x26\x69\x6C\x44\xAC\xF1\x00\x0A\x5E\x09\xB3\xA2\x94\x62\xB4\x56\x9E\x3A\xAB\x98\x87\x34\x7B\x72\x12\x6E\xA8\x29\xE6\x45\x56\x8D\x9A\xA9\xAE\x6D\x40\x5B\x25\xE1\xA8\x98\x5C\xA6\xA8\xA4\x85\xA0\x59\xF1\x32\x00\x21\xD4\x07\x9E\x57\x73\xA1\x9C\x33\xE8\x83\x8B\xA0\x92\x9A\xB2\x45\xA0\x03\x33\xF6\x90\xAE\x6E\x8B\xAF\x9B\x46\xB2\xB3\x38\xD1\xAC\xA9\x22\x7F\xAD\xA0\x00\x0B\x9C\x1A\xEE\x9B\x99\x78\xA8\x8F\xA2\x47\xB7\x9E\xCE\x78\x35\x59\x89\x02\xA2\xAF\xC3\x5E\x99\x40\x9F\x54\xAA\x83\xA8\x61\xA1\xB0\x77\xB2\x3F\x8F\xA0\x23\x88\xAC\x55\x2D\xBF\x52\x9C\x6C\xBC\x88\xAB\x8D\x89\xB4\x3D\x3C\x59\x53\x63\xC0\x91\xB3\x9D\x9C\x68\xB8\x0B\xBA\x42\x5E\x99\xB3\x8B\x4B\x9C\xB3\x9B\x40\x44\xB4\x68\xC3\xAD\xB8\xA8\x93\x5D\xB4\xBC\xA4\xA2\x3A\xD5\xAC\xB4\x78\x95\xAB\xB9\xDF\xB3\xB4\x40\xB6\xBD\x9F\x65\xB9\xB5\xB6\xFC\x87\x9E\x7A\xBE\xB8\xA0\xA0\x81\xBC\xA1\x92\xA4\xBB\x1D\xAB\x5C\x2D\xAF\x09\xBF\xB5\x94\xAC\xBA\x5F\xCB\x9F\xB9\x9C\x1F\xA0\xAE\x5C\xA4\xA6\xB4\x66\x5D\x2E\x94\x84\x22\xA5\x24\x4C\xA6\x57\x94\xCB\xAC\xC6\xA4\x16\x98\x10\xD9\xC2\x4D\x9B\xC4\x5E\xBA\xBE\xB6\xA7\xFE\xB9\xB8\x79\xD5\x9E\x55\x93\x1B\xB0\xA9\x9E\xA2\xBE\x39\xAB\xC2\x40\x4E\x52\xAE\xB4\xBD\xA8\x8E\xCA\x4B\xB9\xAB\x65\x91\xC1\x5A\xE5\x54\x5D\x74\xDC\x68\xC2\x67\x5A\xC3\xC2\x25\xD2\xB0\x4F\xD6\xA8\xBA\xA1\x9B\xBD\xC5\xCB\x9E\xB8\x8C\xE1\xB7\xBD\xF1\xBA\xAB\xB4\x55\xD3\xC7\x69\xD5\xAB\xC7\x04\xFD\xC3\xAB\x22\xDD\xA8\x92\xAC\x41\x95\x54\xA5\x94\x3D\x6B\x90\xAD\x20\xAA\x95\x57\xC5\x80\x00\x0C\x20\xC6\xCF\x2D\xC0\x56\xC4\xCD\xB5\x98\xA9\x3F\xD7\xA4\x87\xFA\xAD\x4F\x45\x43\x28\x50\x1B\xAE\xB4\x5A\x93\x21\xB0\xF6\x3C\xCE\x4F\x7F\xCC\x2F\x96\xB2\xBD\xC0\x9C\x3A\xAE\xCF\x8D\x5C\xA0\xA9\x40\x5B\xC1\x29\xAB\xCF\xCC\x39\x21\xAD\x3E\xBA\xB4\xBF\x93\x07\xB0\xAE\x9B\xD8\xBF\xB1\x6B\xAA\x5F\x1A\x31\xCA\xBE\x9C\xD9\xBF\x00\xFE\x9C\x7E\x24\x90\x29\x5E\xAD\xAB\x99\xAB\x97\x6F\x4B\x9C\x1E\x26\xBD\x53\x93\xD5\x5A\xFA\x48\xD6\x00\x33\xD5\xD1\x76\xC1\xAF\xAE\xB5\x5E\x61\x0B\xC0\xB2\xAD\x8D\x93\x21\xA4\x9A\x47\x38\x58\x83\x22\x93\x70\xA3\xD8\x2E\xC1\x6D\xBB\xF7\x69\xA2\xD2\x6A\xBF\xD3\x2E\x90\xBD\xCC\x00\x33\x00\x00\xC5\x8F\xAF\xB6\xD4\xB9\x98\xEB\x8D\x99\xC5\x4E\xD8\xB0\x94\xB1\xBD\xB2\x2A\xDA\x5D\x48\x57\xCE\xDF\x8D\xE9\xB0\x00\xD4\xAA\xB5\x9D\x57\xBD\xD6\x45\x89\xC1\xBF\x50\xFB\x9B\xD4\xB8\xB4\xB7\xBF\x82\xAB\xD1\xC9\xBD\xBD\xB2\xFF\xBA\xB9\x80\x89\xD6\xB9\x02\xEB\xD8\xC1\xF4\x99\xA3\x48\x7F\xA0\xD9\xC1\xBE\x90\xD8\xDA\xD8\xDB\x2A\x80\x06\x07\xC6\xA2\xDA\xE3\xE5\xD5\xAB\xB9\x88\xEA\xC5\x27\xD4\xA4\xDD\xE0\xA6\xBF\xBB\xF5\xBF\xA8\x1B",
"\xE8\xBA\xBF\xF5\xCB\xBE\x3C\xED\xB7\x8C\xE5\x89\xC2\xCA\xB2\xBE\xDF\x6E\xA1\xBE\x9F\xFB\x83\xE4\xDE\xA8\xAB\xCB\xC1\xD0\x99\xDD\xE1\x8C\xE3\x5A\xC7\xA6\xC1\x58\x36\xE1\xE3\xE6\x94\xE4\xDB\xB8\x83\xCB\x74\x9D\xA3\xDA\x25\xD7\xB8\xDD\xC2\xAB\x98\x77\xF7\xC2\xB7\x18\xD9\xCD\xA9\xA2\xB2\xDF\xCB\x9B\xA6\xDE\xF6\xB9\xDD\xE6\x10\xF6\xCC\xCA\xA8\xD2\xD5\xDB\x92\xB6\xE7\x3B\xE4\xEE\xC8\xBF\xB8\xEA\x00\xC6\xE9\x55\x48\xEE\xE3\xC9\xE9\xE3\x8A\x89\xDF\xC8\xE4\x86\xBE\x96\xD7\xAB\xE7\x25\x07\xE9\xE6\xE5\xE3\xB0\xA7\xC9\x1F\xE3\xF1\x79\xE7\x25\xCE\x96\xB6\xEE\xD6\xD0\xCF\x99\xEC\x50\x8B\x99\x1E\x92\x63\xF4\x6B\x66\x62\x85\xFE\x9F\x4A\x1E\x2E\x28\x38\xFF\xED\xF1\xB1\xC6\xF1\xA4\x61\xD2\xC1\x90\xAC\x46\xC3\xB3\xA8\xF6\xC8\x23\xC3\xCD\x73\x45\x7F\xDA\x99\x88\x24\xA6\xA9\xE0\xCA\x4B\xCD\x35\xCF\x25\xE8\xC4\xE4\x45\xF3\xF3\xDE\xF1\xB5\xF4\x2B\xE1\xEA\xE5\x8E\xF2\xEE\x3C\xDD\xC4\x9F\xBF\xF9\xCC\xC4\x2C\x56\xE3\x21\xEC\xEF\xE7\x93\x05\xDE\xF5\x3A\xFD\xD3\x5A\x8E\x93\x22\x47\x4D\x3F\x2F\xCE\xC2\x20\xB4\xF8\x92\xE1\xB8\xD4\xDE\xCE\x65\xD5\x95\x27\xEA\xA9\xCC\x39\xC8\xDC\xAD\x6F\xC7\xD7\xA5\xF3\xCC\x3D\x3A\xF1\xBF\xF9\xB2\xFD\x2F\xA1\xFE\xC6\x2B\x40\x71\xD2\xB6\xD2\x64\x69\x92\x5D\x67\xA7\x1E\x7F\xFB\x50\x57\xC0\x6F\x68\xCA\x69\x13\x09\x83\x71\xCB\x43\x7F\x6A\x52\x7D\xD7\x60\x6C\xD7\x78\x58\x50\x7A\x58\x13\x3B\x80\xDE\x7D\x6C\x1A\x13\x7E\x80\x74\x67\x51\x66\x6D\xC6\x68\x71\x17\x77\x81\xEC\x15\x3C\xA6\x61\x6E\xB7\x78\x80\x26\x89\x13\xBD\x77\x75\xC0\x79\x75\x2C\x63\x7C\x53\x68\x7C\x63\x71\x6F\x36\x83\x5E\x05\x77\x6F\x41\x49\x60\xAE\x5B\x6F\xF4\x4D\x6F\xE5\x7A\x7D\x01\x73\x5F\xAA\x65\x70\x42\x78\x46\xCF\x41\x79\x9E\x7E\x50\x47\x74\x60\x13\x57\x60\x40\x88\x51\x4E\x7C\x60\x2D\x88\x13\x55\x2E\x6A\x39\x2C\x3C\xD7\x6F\x2E\xB0\x60\x53\x4E\x3F\x71\x5E\x8E\x82\x92\x5C\x84\x34\x61\x27\xEC\x18\x4B\xBD\x61\x3A\xA3\x34\x3D\x7A\x58\x86\xF5\x29\x13\xBD\x69\x79\xD2\x30\x3B\x38\x3D\x79\x67\x84\x2F\x73\x2E\x68\x68\x7C\x11\x4D\x39\x57\x0B\x7C\x57\x6A\x8E\x80\x53\x43\x86\x38\x17\x49\xAC\x37\x6D\x28\x4B\x29\x1E\x12\x6C\xB5\x4C\x88\xA4\x60\x00\x23\x07\x6A\x8B\x86\x6B\xAB\x65\x57\xB5\x49\x79\x36\x1F\x86\x7A\x8D\x57\x84\x84\x6B\x35\x6E\x11\x97\x49\x71\xC5\x73\x63\xA7\x75\x8A\xF9\x1E\x66\x8B\x7B\x82\x87\x7D\x4D\x63\x70\x79\x09\x74\x63\x5B\x76\x79\x4A\x88\x79\x12\x35\x87\xD4\x38\x87\x7A\x50\x7A\x43\x1F\x14\xA1\x54\x7A\x62\x73\x5E\xA7\x78\x7F\xAB\x7D\x1C\x62\x37\x6D\xC4\x8B\x7B\x7D\x19\x6C\x8F\x4B\x81\x90\x13\x3B\x08\x1E\x81\xC9\x8F\x55\x7D\x17\x7E\x97\x49\x7E\x10\x8A\x27\xD0\x86\x6C\xD9\x8D\x6D\xDC\x7B\x6C\xDF\x70\x10\x1D\x84\x64\xEA\x74\x4A\xF4\x74\x86\xD5\x64\x58\x57\x80\x00\x19\x70\x6C\xC5\x37\x03\xE0\x67\x6A\xC0\x6F\x82\x23\x74\x74\x32\x8D\x1C\x34\x8D\x75\xC1\x83\x63\x38\x88\x78\x5A\x69\x63\x3C\x84\x73\x3F\x87\x76\x42\x86\x84\x00\x7F\x76\x43\x87\x84\x39\x69\x84\x4D\x67\x8F\x02\x6D\x70\x51\x81\x16\x95\x77\x76\x7E\x7E\x5C\xEB\x89\x85\x12\x3B\x85\xE1\x70\x57\x86\x8B\x7D\x1A\x89\x35\xC7\x1F\x69\x1E\x8D\x91\xD6\x8B\x3A\xBE\x45\x89\x61\x2D\x7A\x20\x58\x92\x23\x1C\x8C\xDD\x70\x92\x90\x19\x66\x1E\x8C\x92\x1E\x15\x92\xA4\x8B\x8F\xF9\x17\x8A\x38\x95\x24\xB4\x7C\x35\x8C\x7B\x93\x50\x10\x8B\x25\x7A\x6E\x7B\x74\x8B\xF4\x44\x87\x00\x0B\x79\x77\x82\x79\x53\x4C\x8B\xA2\x7F\x8B\x1B\x58\x8A\x45\x23\x8A\x82\x70\x94\x27\x12\x01\x55\x99\x83\x33\x6E\x92\xE0\x87\x1C\xA7\x4C\x10\x1E\x82\x95\x41\x91\x82\xC3\x89\x7B\x7A\x64\x2F\x16\x0E\x4B\xD3\x8C\x61\x5C\x90\x49\x96\x83\x49\x00\x0B\x8D\x03\x1F\x4C\xD2\x86\x96\xD0\x7C\x7B\x00\x05\x96\xB0\x72\x66\xC5\x8D\x17\x58\x93\x7D\x6B\x94\x2F\xAC\x4F\x96\x39\x15\x81\x6A\x74\x8E\x81\x99\x53\x22\x8E\x7A\xC0\x6F\x97\x13\x8B\x8E\x6D\x98\x13\xAD\x41\x1A\x39\x1B\x91\x74\x94\x8E\xF3\x8B\x98\x16\x84\x6E\xB8\x4A\x92\x2C\x8C\x99\x18\x83\x99\x57\x18\x13\x0F\x6F\x4C\x53\x73\x69\xF5\x7C\x39\xBE\x4D\x91\x5F\x9D\x85\xAF\x62\x4C\x19\x8D\x8C\xB3\x52\x49\x39\x1F\x69\x97\x94\x4B\x24\x9A\x9A\xD3\x7D\x91\xED\x79\x91\xF0\x20\x9B\xA2\x90\x97\xA1\x46\x9A\x1C\x9F\x9A\x38\x12\x44\x59\x9E\x8F\xF9\x17\x8C\xC6\x62\x96\x27\x11\x99\xB3\x9E\x4A\x00\x0D\x9A\xB1\x4B\x4C\x61\x96\x95\x03\x47\x93\x5A\x99\x1F\x86\x9D\x8A\x9F\x5B\x95\xD1\x94\x99\x94\x4A\x11\xC4\x9E\x9D\x32\x69\x1F\x41\x3A\x69",
"\x09\x93\x6A\x8E\x96\x6C\xD9\x7A\x6A\xD0\x91\x9C\x95\x94\x9E\xD6\x94\x8E\xEF\x93\x6A\xE9\x9E\x4B\xF7\x92\x50\x9E\x94\x7E\x06\x92\x50\x83\x94\x9B\xA4\x94\x9F\xB3\x40\x6A\xEB\x92\x50\xF9\x93\x7D\x01\x8C\x1E\xED\x9E\x7A\x0B\xA0\x9B\xDF\x8E\x96\x02\xA0\x00\x96\x95\x9F\xB4\x4F\xA0\xC7\x9A\x99\xD1\x64\x68\x6A\x5D\x9F\xC7\x6B\x71\xF2\x93\xA0\x96\x4B\x4C\x17\xAC\xA1\x91\x59\x88\xC6\x64\x93\x00\x0D\x9D\xA0\x80\x89\xF1\x94\x98\x38\x19\x66\xB7\x9B\xA1\xB5\x61\x26\x41\x38\xA2\x0E\xAF\x88\x96\x87\x7A\x2A\xA1\xA0\xD2\x96\x9B\x24\xA4\xA3\xA1\x83\x40\xD8\x86\x4B\xEC\x7E\x4B\xDD\x88\x4B\x3D\x90\x67\x1F\x79\xA4\x20\x8E\x4F\xF7\x76\x97\xF9\x74\x63\x04\x8F\x27\x8A\x6F\x7F\x1B\xA3\x56\xBC\x63\x80\x88\x6D\x7F\xCA\x7F\x99\x54\x72\x80\xFE\x40\x69\x0C\x8B\x8E\x95\x65\x8E\x6C\x68\x4B\x97\x4A\x97\x77\x41\x7B\x7D\x92\x8E\x80\x92\xA5\x6F\xA5\x3C\x34\x01\x53\xA7\x69\x98\x78\x96\x6E\x4C\x65\x77\x4D\x83\x83\x07\x64\x7C\xD8\x9D\x8F\xAE\x8A\x83\x0B\x96\x55\x3C\x6B\x51\x78\xAD\x17\x12\x83\x82\xEB\x8D\x8E\x90\x90\x00\x75\xAA\x82\x04\x17\x9A\x6A\x54\x8F\x09\x66\x86\x26\x7F\xA7\x35\x8A\x9C\xF0\x67\x7C\x9C\xA0\x74\x32\x7B\x5A\x67\x73\x90\xF0\x58\x54\xFB\x9C\x72\xFF\x49\x6A\xA3\x68\x84\xFA\x37\xA9\xB1\x8C\x89\x78\x70\x85\xC8\x5B\x74\x7C\x7A\x60\x9F\x85\x71\xBA\x9E\x9A\x5B\x8A\x26\x5A\x8F\x9B\x8C\x40\x00\x8C\x51\x86\xAC\x8E\x9B\xB0\x62\x94\xC1\x73\x45\x70\x8B\x87\x58\xAC\x86\x16\x3E\x86\x81\x80\x2C\x83\x8E\x5A\x48\x9A\x94\xD5\x39\x87\x82\x82\x80\xAE\x5E\x87\xC5\x9C\x89\xD7\xA6\x68\x9F\x8D\x91\x54\x93\x7D\xCE\x99\x97\xC9\x93\xA8\xE0\x95\xA7\xAB\x83\xA9\xED\x6B\x9D\x45\x26\xAC\xF7\x83\x8B\x4F\x49\x60\xD3\xA6\x87\xD5\xAB\x8B\x58\x2E\x8B\x55\x83\x45\xE3\xAB\xA8\x39\xAA\xA5\xB5\x29\x71\x18\xAD\x61\xCC\x5F\x71\x01\xB5\x67\x76\x51\x3B\x78\x5C\x11\xDC\xA0\xAD\x02\x8F\x77\x01\xB8\x88\x27\x9A\xA3\x61\x2E\x88\x35\xAD\x92\xC0\xA2\x89\x94\x82\xB1\x23\x16\xB0\x99\x82\x31\x9B\x8F\xAC\x69\x8D\xB0\x1B\x5A\xA2\xFC\xA2\x10\x45\xAB\x7E\x7A\x24\x28\xE6\x8A\x56\x0A\x3A\x47\x0D\x2C\xA6\x23\x5A\x7B\xD4\x80\x00\x69\x69\xA8\xFD\x2C\x01\x3F\x15\x27\x25\x80\x9A\x6F\x2D\x2B\x3C\xB9\x13\xD4\x1E\x01\x39\xBD\x20\x18\x9D\x91\x23\x3D\x91\xD4\x13\x45\xAD\x35\x20\xDA\x9F\xA9\x27\x11\x4A\xE3\xA4\x1D\xF8\x37\x30\x05\x2A\x9E\xFF\x9F\x2A\xAF\x3A\x6A\xD4\x1A\x44\x4B\xBD\x1F\x8E\x8E\xAF\xB8\x4A\x26\x01\xB4\x1D\x26\x03\xB4\x05\x28\xA3\x2B\x9A\xB1\x1E\x1D\x25\x6A\xBD\x2F\xFF\x3D\xB5\xFC\x10\x01\x75\x49\x10\xB1\x1F\x0F\xD4\x11\x1B\x2D\xB9\xB7\x2D\xB2\x1E\x09\x13\x32\x73\xBA\xB7\x03\x1E\x46\x1A\x18\xB7\x79\xB7\xB2\x2B\xBA\x27\x74\xBF\x13\xEE\x17\x3A\x80\xB2\x34\x02\x15\x25\x84\xBD\xB2\x86\xB9\xA6\xC0\x24\x1A\x75\xBB\x91\x23\x3A\xB7\x8C\xB9\xAB\x04\x11\xB9\x0A\x33\xB9\x98\x68\x13\x9E\xB2\x3F\x04\x19\xAC\xB5\x24\x1D\x5F\xB2\x57\xA7\xB6\x30\x7C\xB6\x1D\x69\x65\x25\x7A\xB1\x1B\xA3\xB3\x10\x23\x39\x59\xA8\xBB\xB3\x61\xAC\x1E\x79\xBD\xBA\x05\x19\x66\x68\xB0\xB8\xB2\xB9\xB7\xB5\xB0\x65\xD4\x10\xB3\x47\x6F\xA6\x2A\x15\xB7\x4C\x2D\xB8\x08\x13\xBB\xFE\x22\xB6\x26\xAB\xBA\x7C\x3A\xA0\xD1\xB8\x4B\xFF\x0F\xB7\xD6\x1B\xB9\xEE\x17\xB7\x1A\x15\x02\x1A\x18\xBD\x80\xB0\xBD\x60\xB5\xB9\xC4\x14\xBD\xE3\xBC\x1E\xBF\xBE\xBD\xCC\xBF\x3C\xE6\xBA\xBA\xB8\x40\xBE\xEB\xB4\x10\x56\xBA\xAA\x02\x5F\x0F\x9B\xBA\x26\xDC\xB0\x36\x08\x10\xBF\x79\xB2\xBE\xEE\xB4\xBE\xD3\xBA\x88\xD5\xB0\x2C\xBF\xB8\xBF\x79\xB9\xBA\x85\x69\x13\x9B\xB4\x1D\x6A\x25\xA5\x89\x6E\x7F\xD4\x10\xBA\xE7\x8E\x21\xF7\xB9\xB7\xC1\xBC\x10\xFC\xBD\xB2\xFE\xB9\xC0\x38\x17\xBB\xED\xBC\xC1\x26\x9C\x10\xCE\xBD\x2F\x08\xCA\x56\x0B\xCC\x2B\x0C\x1E\xC0\x5E\xA5\x22\x11\xC8\xA4\x46\xA8\xB8\xCC\xBC\xBB\xFF\x0A\x26\x9F\x61\xBF\x96\xBF\x13\xA1\x49\x66\x36\xC9\xB8\x63\x19\x66\x0F\x6A\xB9\x5C\x21\xC4\x36\xCA\x8E\x3F\xB2\xBA\xC2\xB7\x2B\xC4\xBA\x11\x4D\xB6\xAE\xF9\x1D\x2F\x32\xC5\x25\x1B\x9B\xC3\x63\x15\xB7\x3E\xCB\xC3\x9B\xB5\x25\xBF\xBA\xB7\xC6\xBE\xA6\xCA\x8E\xB8\xFD\x23\xBC\x14\x54\x1D\x4B\xCF\x9D\x4D\xCF\x13\x75\xBE\xB7\x3B\xC2\xB8\xFA\xBB\xBE\x12\xCC\xB2\xD6\x15\xB7\x8B\xB9\xC6\x42\xC8\x10\x06\xC2\xB9\x2E\xC8\xB2\xD2\xB5\x1D\x05\x18\xB9\x56\xC3\xC7\xA4\xBC\xBC\x6D\xCA\x27\x23\xC3\x2F\xDD\xA0\xB4\xE5\xB2\xC0\xE7\xB6\xC8\x7A\xCC\xBB\x9E\x92\xC5\x32\xCB\xB9\x3A\xC3\xB8\x1A\x19\x66\x9B",
"\xBF\xBB\x91\xCD\xB2\xF3\xBD\x76\x50\x17\xC2\x01\xC4\x10\x70\x7A\x7D\x2C\xC7\xC8\x8C\xA5\xC4\x52\xC6\xC6\xA6\xCC\x10\x86\x91\xBB\x3B\xC5\x29\xEB\x8E\xC1\x8F\x94\xCA\xD7\xBF\x13\xDA\xB6\xC1\xDD\xBF\xBD\xAB\xCE\xB3\xB9\xBA\xC8\x9A\x18\xBB\xA8\x99\x13\xE9\xBB\xC3\x44\xC9\xCB\x38\x19\xC1\xF1\xB9\xC9\xD5\x75\x10\x9B\xB4\x9D\x02\x31\x1B\x6A\x24\xCC\x06\x3C\xCA\xA4\xCE\xCA\xA3\xC2\xCC\x21\xC4\xC7\xC0\xCC\xCB\x6A\x53\xC2\x69\x64\xA6\xDE\x71\xCD\x3D\x27\xC7\x87\xB5\x2B\xF6\xBA\x11\xCA\xCE\x2F\x17\xCB\xBF\xB7\xC0\x39\xDE\xCD\xC9\x8C\x9B\x8E\xBF\xB3\xC2\xD2\xCD\xCE\xA4\xCA\xCD\x1A\x1C\xCD\x1F\x8A\xBB\xDF\xC3\x7D\x4E\xA8\xCF\x80\xB2\xC3\xBF\xB2\x97\xA5\xCF\xC6\x8A\xBA\x11\x9C\xCA\x30\x57\xC3\xC9\xD7\xC3\x7D\xC0\x65\x25\xEA\xB5\xCC\xFA\x97\xA0\x50\x1B\xC8\x9F\x6D\xA0\x8D\xB0\xBE\x55\x27\xC9\x0A\x31\xCC\xBD\xC8\x85\xB5\xC3\xC4\x0F\xD7\xB5\x4B\x2D\xBF\xA7\x2D\x89\xB8\x44\x1D\x45\xB6\x9C\x8B\xC9\x66\x14\xD0\xB8\x16\xD8\xD0\x1E\xDA\xD0\x17\x9D\xD1\x0E\xD3\x7D\xA7\xA1\xD2\x1A\xC3\xD2\x85\xCD\xC1\x7E\xCE\x7A\x1D\x92\xC3\x0F\x6B\xD2\x7A\xBD\xD2\xCD\x39\xD0\xAF\xC4\xCD\x0C\xD4\xD4\xEE\x90\xD1\x36\xDA\x30\x84\xCC\xB0\xFC\xCB\x41\xBB\x98\xD2\x32\xCC\xC7\x36\xC2\xD4\x08\x18\xD1\x06\x3A\xD1\x6A\x57\xD4\x2F\xD7\x6D\x35\xDE\xC5\x0C\xC8\xD3\x4E\xDA\xCB\xF2\xB1\xB1\x89\xCE\x21\x75\xBE\x99\x86\x41\xBF\x56\xD4\x10\x58\xD2\x30\x5A\xDA\x27\x5C\xD3\xD3\x5E\xDA\xD4\x60\xD8\xC2\x08\x16\xBA\x25\xDA\x11\xBF\xB3\x68\x15\xB4\x20\x75\xB5\xCE\x00\x00\xD4\x79\xBD\xD6\x03\x1F\xD6\xFE\x21\xD7\xB5\x23\xD7\xEB\xB6\xCC\x71\x73\xC8\x62\xD1\xB2\x4F\xD4\x10\x27\xDB\x85\xFE\x22\xC3\x9F\x6C\x9C\x01\xD7\xCA\xC9\xBA\x11\x15\x02\xC7\x36\xC5\xB3\x72\xAD\xC5\xC5\xBA\x96\xA3\xD3\xB3\xE3\xC3\x16\x15\xCD\xB2\xCC\xC6\xCB\xA1\xDE\x32\x7B\x9A\x7A\xA4\xDD\x37\xA6\xD1\xDB\x32\xBC\x61\x05\xCB\xC3\x5B\xCC\x97\x5D\xC5\xD0\x7F\xC2\x10\x2A\xC3\x11\x10\xC9\xCF\xD7\x6B\xCF\x15\x2B\xDA\x0A\x37\xCE\x04\x1E\xCC\x02\x32\xDA\xB6\xD7\x96\x2C\x25\xDA\x71\xAF\xDC\x77\x9D\x17\xEF\xCA\xDB\xB5\xDD\xA6\xBC\xD3\xB3\xBE\xD3\x10\x0D\xCD\xA5\xC2\xD7\x47\x2D\xCA\xCF\x2F\xC9\xC7\x01\xD2\xC3\xB1\x19\x96\x36\xC0\xCF\xA2\xC3\x10\xC6\xDA\xD3\x7D\x40\xCE\x94\xB3\xD9\x9B\xDE\xC4\x54\xCA\x11\x17\x00\xDA\xCD\xB9\xB7\x69\x6F\x90\x79\x71\x91\x11\xDD\xDE\x9B\x94\xCD\x9D\xD3\xC5\x1A\x18\x01\xFA\xDB\xBE\x47\xB8\xD2\x26\xDB\x9A\x52\xD5\xB7\xB3\xCC\xDA\x32\xDB\xDC\x3B\xCB\xE0\x96\xDB\xD3\x20\x5D\x91\xBF\xC6\xC3\x95\xDE\xAB\x00\x0C\xDC\x8D\xBE\xD8\xDA\x7B\xB7\xCA\xBA\x11\x19\x09\xE0\xCC\xBC\xB6\x7F\xDD\x2F\x7D\xDD\xA2\x96\x8F\xC8\x02\xED\x2F\xB1\x1D\xD0\x14\xEC\xE1\x1C\x43\xA4\xD4\x1D\xE2\x2A\xAB\xE1\xF1\xBA\xE3\x6D\xB0\xE2\x80\xB2\xE2\x5A\xBE\xC8\x75\xBF\x60\x1A\x08\xE2\x02\x13\xC2\x55\x2E\x94\x59\x2D\x2F\x63\xC7\x9E\x45\x25\xDF\x7A\xB2\xC3\xA1\x45\xC3\x52\xE7\xE5\x3C\xC5\xE0\x08\x1B\x01\x48\xE0\xB8\x50\xB8\x9D\x62\xC5\xAE\x64\xC5\x24\xA9\xDA\x12\x95\xC4\xCB\x0C\x1F\xBB\x40\xE3\xDE\x4E\x20\xE6\x4A\xC2\xE6\x50\xE0\x15\xBF\xB9\xC5\x79\xBF\xE4\x5F\x75\x24\xDD\xD2\x10\x9F\x68\x65\x84\x72\xDE\xB4\xD3\xDD\xDA\xD2\xDB\xA8\xD7\xD0\x12\xEC\x10\x55\x2B\xE6\xC4\xD4\x10\x51\xBF\xE6\xE2\xA8\x9D\xBF\xB0\xBB\x75\xE0\xE7\x77\xEB\xC9\x91\xE7\x2D\xD8\x91\xCA\xEC\xC3\xE0\x1B\xD7\xE5\x32\xC4\x1D\x1D\x08\xE5\x31\xC7\xC6\xAE\xD0\xEA\xE1\x15\xB7\xD4\x1F\x01\xA4\xE1\xBF\x32\xC1\xC7\xA9\xE9\xE5\xA4\x14\x1D\xFC\x3D\xEA\xEB\xB8\xD9\x1A\x14\xD8\x85\xEB\xDF\x37\xDC\x10\x7A\xD0\xC0\x50\xDA\xAB\x1E\xE2\xC3\x2A\xDD\xE5\x90\xDA\xEB\x24\xDC\xEB\x94\xDE\xE0\x5B\x8E\xD3\xB5\xE2\xEC\x22\xD4\xEC\x39\xDB\x32\xC8\xEE\xE1\x02\xD3\x16\x82\xD6\xEB\xC9\xD2\xC9\xB9\xE9\xD7\xC5\xE4\xDF\x8F\xB1\xED\xB0\x6D\xE9\x1A\x13\x89\xB2\xE3\xEB\xF7\xD0\x3F\xCC\xED\xB2\x60\xCF\x2B\x61\xED\xE8\xEC\xA1\xE0\xD3\xEA\x12\xD4\x14\xE3\xE3\xEA\x30\xAB\xE4\xD0\x5D\xEC\xD8\xCC\xB2\xE4\xA3\x62\xD1\xCB\xE6\xC3\x84\xE8\x10\xF2\xE1\xE2\x1F\xD4\xBF\x50\x13\xEC\xDA\xEF\xEC\x0D\xE1\xD5\xC9\xE5\xEE\x08\x16\xED\x06\x3F\xEF\x04\x11\xF0\x41\xE3\xF0\x9A\xCB\xD4\xCF\xC1\xD9\x71\x80\xDF\xBD\xE6\x6C\x3D\xD5\xE4\xFD\xE1\xBF\x10\xF3\x10\x12\xFA\xB7\xFA\xE2\x50\x06\xF5\xBA\xDB\xE4\xD6\x03\x1D\xE1\xDF\xE7\xB9\x1A\x19\xB9\x79\xB1\xF2\x02\x13\xF2\x07\xC4\xF1\xC7\xC7\xF2\x03\x1B\xEB\xDC\xEA\xA1\x83\x67\xD6\x8B\xCA",
"\xD6\x7D\xC6\xE8\x13\xE9\xEF\x36\xFF\xD8\xCD\xE7\xF0\x63\xDA\xF1\x04\x1E\xE3\x2B\xE2\xC3\xD5\xE1\xF4\x1B\xF2\xF2\x48\xD8\x7D\x76\xD8\xF3\x64\x29\xF2\x4A\xFB\xF2\xDE\xE5\x21\xA6\xEA\x11\xE6\x33\xEF\xE4\xEF\x13\x54\xD1\xBF\xCA\xD2\x30\x4D\xD2\xD9\x2A\xFA\x1A\x66\xDF\xBF\xF8\xC0\xEE\x0C\x1E\x56\x60\xF1\xEA\x3F\x10\xF4\xEB\xD8\xED\x4C\xD8\xF1\xCA\xA9\xE3\x11\xBB\xE2\x71\xFD\xF7\xA0\xE0",
};

			void XmlGetParserBuffer(vl::stream::MemoryStream& stream)
			{
				vl::stream::MemoryStream compressedStream;
				for (vint i = 0; i < parserBufferRows; i++)
				{
					vint size = i == parserBufferRows - 1 ? parserBufferRemain : parserBufferBlock;
					compressedStream.Write((void*)parserBuffer[i], size);
				}
				compressedStream.SeekFromBegin(0);
				vl::stream::LzwDecoder decoder;
				vl::stream::DecoderStream decoderStream(compressedStream, decoder);
				vl::collections::Array<vl::vuint8_t> buffer(65536);
				while (true)
				{
					vl::vint size = decoderStream.Read(&buffer[0], 65536);
					if (size == 0) break;
					stream.Write(&buffer[0], size);
				}
				stream.SeekFromBegin(0);
			}
/***********************************************************************
Unescaping Function Foward Declarations
***********************************************************************/

			extern void XmlMergeTextFragment(vl::collections::List<vl::Ptr<XmlNode>>& value, const vl::collections::List<vl::regex::RegexToken>& tokens);
			extern void XmlUnescapeAttributeValue(vl::parsing::ParsingToken& value, const vl::collections::List<vl::regex::RegexToken>& tokens);
			extern void XmlUnescapeCData(vl::parsing::ParsingToken& value, const vl::collections::List<vl::regex::RegexToken>& tokens);
			extern void XmlUnescapeComment(vl::parsing::ParsingToken& value, const vl::collections::List<vl::regex::RegexToken>& tokens);

/***********************************************************************
Parsing Tree Conversion Driver Implementation
***********************************************************************/

			class XmlTreeConverter : public vl::parsing::ParsingTreeConverter
			{
			public:
				using vl::parsing::ParsingTreeConverter::SetMember;

				void Fill(vl::Ptr<XmlNode> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
				}

				void Fill(vl::Ptr<XmlText> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->content, obj->GetMember(L"content"), tokens);
				}

				void Fill(vl::Ptr<XmlCData> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					if(SetMember(tree->content, obj->GetMember(L"content"), tokens))
					{
						XmlUnescapeCData(tree->content, tokens);
					}
				}

				void Fill(vl::Ptr<XmlAttribute> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->name, obj->GetMember(L"name"), tokens);
					if(SetMember(tree->value, obj->GetMember(L"value"), tokens))
					{
						XmlUnescapeAttributeValue(tree->value, tokens);
					}
				}

				void Fill(vl::Ptr<XmlComment> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					if(SetMember(tree->content, obj->GetMember(L"content"), tokens))
					{
						XmlUnescapeComment(tree->content, tokens);
					}
				}

				void Fill(vl::Ptr<XmlElement> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->name, obj->GetMember(L"name"), tokens);
					SetMember(tree->closingName, obj->GetMember(L"closingName"), tokens);
					SetMember(tree->attributes, obj->GetMember(L"attributes"), tokens);
					if(SetMember(tree->subNodes, obj->GetMember(L"subNodes"), tokens))
					{
						XmlMergeTextFragment(tree->subNodes, tokens);
					}
				}

				void Fill(vl::Ptr<XmlInstruction> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->name, obj->GetMember(L"name"), tokens);
					SetMember(tree->attributes, obj->GetMember(L"attributes"), tokens);
				}

				void Fill(vl::Ptr<XmlDocument> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->prologs, obj->GetMember(L"prologs"), tokens);
					SetMember(tree->rootElement, obj->GetMember(L"rootElement"), tokens);
				}

				vl::Ptr<vl::parsing::ParsingTreeCustomBase> ConvertClass(vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)override
				{
					if(obj->GetType()==L"Text")
					{
						vl::Ptr<XmlText> tree = new XmlText;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<XmlNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"CData")
					{
						vl::Ptr<XmlCData> tree = new XmlCData;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<XmlNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Attribute")
					{
						vl::Ptr<XmlAttribute> tree = new XmlAttribute;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<XmlNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Comment")
					{
						vl::Ptr<XmlComment> tree = new XmlComment;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<XmlNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Element")
					{
						vl::Ptr<XmlElement> tree = new XmlElement;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<XmlNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Instruction")
					{
						vl::Ptr<XmlInstruction> tree = new XmlInstruction;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<XmlNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Document")
					{
						vl::Ptr<XmlDocument> tree = new XmlDocument;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<XmlNode>(), obj, tokens);
						return tree;
					}
					else 
						return 0;
				}
			};

			vl::Ptr<vl::parsing::ParsingTreeCustomBase> XmlConvertParsingTreeNode(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				XmlTreeConverter converter;
				vl::Ptr<vl::parsing::ParsingTreeCustomBase> tree;
				converter.SetMember(tree, node, tokens);
				return tree;
			}

/***********************************************************************
Parsing Tree Conversion Implementation
***********************************************************************/

			vl::Ptr<XmlText> XmlText::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return XmlConvertParsingTreeNode(node, tokens).Cast<XmlText>();
			}

			vl::Ptr<XmlCData> XmlCData::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return XmlConvertParsingTreeNode(node, tokens).Cast<XmlCData>();
			}

			vl::Ptr<XmlAttribute> XmlAttribute::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return XmlConvertParsingTreeNode(node, tokens).Cast<XmlAttribute>();
			}

			vl::Ptr<XmlComment> XmlComment::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return XmlConvertParsingTreeNode(node, tokens).Cast<XmlComment>();
			}

			vl::Ptr<XmlElement> XmlElement::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return XmlConvertParsingTreeNode(node, tokens).Cast<XmlElement>();
			}

			vl::Ptr<XmlInstruction> XmlInstruction::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return XmlConvertParsingTreeNode(node, tokens).Cast<XmlInstruction>();
			}

			vl::Ptr<XmlDocument> XmlDocument::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return XmlConvertParsingTreeNode(node, tokens).Cast<XmlDocument>();
			}

/***********************************************************************
Visitor Pattern Implementation
***********************************************************************/

			void XmlText::Accept(XmlNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void XmlCData::Accept(XmlNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void XmlAttribute::Accept(XmlNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void XmlComment::Accept(XmlNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void XmlElement::Accept(XmlNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void XmlInstruction::Accept(XmlNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void XmlDocument::Accept(XmlNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

/***********************************************************************
Parser Function
***********************************************************************/

			vl::Ptr<vl::parsing::ParsingTreeNode> XmlParseDocumentAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"XDocument");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				return node;
			}

			vl::Ptr<vl::parsing::ParsingTreeNode> XmlParseDocumentAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return XmlParseDocumentAsParsingTreeNode(input, table, errors, codeIndex);
			}

			vl::Ptr<XmlDocument> XmlParseDocument(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"XDocument");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				if(node && errors.Count()==0)
				{
					return XmlConvertParsingTreeNode(node, state.GetTokens()).Cast<XmlDocument>();
				}
				return 0;
			}

			vl::Ptr<XmlDocument> XmlParseDocument(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return XmlParseDocument(input, table, errors, codeIndex);
			}

			vl::Ptr<vl::parsing::ParsingTreeNode> XmlParseElementAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"XElement");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				return node;
			}

			vl::Ptr<vl::parsing::ParsingTreeNode> XmlParseElementAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return XmlParseElementAsParsingTreeNode(input, table, errors, codeIndex);
			}

			vl::Ptr<XmlElement> XmlParseElement(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"XElement");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				if(node && errors.Count()==0)
				{
					return XmlConvertParsingTreeNode(node, state.GetTokens()).Cast<XmlElement>();
				}
				return 0;
			}

			vl::Ptr<XmlElement> XmlParseElement(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return XmlParseElement(input, table, errors, codeIndex);
			}

/***********************************************************************
Table Generation
***********************************************************************/

			vl::Ptr<vl::parsing::tabling::ParsingTable> XmlLoadTable()
			{
				vl::stream::MemoryStream stream;
				XmlGetParserBuffer(stream);
				vl::Ptr<vl::parsing::tabling::ParsingTable> table=new vl::parsing::tabling::ParsingTable(stream);
				table->Initialize();
				return table;
			}

		}
	}
}
namespace vl
{
	namespace reflection
	{
		namespace description
		{
#ifndef VCZH_DEBUG_NO_REFLECTION
			using namespace vl::parsing::xml;

			IMPL_TYPE_INFO_RENAME(vl::parsing::xml::XmlNode, system::XmlNode)
			IMPL_TYPE_INFO_RENAME(vl::parsing::xml::XmlText, system::XmlText)
			IMPL_TYPE_INFO_RENAME(vl::parsing::xml::XmlCData, system::XmlCData)
			IMPL_TYPE_INFO_RENAME(vl::parsing::xml::XmlAttribute, system::XmlAttribute)
			IMPL_TYPE_INFO_RENAME(vl::parsing::xml::XmlComment, system::XmlComment)
			IMPL_TYPE_INFO_RENAME(vl::parsing::xml::XmlElement, system::XmlElement)
			IMPL_TYPE_INFO_RENAME(vl::parsing::xml::XmlInstruction, system::XmlInstruction)
			IMPL_TYPE_INFO_RENAME(vl::parsing::xml::XmlDocument, system::XmlDocument)
			IMPL_TYPE_INFO_RENAME(vl::parsing::xml::XmlNode::IVisitor, system::XmlNode::IVisitor)

			BEGIN_CLASS_MEMBER(XmlNode)
				CLASS_MEMBER_METHOD(Accept, {L"visitor"})

			END_CLASS_MEMBER(XmlNode)

			BEGIN_CLASS_MEMBER(XmlText)
				CLASS_MEMBER_BASE(XmlNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<XmlText>(), NO_PARAMETER)

				CLASS_MEMBER_EXTERNALMETHOD(get_content, NO_PARAMETER, vl::WString(XmlText::*)(), [](XmlText* node){ return node->content.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_content, {L"value"}, void(XmlText::*)(const vl::WString&), [](XmlText* node, const vl::WString& value){ node->content.value = value; })

				CLASS_MEMBER_PROPERTY(content, get_content, set_content)
			END_CLASS_MEMBER(XmlText)

			BEGIN_CLASS_MEMBER(XmlCData)
				CLASS_MEMBER_BASE(XmlNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<XmlCData>(), NO_PARAMETER)

				CLASS_MEMBER_EXTERNALMETHOD(get_content, NO_PARAMETER, vl::WString(XmlCData::*)(), [](XmlCData* node){ return node->content.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_content, {L"value"}, void(XmlCData::*)(const vl::WString&), [](XmlCData* node, const vl::WString& value){ node->content.value = value; })

				CLASS_MEMBER_PROPERTY(content, get_content, set_content)
			END_CLASS_MEMBER(XmlCData)

			BEGIN_CLASS_MEMBER(XmlAttribute)
				CLASS_MEMBER_BASE(XmlNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<XmlAttribute>(), NO_PARAMETER)

				CLASS_MEMBER_EXTERNALMETHOD(get_name, NO_PARAMETER, vl::WString(XmlAttribute::*)(), [](XmlAttribute* node){ return node->name.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_name, {L"value"}, void(XmlAttribute::*)(const vl::WString&), [](XmlAttribute* node, const vl::WString& value){ node->name.value = value; })
				CLASS_MEMBER_EXTERNALMETHOD(get_value, NO_PARAMETER, vl::WString(XmlAttribute::*)(), [](XmlAttribute* node){ return node->value.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_value, {L"value"}, void(XmlAttribute::*)(const vl::WString&), [](XmlAttribute* node, const vl::WString& value){ node->value.value = value; })

				CLASS_MEMBER_PROPERTY(name, get_name, set_name)
				CLASS_MEMBER_PROPERTY(value, get_value, set_value)
			END_CLASS_MEMBER(XmlAttribute)

			BEGIN_CLASS_MEMBER(XmlComment)
				CLASS_MEMBER_BASE(XmlNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<XmlComment>(), NO_PARAMETER)

				CLASS_MEMBER_EXTERNALMETHOD(get_content, NO_PARAMETER, vl::WString(XmlComment::*)(), [](XmlComment* node){ return node->content.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_content, {L"value"}, void(XmlComment::*)(const vl::WString&), [](XmlComment* node, const vl::WString& value){ node->content.value = value; })

				CLASS_MEMBER_PROPERTY(content, get_content, set_content)
			END_CLASS_MEMBER(XmlComment)

			BEGIN_CLASS_MEMBER(XmlElement)
				CLASS_MEMBER_BASE(XmlNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<XmlElement>(), NO_PARAMETER)

				CLASS_MEMBER_EXTERNALMETHOD(get_name, NO_PARAMETER, vl::WString(XmlElement::*)(), [](XmlElement* node){ return node->name.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_name, {L"value"}, void(XmlElement::*)(const vl::WString&), [](XmlElement* node, const vl::WString& value){ node->name.value = value; })
				CLASS_MEMBER_EXTERNALMETHOD(get_closingName, NO_PARAMETER, vl::WString(XmlElement::*)(), [](XmlElement* node){ return node->closingName.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_closingName, {L"value"}, void(XmlElement::*)(const vl::WString&), [](XmlElement* node, const vl::WString& value){ node->closingName.value = value; })

				CLASS_MEMBER_PROPERTY(name, get_name, set_name)
				CLASS_MEMBER_PROPERTY(closingName, get_closingName, set_closingName)
				CLASS_MEMBER_FIELD(attributes)
				CLASS_MEMBER_FIELD(subNodes)
			END_CLASS_MEMBER(XmlElement)

			BEGIN_CLASS_MEMBER(XmlInstruction)
				CLASS_MEMBER_BASE(XmlNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<XmlInstruction>(), NO_PARAMETER)

				CLASS_MEMBER_EXTERNALMETHOD(get_name, NO_PARAMETER, vl::WString(XmlInstruction::*)(), [](XmlInstruction* node){ return node->name.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_name, {L"value"}, void(XmlInstruction::*)(const vl::WString&), [](XmlInstruction* node, const vl::WString& value){ node->name.value = value; })

				CLASS_MEMBER_PROPERTY(name, get_name, set_name)
				CLASS_MEMBER_FIELD(attributes)
			END_CLASS_MEMBER(XmlInstruction)

			BEGIN_CLASS_MEMBER(XmlDocument)
				CLASS_MEMBER_BASE(XmlNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<XmlDocument>(), NO_PARAMETER)


				CLASS_MEMBER_FIELD(prologs)
				CLASS_MEMBER_FIELD(rootElement)
			END_CLASS_MEMBER(XmlDocument)

			BEGIN_INTERFACE_MEMBER(XmlNode::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(XmlNode::IVisitor::*)(XmlText* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(XmlNode::IVisitor::*)(XmlCData* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(XmlNode::IVisitor::*)(XmlAttribute* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(XmlNode::IVisitor::*)(XmlComment* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(XmlNode::IVisitor::*)(XmlElement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(XmlNode::IVisitor::*)(XmlInstruction* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(XmlNode::IVisitor::*)(XmlDocument* node))
			END_INTERFACE_MEMBER(XmlNode)

			class XmlTypeLoader : public vl::Object, public ITypeLoader
			{
			public:
				void Load(ITypeManager* manager)
				{
					ADD_TYPE_INFO(vl::parsing::xml::XmlNode)
					ADD_TYPE_INFO(vl::parsing::xml::XmlText)
					ADD_TYPE_INFO(vl::parsing::xml::XmlCData)
					ADD_TYPE_INFO(vl::parsing::xml::XmlAttribute)
					ADD_TYPE_INFO(vl::parsing::xml::XmlComment)
					ADD_TYPE_INFO(vl::parsing::xml::XmlElement)
					ADD_TYPE_INFO(vl::parsing::xml::XmlInstruction)
					ADD_TYPE_INFO(vl::parsing::xml::XmlDocument)
					ADD_TYPE_INFO(vl::parsing::xml::XmlNode::IVisitor)
				}

				void Unload(ITypeManager* manager)
				{
				}
			};
#endif

			bool XmlLoadTypes()
			{
#ifndef VCZH_DEBUG_NO_REFLECTION
				ITypeManager* manager=GetGlobalTypeManager();
				if(manager)
				{
					Ptr<ITypeLoader> loader=new XmlTypeLoader;
					return manager->AddTypeLoader(loader);
				}
#endif
				return false;
			}
		}
	}
}
