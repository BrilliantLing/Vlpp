#include "ParsingXml_Parser.h"

namespace vl
{
	namespace parsing
	{
		namespace xml
		{
/***********************************************************************
ParserText
***********************************************************************/

const wchar_t parserTextBuffer[] = 
L"\r\n" L""
L"\r\n" L"class Node"
L"\r\n" L"{"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Text : Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken content;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class CData : Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken content (XmlUnescapeCData);"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Attribute : Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken name\t\t\t\t\t\t\t\t\t@Color(\"AttName\");"
L"\r\n" L"\ttoken value (XmlUnescapeAttributeValue)\t\t@Color(\"AttValue\");"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Comment : Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken content (XmlUnescapeComment);"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Element : Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken name\t\t\t\t\t\t\t\t\t@Color(\"TagName\");"
L"\r\n" L"\ttoken closingName\t\t\t\t\t\t\t@Color(\"TagName\");"
L"\r\n" L"\tAttribute[] attributes;"
L"\r\n" L"\tNode[] subNodes (XmlMergeTextFragment);"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Instruction : Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken name\t\t\t\t\t\t\t\t\t@Color(\"TagName\");"
L"\r\n" L"\tAttribute[] attributes;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Document : Node"
L"\r\n" L"{"
L"\r\n" L"\tNode[] prologs;"
L"\r\n" L"\tElement rootElement;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"token INSTRUCTION_OPEN = \"/</?\"\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token INSTRUCTION_CLOSE = \"/?/>\"\t\t@Color(\"Boundary\");"
L"\r\n" L"token COMPLEX_ELEMENT_OPEN = \"/<//\"\t\t@Color(\"Boundary\");"
L"\r\n" L"token SINGLE_ELEMENT_CLOSE = \"///>\"\t\t@Color(\"Boundary\");"
L"\r\n" L"token ELEMENT_OPEN = \"/<\"\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token ELEMENT_CLOSE = \"/>\"\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token EQUAL = \"/=\";"
L"\r\n" L""
L"\r\n" L"token NAME = \"[a-zA-Z0-9:._/-]+\"\t\t\t\t\t\t\t\t@ContextColor();"
L"\r\n" L"token ATTVALUE = \"\"\"[^<>\"\"]*\"\"|\'[^<>\']*\'\"\t\t\t\t\t\t@ContextColor();"
L"\r\n" L"token COMMENT = \"/</!--([^/->]|-[^/->]|--[^>])*--/>\"\t\t\t@Color(\"Comment\");"
L"\r\n" L"token CDATA = \"/</!/[CDATA/[([^/]]|/][^/]]|/]/][^>])*/]/]/>\";"
L"\r\n" L"token TEXT = \"([^<>=\"\"\' /r/n/ta-zA-Z0-9:._/-])+|\"\"|\'\";"
L"\r\n" L""
L"\r\n" L"discardtoken SPACE = \"/s+\";"
L"\r\n" L""
L"\r\n" L"rule Attribute XAttribute = NAME:name \"=\" ATTVALUE:value as Attribute;"
L"\r\n" L"rule Text XText = (NAME:content | EQUAL:content | ATTVALUE:content | TEXT:content) as Text;"
L"\r\n" L"rule CData XCData = CDATA:content as CData;"
L"\r\n" L"rule Comment XComment = COMMENT:content as Comment;"
L"\r\n" L"rule Element XElement = \"<\" NAME:name {XAttribute:attributes} (\"/>\" | \">\" {XSubNode:subNodes} \"</\" NAME:closingName \">\") as Element;"
L"\r\n" L"rule Node XSubNode = !XText | !XCData | !XComment | !XElement;"
L"\r\n" L"rule Instruction XInstruction = \"<?\" NAME:name {XAttribute:attributes} \"?>\" as Instruction;"
L"\r\n" L"rule Document XDocument = {XInstruction:prologs | XComment:prologs} XElement:rootElement as Document;"
;

			vl::WString XmlGetParserTextBuffer()
			{
				return parserTextBuffer;
			}

/***********************************************************************
SerializedTable
***********************************************************************/

const vint parserBufferLength = 5219; // 23281 bytes before compressing
const vint parserBufferBlock = 1024;
const vint parserBufferRemain = 99;
const vint parserBufferRows = 6;
const char* parserBuffer[] = {
"\x00\x0E\x00\x02\x83\x80\x07\x7D\x00\x82\x03\xFF\x45\x08\x82\x83\x20\x01\x37\x00\x6C\x0F\x80\x02\x38\x03\x82\x86\x07\x0C\x80\x14\x20\x01\x30\x01\x33\x00\x4E\x1D\x80\x0D\x30\x01\x33\x82\x17\x88\x8A\x9A\x8E\x80\x8A\x88\x88\x15\xA9\x84\x99\x8C\x81\x20\x00\x3A\x37\xA1\xA3\x85\x97\x96\x82\x8D\x95\x0C\xAD\x91\x93\x81\x9A\x8C\x04\x8D\x36\xB8\xB8\x96\x23\x92\x89\x3A\x93\x28\xBF\x8B\x81\xA3\x8F\x94\x8A\x8B\x1A\xB4\x88\x9C\x8E\x88\x92\x90\x8F\x3C\xD1\x8C\x80\xA8\x82\xA2\xAB\xA2\x18\x9A\x9C\xBF\x8A\x98\xB0\xA8\x9F\x63\xD3\xA5\xB5\xA4\xA0\xAC\x87\xA3\x0C\xC2\x13\x8F\xAE\x30\x00\x33\x91\x15\xF9\x22\xAA\x92\xBC\x82\xB3\xBA\x32\x83\xB8\xA8\x8A\xB8\x88\xBE\xBF\x80\x80\x02\xD0\xB4\xC4\x94\xBA\x98\x76\x88\x8B\xC4\x8D\xC0\x03\xC7\xBF\x1E\x81\xC3\xC4\x84\xB6\xC3\xCB\xAB\x89\x82\x9B\xC3\x8D\xCF\xCD\xC9\xC9\xA9\x85\x85\xC3\x87\xC0\xCD\xD9\xD5\x02\xAD\xC0\x1D\xB0\xD7\xA8\xD8\xA9\x96\xAE\x88\xC6\xAA\x8A\xDC\xDF\xD7\xA3\x89\x8C\x01\xEB\xD9\x9F\x92\x3C\x39\xB5\xD7\xBA\x89\xE2\x83\x7F\xE5\x54\x90\xBD\xB8\x9F\xE1\xEB\xD3\x8A\xD4\x94\xE4\xD3\xDD\x87\xED\xCD\x99\xCC\xA5\xA1\xBB\xE0\x00\xDC\x01\x04\x48\xB9\xB8\x95\x89\x30\x02\x30\xCF\xCE\x85\xBF\x7B\xFC\xFD\xD0\xDA\x00\x44\x23\x48\x4E\x47\xFD\x7D\x7A\x56\x69\x10\x6A\x70\x54\x7B\x05\xBC\x7E\x79\x80\x10\x63\x18\x7F\x7A\x39\x4D\x8B\x7F\x81\x03\x45\x13\x53\x49\x14\xB8\x46\x87\x3F\x0B\x1A\x49\x11\x73\x73\x39\x45\x47\x53\x12\xB8\x45\x7E\x76\xFA\x4D\x84\x02\x46\x22\x50\x4F\x5D\x4F\x16\xAF\x8C\x40\x47\xDD\x5E\x86\x85\x03\x1A\x70\x75\x4E\x7C\x57\x75\x77\x7F\x53\xDC\x40\x06\x8C\x42\x7D\x6E\x57\x49\x6C\x3E\x88\x49\x52\x89\x00\x02\x98\x7D\x91\xE4\x40\x06\x1D\x53\xF8\x67\x42\x02\x46\x55\x8E\x41\x82\x47\x03\x80\x08\x86\x40\x12\xAC\x85\x90\x83\x16\xA3\x90\x02\x50\x0A\xA7\x4C\x7A\x9A\x65\x8D\x77\x99\x85\x16\x8F\x83\x46\x84\x4F\x5D\x82\x9A\x46\x70\x17\x52\x70\x44\x20\x65\x8F\x86\x9D\x11\x93\x8B\x81\x4E\x21\x8C\x45\x44\x44\x10\x78\x4A\x86\x44\x1C\x87\xAA\x8D\x83\x6A\x8F\xA0\x56\x9E\x0A\x1A\x40\x98\x94\x52\x84\x90\x56\xA0\x69\x9A\x46\xA5\xA4\x6E\x88\xAA\x46\x84\x56\x65\x85\x7D\x5F\x5E\x7B\x40\x57\x91\xE8\x4C\x43\xA8\x49\x92\x86\x9A\x45\x92\xB4\xA7\x43\x01\x56\xA2\x9B\x89\xAE\x9C\xED\x5A\x45\x8B\x53\xF7\x71\x80\x67\x49\xA0\x8D\x89\xA0\x42\x23\xBD\x55\x8B\x7C\xF8\x69\x81\x97\x44\x7D\x59\xAC\x43\xA6\xD0\x9D\xA9\x7D\xB2\x05\x8B\xB4\x41\xB3\x00\x0F\xB7\x54\x8A\x39\x6B\x8D\x70\xAC\x03\x78\xA1\x58\x75\xE8\x82\x48\x8C\x00\xD0\x78\x40\x9C\xB5\xF9\x68\x9D\x80\x04\x1A\x71\x0A\x44\xBE\xD4\x7D\xBA\x4B\x87\x16\xBE\xB3\x58\xC0\x0D\x82\xCF\xBC\xC1\xFD\x46\xC4\x68\xC2\xFD\x7C\xBC\xB2\x4E\x53\x1B\x40\x02\x14\x00\x15\x1B\x9A\xC4\x23\x8F\x1A\x4F\x17\x00\x1A\xC0\x14\x00\x1A\xA2\x4D\xB8\x00\x2F\x00\x0C\x0C\xC9\x00\x3F\x0D\xBD\x95\x11\x22\x80\xC6\xC4\x14\xD6\xCE\x40\x47\x19\xDB\xC7\xC4\x13\x1D\xC0\x01\xC6\x86\x23\xE5\xCA\xC9\xC9\x3E\x27\x73\x42\x01\x1A\x54\x06\x66\xC6\x4D\x00\x0F\xC4\xCE\x1A\x98\x10\x00\xC7\x1A\x8C\xD0\x01\xD2\x21\xD2\xCC\xC6\xC7\x20\xFA\x4D\xCE\xC9\x28\xE5\xCB\x95\x5A\x0C\x46\xDC\x41\xC4\x23\xA2\x47\x10\x00\x52\xD0\xD8\xD9\xD6\x54\xFA\x4C\x44\xC7\x0E\x78\xCA\xC7\xCE\xB6\x8C\x45\xCB\xDD\x00\x01\xDB\xAF\x5D\x1A\x58\x78\x41\xD4\x6C\xD9\xD2\x4B\xDB\x39\xDF\xC5\xD7\xD7\x08\x65\xC7\xCB\xC8\x4D\x84\x4C\x8E\xAC\x6B\xDA\x8D\xDB\xE0\x4F\xF7\xC9\xCC\xDD\x88\xC4\x40\xD0\x00\x55\x96\xB8\x41\x95\x1A\x91\x15\xC4\x00\x36\x78\xC9\xE7\x40\x25\xFD\x00\x00\xD1\x03\xEE\x80\x8C\xE9\x53\xD9\xDD\xC8\x43\x5B\x23\x4D\x08\x00\x7A\x30\xE7\xEE\x16\x00\x30\x00\x03\xED\x39\x00\x0A\x0C\x00\x2E\x15\xE5\xCB\xED\x5D\x00\x0B\x0B\x9E\x0C\x5E\xBA\x61\x7C\x1C\x5C\x4C\x51\xE9\xA3\xDA\x83\x06\x46\x22\x00\x05\xEE\x17\x5C\xC1\xD9\xF5\xF2\x2A\x00\x09\xF4\x1F\x00\x27\x0A\xF4\x00\xDC\xE7\xC1\xD2\xF9\xE0\xE5\xF1\xB0\x43\x7E\xF1\xA3\x5C\xD2\xB1\xD5\xDC\x45\xF6\x76\xDC\xD5\xC9\x08\xBF\xFD\xF8\x0B\xF9\xDC\x67\x79\xDE\x00\x09\x78\xF2\x77\x73\x7B\x28\x77\x75\xD0\x05\x8D\x7F\x03\xA8\x7B\x80\xC9\x69\x04\x00\x61\x77\x77\xDB\x5B\x75\x71\x03\x2F\x73\xE7\x16\x31\x40\x9B\x1C\x26\x26\x2C\x1A\x22\xE2\x28\x6C\x7F\x92\x75\x76\x4B\xB0\x7F\x80\xCA\x35\x7F\x7E\x04\xA5\x61\x79\x0C\x8F\x84\x00\xA8\x60\x86\x00\x24\x7A\x86\x32\x88\x83\x02\x80\x02\x83\xF0\x78\x84\x80\x28\x61\x6A\xE7\x0B\x6E\x75",
"\x1B\x59\x6E\x69\x1C\x24\x06\x46\x2D\x8F\x80\xF5\x40\x02\x75\xD9\x66\x7C\x08\x28\x65\x23\x92\x7D\x2D\x64\x61\x57\x75\xEE\x36\x2B\x77\xDE\x7D\x79\x78\xC3\x65\x78\xC7\x02\x81\x82\xE5\x76\x82\x7C\x67\x86\x7E\xF3\x56\x36\x43\xD8\x15\x49\x62\x1F\x76\x26\x43\x1A\x4B\x6F\xC4\x61\x5E\x8C\xF1\x69\x22\x85\x7A\x50\x7E\x8D\x0E\x68\x5C\xE2\x47\x44\x00\x52\x56\x5D\xBE\x16\x06\x8F\x00\x00\x90\x94\x64\x5A\x44\x7A\x45\x7C\x62\x8C\x59\x25\xC4\x61\x45\x22\x9C\x33\x70\x21\x40\x00\x03\x14\xCA\x87\x65\x3F\xA4\x43\x91\x83\x85\x5C\xBD\x41\x69\x8E\x81\x1E\x96\x59\xA0\x84\x90\xBD\x12\x08\x90\x45\x90\x5C\x91\xD3\x4C\x45\xF1\x13\x91\x32\x9C\x0E\x64\x20\x99\x93\x89\x27\x89\x9F\x93\x57\xA1\x95\x91\x2C\x44\x95\x2B\xBD\x93\x5D\x5F\xB1\x95\x39\x01\x2C\x23\x29\xF7\x8E\x96\x55\xB2\x90\x00\xFA\x42\x74\x43\x3B\x9E\x95\x62\x8E\x9D\x39\x41\x63\x7B\x14\xD9\x77\x64\x95\x59\x79\x97\x3A\x36\x25\xDB\x53\x8A\x9B\xE6\x0A\x4A\x93\x00\x1B\x0C\x3A\xCE\x6F\x49\x6C\x76\x3B\x4A\x50\x24\x9C\x3A\xD8\x51\x49\x77\x9E\x50\x59\xE8\x9D\x0C\x3A\xD9\x7A\x64\xEF\x73\x9F\x8E\x53\x95\x9A\x20\xD7\x9D\x2F\x52\x80\x03\x99\x81\x91\x5A\x28\xAC\x49\x98\x84\x08\xA1\x95\x0B\xAD\x39\xF1\x32\x00\x00\x52\x1A\x24\x9A\xC4\x83\xA1\x44\xFD\x29\x9B\x7D\x9C\x6E\x9B\xE8\x82\x26\x38\xD9\x62\x9F\x29\xAA\x58\x2A\xE0\x8A\x9F\x14\xEC\x90\x48\xFA\x36\x99\x3F\x25\xA2\x40\xA7\x2F\xA5\x49\x12\x53\x8A\x9F\xDB\x89\x67\x00\xD9\x73\x8A\x8F\x36\xA4\x97\xA8\x8D\x9B\x46\x80\x0C\x47\x4C\x58\xA1\xA8\xD6\x83\xA9\x47\xB9\xAD\x9A\x34\x93\x8A\xA4\xF5\x68\x9D\x39\xA7\xA7\x25\x29\x99\x92\xA5\x07\xB0\x76\x52\x75\x93\x48\x98\x82\x7F\x9F\x5B\xAE\xA5\x57\xB5\xA9\x9E\x8F\xBD\x9E\xA9\x23\x3F\xA6\x40\x8A\xA0\x99\xE6\x06\xA7\xA1\x42\xAD\xAD\x5F\x0D\xA4\x20\xB8\x89\xAA\xAE\xC4\x60\x03\x0C\x00\x02\x9A\x84\x07\xAC\x99\x77\xA7\x98\x47\xDF\xAC\xA8\x9D\xBC\xA1\x9C\x51\xB1\xA4\x55\xE8\x98\xAA\x96\xA1\xAB\x5A\x63\xB1\x9C\x61\xB2\xAE\x9D\xC8\xB8\x9F\xA6\x66\xBB\xA7\x3F\xEA\xA9\xA2\xB6\x82\xB0\x00\x99\x83\x8B\x40\x0E\xB3\xA6\xCB\x80\x07\xAD\x5A\xA5\xB4\x3C\xA7\x25\x78\x7D\x67\x63\x9A\x59\xAD\x9C\x57\xAB\xB3\x81\x72\x90\xAB\x9C\x93\xAB\xB0\x38\xD9\x70\x8A\x74\x9E\x82\x62\xD3\x6B\x6E\xC5\x1A\x41\xA7\x2B\x5E\x26\x29\x92\xBE\xA6\x6F\xAD\xA0\xB2\xDA\xA8\xB3\xAD\xB0\x85\x90\x00\x62\x6E\xA0\xA0\x80\xB2\xA3\x78\xAF\x93\x44\x0D\x59\x6B\xE3\x17\x94\x20\x9C\x99\xA8\x74\xC6\x92\xBB\xA0\x56\xAF\x3D\x88\x90\x41\x28\xF9\x45\x57\x35\x99\xAA\xBD\x78\x5F\x54\x7B\x13\xA0\x00\x30\x17\xA7\xBD\x77\x46\x51\xA9\x38\x2B\xA8\xD0\xA9\x9B\x9D\xD6\xA9\xA1\x74\xF4\x51\xA7\x3E\x4B\x53\x28\x80\x40\xA3\x19\xAB\xA7\x63\x04\x72\xB9\x27\x05\xDE\x4C\x82\xEC\x2F\xA6\x9C\x99\xAB\x56\x7A\x51\xA7\x81\xDC\xB8\xC3\x5A\x7D\xA2\xC1\xF0\xBA\xBC\xB0\x22\xB6\x95\xD4\x95\xB6\xB9\x88\x92\xB6\x58\xB4\xB4\xBF\xD7\xBE\xA9\xB6\xCC\xBA\x59\x91\x7D\xB7\xB6\x92\xB9\xB6\x55\x55\xA8\x8D\x6F\xE0\x9F\xB6\xE9\x70\x70\x67\xC3\xB2\xA8\x3A\xC6\xB3\x29\xA7\x39\xC2\xB9\x53\x8A\xC5\x73\xF7\x9F\x7D\xEA\x9D\xC3\xBF\x00\x04\xC7\x85\xBE\x5A\x4F\xD6\x80\x06\x10\xF7\xAE\x6B\x93\xC0\x5D\xBE\x6E\xA8\x88\x9C\x35\xC4\xBB\x8D\xE7\x93\x8B\xC6\xA6\xC3\xB6\x4C\xD1\xA4\x3D\xAB\xCC\xC9\x0A\xE8\x9F\x7F\x39\xBB\x73\x61\xE4\x79\xA6\x7F\xA5\xC8\xC0\x11\x64\x5A\x4E\x32\x42\xB3\x72\x83\x5F\x9D\xC6\x53\x46\x82\x96\xCE\xCB\x92\x47\xB1\xCC\x42\xD3\x88\xAA\x13\x2A\x55\xE6\x2D\x54\xCC\x68\x96\xCC\x0F\x9B\xB8\x9D\x2D\xEC\x3E\x3D\x4E\x6C\x4F\x83\xB8\x22\xCB\x4C\xD3\x25\x4D\xC0\x56\xCA\x04\xB0\xBE\xD2\x07\xFA\x4D\xBF\x0E\x34\x7F\xE4\x12\x61\xA7\x38\x6C\x38\xCA\x1F\xDF\xA6\xA6\xFA\x41\xB5\x14\xF1\xC4\xA6\x50\x28\xB6\x92\xB2\xC0\x2B\xE2\x7B\xAE\xC5\x04\x3B\x97\xAE\xB8\xD7\x24\x1A\xF0\x70\xB7\x53\xB8\xC6\x47\xBD\xB9\xC8\x89\x7E\xC4\x7A\x41\xC5\xB8\x96\x46\xC4\xD3\x66\xCF\xB4\xD7\x27\x39\x90\xA6\xD9\x60\x53\x4D\xD1\xC8\x91\x96\xD9\x24\x7D\x8E\x09\x35\x5D\xA1\xDC\xBF\x93\xBE\xCB\xA1\xC7\xD6\xC7\x64\xE7\x99\xA5\x00\xC3\xDA\x69\xEA\xC7\xD6\xD3\xAE\xCB\x8A\x70\xC8\x8E\x9C\xE8\x94\xCF\x48\xE8\xAE\xCC\x79\xC0\xD3\x44\x02\xD1\xA7\x3F\xC5\x5B\xE0\x9F\x45\xAD\x61\x86\xD1\xA4\x76\xE2\xCD\x9C\x8B\xD0\x21\xA3\xAC\x5D\x2D\x5F\x75\xC8\xAD\x12\x91\xD5\xA5\xD4\xC5\x57\xA2\x9C\x6A\xCB\x1C\xF0\xC9\x97\xDC\x6B\xDD\x91\x8F\xE0\x9D\x8B\xA7\xBE\x99\xF2\xD4\xB6\x7A",
"\xD7\xDC\xD8\x83\xCF\xCE\x47\xFB\xD3\x8B\x7E\xD9\x7A\xD2\x00\xF8\x3F\xC1\xFC\xC9\xC6\x3F\xFA\xE3\xCF\xC7\x51\xE7\xC2\xE8\xA8\xD1\x56\xD3\xC3\xE2\x6C\x3F\x2A\xC5\xFE\xD7\xB1\x8C\xE9\xAB\xE3\xDD\xDA\x4F\xB6\xB3\xD5\x57\x5B\xA3\xB5\xC1\xB4\x55\xCB\xC4\x5B\xB9\x26\x0D\x47\x3A\x83\xE0\xBF\xE0\xD6\xA0\xDC\x3C\xF3\xBE\xBB\xDB\x01\xFB\xE5\xD0\x9D\xDA\x67\x9F\xC1\xD5\xD7\xD0\x80\x01\x0D\x59\xCD\xEC\x3D\xEF\xED\xD8\x93\xBC\x7C\x12\xD0\x21\x5E\x7E\xE8\x9A\xEF\x17\x7F\x49\x4E\x1E\x25\xE7\xBF\xD9\xAC\xEA\xB0\xCB\xC0\x00\x00\xF7\xDC\xFF\xAC\xEC\xE5\x4C\xCC\x96\x32\xE7\xCC\xCD\xFC\x1A\xB9\x92\x8E\x4D\x3B\x5F\x0F\x0A\x23\xF0\xA4\xB7\xC4\x4C\xC6\xEE\xB6\xE0\xD1\xE5\x11\xE4\xF1\xEA\xB5\x5E\xD7\x95\xF4\xED\xF1\x91\xE7\x65\xE4\x89\xA3\xCF\xD2\xAB\xE5\xDF\x96\xD3\xB3\xCD\x4B\xDB\x5A\xC2\x80\x09\xDF\xEC\x74\xE2\xF1\x37\xFF\xDC\x9E\xEE\xE8\xE1\x9E\xE8\x9E\xE0\x40\xE2\xD3\xBD\xE8\x87\x64\x86\xCF\xAE\xE1\x89\xC1\x95\xAA\x53\x54\xE2\xA5\xE1\x2F\xE2\x4D\xF5\xD8\xB7\x97\x55\x57\xD1\xD3\xF5\xF1\x6C\xED\xF1\xF1\x36\x00\x21\x72\xD3\xC8\xF5\x22\xE9\xDC\xC9\x8D\xE6\xE5\xE8\xE9\xE7\xBF\x0C\xD0\xF2\x57\xE5\x98\xF6\x6C\xC2\xEC\xF7\x33\xFA\xB1\xE1\xD8\xF8\x9D\xAB\x83\xFE\xEE\xC5\x71\x7D\xC8\x77\x77\xF7\x75\x68\x44\x70\x7D\x46\x73\x7D\xAB\x29\x74\xCA\x6C\x7F\x53\x4E\x74\x48\x6B\x7D\xA4\x20\x2C\x1E\x76\x6E\xA5\x75\x76\xEA\x7F\x7A\xEC\x71\x7B\xEE\x63\x7B\xF1\x65\x7B\x69\x67\x7B\x20\x8A\x7B\x98\x58\x6F\xF9\x72\x69\x36\x7A\x59\xF0\x6C\x60\x69\x79\x7C\x7D\x67\x7C\xC4\x7C\x73\x05\x8A\x3F\x07\x8D\x7E\x09\x8C\x68\xD4\x7C\x80\x90\x61\x7C\xD9\x7A\x71\x53\x4D\x78\x68\x71\x83\x41\x76\x75\x25\x6D\x82\x04\x87\x79\x13\x19\x79\x5F\x7D\x79\x62\x76\x84\x01\x82\x7A\x4D\x65\x57\x12\x8E\x6D\x44\x87\x7E\xDC\x70\x65\x48\x8C\x61\x9A\x74\x54\x4C\x86\x81\xE8\x7C\x65\xFD\x78\x5E\x93\x71\x62\xEC\x50\x65\xEE\x5E\x34\x64\x8E\x6D\x56\x66\x5F\xA4\x60\x20\xF9\x55\x86\x60\x85\x4E\x66\x63\x5E\x04\x51\x7D\x06\x67\x1A\x81\x2E\x77\x0C\x68\x78\xC0\x21\x61\x07\x66\x15\x79\x85\x82\x56\x83\x81\xEC\x1A\x61\x5C\x79\x79\x5F\x85\x88\x4F\x73\x45\x69\x84\x6B\x51\x87\x75\xE0\x77\x7A\x57\x81\x6A\x72\x7B\x7A\x6D\x8D\x7A\x19\x85\x83\x1C\x88\x72\x0D\x80\x7F\x30\x6F\x72\xF3\x62\x82\xA0\x84\x5B\xCB\x7D\x7B\x41\x48\x56\x29\x88\x73\xFF\x72\x70\x32\x85\x70\x42\x8A\x7C\xBB\x76\x80\xDF\x4B\x81\xC8\x68\x4E\x11\x77\x47\x0B\x8F\x68\x4B\x7C\x83\xE8\x40\x81\x0A\x6D\x78\x55\x2B\x77\x39\x2C\x3C\xD5\x5F\x2E\x7D\x76\x65\x4E\x3D\x86\xC6\x89\x13\xC6\x66\x83\x93\x5E\x6A\xF5\x20\x61\x8A\x71\x3A\xA3\x34\x3D\x46\x76\x26\x1E\x6A\x78\x3D\x60\x00\xC1\x50\x64\xED\x66\x8B\xF4\x23\x27\x38\x1B\x7F\x12\x3D\x34\xAC\x6F\x8C\xE1\x89\x8D\x11\x8B\x8C\x38\x19\x49\xAC\x35\x5D\x28\x4B\x29\x1E\x13\x75\x6E\x82\x8F\x79\x5A\x2F\x23\x04\x77\xF1\x83\x78\xB5\x58\x4E\x28\x4F\x5B\x36\x17\x8D\xC0\x29\x78\x11\x8B\x8F\x61\x29\x49\x18\x45\x62\x8D\x85\x2B\xDF\x57\x75\x0B\x98\x85\x5B\x78\x79\xDD\x50\x19\x74\x53\x10\x9E\x7E\x86\x85\x20\x87\x18\x87\x5E\xDB\x61\x89\xDF\x77\x81\xE2\x60\x00\x37\x06\x89\x2F\x60\x72\x89\x8C\x8C\x99\x80\x7B\xB5\x86\x52\x9D\x84\x7B\xA3\x81\x82\xF4\x73\x82\x64\x52\x88\xA6\x8F\x7B\xA9\x82\x7C\x2C\x8F\x8A\x2F\x83\x45\x03\x81\x80\xCB\x72\x8B\xB4\x8F\x8D\x8A\x67\x74\x39\x8A\x8B\x61\x1B\x5B\xFA\x73\x69\x3E\x83\x85\x7A\x21\x8C\x12\x33\x8C\x60\x77\x75\xEC\x89\x57\x90\x49\x84\x13\x9F\x17\x52\x67\x91\x53\x90\x85\xEF\x82\x85\x06\x93\x12\x15\x95\x62\x5F\x9E\x11\x59\x8D\x75\x5B\x8E\x5E\x17\x93\x96\x03\x47\x5E\x8F\x72\x93\x50\x14\x5D\x52\x82\x7F\x45\x25\x96\x38\x14\x4B\xA1\x19\x13\x9C\x7C\x10\xE0\x47\x91\x72\x90\x15\x42\x46\x6B\x2F\x99\x1F\x55\x8F\x79\x68\x66\x79\x6D\x74\x49\x39\x11\x96\xFE\x5A\x4B\x9F\x8A\x5A\xA1\x7F\x88\x62\x9F\x69\xDE\x62\x79\xF0\x82\x99\x5A\x75\x95\xDC\x56\x97\x57\x18\x13\x51\x92\x10\x7B\x92\x76\x7C\x88\x81\xF4\x86\x6A\xB5\x2A\x98\xA5\x69\x75\xA9\x77\x98\xB5\x47\x5A\x1A\x10\x4E\xBB\x41\x9A\x28\x9D\x95\x57\x7A\x96\x83\x91\x78\x32\x54\x96\x11\x96\x95\x9A\x95\x49\x00\x0E\x5E\x9F\x9F\x9A\xF5\x8C\x8F\x41\x32\x9B\x91\x92\x78\x61\x28\x5A\x6A\x93\x4B\xFC\x8C\x9B\x52\x6E\x9A\x87\x71\x9C\x61\x21\x34\x41\x80\x80\x32\x84\x99\x52\x8E\x84\x32\x84\x97\xAA\x97\x97\x9C\x9D\x9A\xE8\x47\x91\xD8\x91\x74\xD2\x98\x48\xE1\x92\x68\xA6\x95\x77\xAC\x81\x74",
"\xCA\x98\x98\x38\x16\x50\xCE\x9E\x34\xE5\x9E\x97\x90\x93\x88\x93\x92\x89\x84\x81\x92\x98\x92\x49\xCB\x99\x13\x9D\x9B\x98\x00\x07\x91\x98\x8D\x91\x20\x98\x13\xE7\x92\x7E\xDB\x9B\x99\xAC\x9A\x97\xE8\x4E\x85\x93\x88\x81\x4E\x93\x95\x79\x95\x8C\x7C\x78\x9F\x87\x87\xA0\xCC\x9E\x9D\x9B\x42\x76\x5B\x9C\x39\x88\x43\x95\x67\x8F\x94\xF0\x21\x92\xBB\x99\x13\x09\x9E\x9F\xBB\x4B\xA1\x25\xA8\x86\x6F\x8E\x6D\xD7\x33\x86\x2B\xA7\x99\x15\xA3\xA2\x04\xA8\xA1\xFF\x92\x76\x0F\x90\x86\x29\xA8\x91\xEB\x5E\x6D\x11\xA2\x85\x37\xA3\x5F\x16\xAC\x9F\x34\xAB\x4B\x3F\xA8\x92\xCF\x5D\x59\x03\x6C\x50\xC3\x48\x54\xD8\x5F\x59\xC5\x34\x03\x7C\x54\x77\x74\x8A\x54\x99\x80\x52\xCF\x7E\x8C\x1D\x87\x7D\x9E\x84\x98\x95\x75\x24\x2E\x7E\x98\x24\x80\x00\x84\x6A\x53\x92\x61\x81\x53\xA8\x57\xB5\x63\x79\x7D\x97\x12\xBA\x6E\x96\xAC\x50\x00\x50\xA0\x6C\x03\x12\x6C\x6E\xAD\x8F\x57\xAB\x89\x2C\x9B\x83\x4F\x48\x56\xDB\x8D\x8D\xD5\x31\x7D\x44\x68\x5C\x47\x6A\x60\x6B\xA7\x76\x88\x40\x9B\x9C\x67\xA8\x96\x99\x9A\x14\x53\x6A\x25\x93\x76\xDE\x68\x6A\x39\x39\x34\xAB\x6C\x11\x02\x9F\x6A\x7D\x8B\x88\x90\xAE\x88\xC4\x9F\x9C\xC6\x93\x12\xF4\x8F\xA9\xB8\x94\x51\xF9\x8D\x86\x6A\x92\xA9\x1D\x42\x31\x01\x98\x8E\xD8\x84\x90\x0A\x6A\x96\xDE\x7E\x64\x03\xAF\x6D\x1F\x97\x92\x38\x1F\xA4\x24\x91\x6C\xF4\x97\x6A\x29\x91\x94\x27\x79\xA7\x1E\x81\x7F\x75\xAF\xA5\xA0\x71\xA6\x16\x65\x93\x49\x97\x93\x87\x59\x73\xD4\x91\x74\xAE\x8D\xAC\xB0\x82\x88\x40\x97\xA7\x2B\x92\x7D\x38\x89\x8B\x15\x7A\xA5\xBC\x8F\x80\xDA\x7D\x78\x99\x4F\xA0\x13\xA2\x2F\x1D\xA1\xAE\x79\x54\x51\xC9\x8F\xA8\x1B\xA6\x5B\x08\x8C\xAA\x03\x99\xA9\xFD\x64\x8D\x16\x36\x8D\xEC\xA8\xA9\x8A\x8D\x6F\x7D\xAF\x63\x7F\xA7\xA9\xD1\x83\x8E\x8A\x7C\x11\xE6\x86\xA9\xF3\xAB\xAF\xDA\x73\x95\x08\x99\x5E\x2F\xAD\x5E\x06\xB9\x91\x6A\x8A\x57\xF5\x54\x77\x45\xA8\x6E\x72\x80\x60\x67\xAF\x59\x7E\x88\x87\x0A\x6D\x6F\xA7\x94\x76\xD2\x85\x4E\x77\x8F\x27\x14\x6B\x7B\x26\x9D\xA0\x1B\xB8\x4E\x1B\x66\x96\xB6\xAA\x7D\x0F\xB6\xA8\x7D\x43\x79\x13\xB2\x5D\xEE\x5D\xB2\xF4\x2A\x30\x7A\x4D\x20\x6D\x91\x98\x45\x25\xA2\x85\xA4\x1D\x1C\x0F\x13\x75\x2A\xA8\xA4\x90\x65\x6A\x28\xA8\xFD\x2E\x01\x3C\xBD\x20\x9D\xAE\x69\xA2\xAC\xA1\x54\x19\xB4\xD4\x13\x45\xAD\x35\x20\xD3\x99\x9E\x82\x63\x32\x04\x84\x1D\xF8\x37\x30\x50\xB6\x9F\xDE\x65\x29\xB3\xA4\x1D\x4A\x4F\xB4\xFD\x10\xAE\xC3\x83\x32\x53\x94\x1D\x26\x05\xB4\x05\x29\xA3\x29\xB4\x28\x3B\xAA\x27\xD4\x1F\x3F\x60\xBC\x1F\x10\x05\x47\x09\x11\x1B\xFF\x04\x1D\xB1\x12\xB3\x7A\xB2\xB3\xE2\x19\x10\x23\x37\x3A\x7B\xB1\xB8\x7A\xBD\xB7\xD6\x1E\x5E\x74\xB2\xB8\x42\x32\x10\x79\xBA\x11\x23\x3B\x58\xD4\x17\xA4\x4C\xAE\x59\xD2\x5D\x2F\x84\xB2\x1B\x8C\xB8\xB8\x81\xB5\xB9\x20\x2C\x25\x98\xB3\x10\x80\xBA\xB4\x08\x17\xB8\x82\xB0\xB9\xD7\x52\xB9\xF4\x2B\xB8\x0C\x1D\xB8\xCA\x64\x1D\x35\xB0\xA6\x45\x2A\x12\x76\xB1\x1B\x9D\xAB\xB7\xA8\xBA\x30\x2F\xB8\xA4\xE4\x51\xB3\x7D\x3B\xA4\xA5\xB9\xA4\xCD\x1F\x0F\x9F\xB0\xBC\xBC\x22\xB3\xB1\x1E\xA8\x04\x12\xBA\x81\xB7\xBB\x91\xBE\xBB\x7D\x1F\xB8\xBC\xB2\x60\xB9\xBC\x22\x9D\xA6\xBC\x88\xB4\xBA\xD0\xB5\x87\x9F\xB4\x1D\x6A\x2D\xB1\x13\x69\x87\xD4\x1A\xB6\x07\xB0\x65\xC2\xB0\x36\x0A\x31\x1B\x6A\x28\xBC\x7B\xBA\xBC\xBD\xB1\xBD\xCD\x1E\xBC\x2C\xB8\xBB\x75\x8D\xA9\x6A\x2B\xB7\xD6\xB0\x51\x78\x59\xBD\xC3\xB8\x10\xDC\xB0\x88\x77\x4F\xBD\x09\xBD\xB6\xB5\x2D\xB9\xD6\x16\xB7\x52\x6E\x1E\x02\xC7\xC0\xA4\x16\xB7\x7F\xB7\xC0\x6E\x49\xBF\x98\xB0\xBE\x0A\xBE\xB6\x03\xCF\x13\xEE\x15\xA2\xB4\xBC\xB9\xE4\xBF\xC0\xFF\xB1\x5F\x12\xC3\xC1\x63\x1D\x9F\x52\x6B\xB7\x9F\xB5\x25\xF3\xBA\xB7\x10\xC0\xC0\x50\x65\xBB\xF2\x34\x10\xD0\x82\x8E\xFD\x23\x9A\xA8\x90\x65\x7C\xB6\xB7\x06\x5E\x5E\x17\xCC\x10\x2A\xC3\x10\x55\x21\xA8\x59\x2D\x2F\xAD\xB5\xAC\xAF\xBA\x30\x9A\xBE\x5E\x06\x57\xC3\x08\x19\xC3\x02\x1A\xBA\xE7\x44\x1D\x02\xA7\xB2\xB0\xBF\x13\xB1\x1D\x9F\x46\xC8\xB9\x41\xBB\xA8\x32\xC4\x1C\x93\x72\xB4\xFF\x08\xBC\xE3\xB8\x10\x25\xC8\xC3\x1A\x14\xBD\x02\x18\xBE\x7A\xB5\xC5\x3F\xB0\x2C\x4C\xCE\xB3\x31\xC0\x2C\xD3\xB7\xC0\x30\xCA\xB1\x38\x18\xBF\x19\xC3\x10\xFB\xB3\x11\xDE\xBD\x23\x1B\xC2\x62\x0C\x2F\xB9\x8A\x98\xB7\x1A\x15\xAA\xA1\xB7\xC0\x66\xCB\xC6\xEC\x19\xC6\x59\xC6\xC5\x6C\xCF\xC7\x6E\xCA\xC6\x70\xC0\x00\x64\xC2\xC0\x51\xBA\x76\x82\x6D\xC5\x2B",
"\xC2\x30\xE6\xBA\x11\x8F\xCA\x30\x83\xCD\xC8\x86\xC5\x99\x67\xCC\x1E\xF2\xBB\xC8\x87\xCF\xC9\x39\x12\xC7\x5E\xCC\x27\x12\x6C\xBF\x25\x2E\xBF\x2E\xA1\xC1\x01\xC2\xC4\xB1\xBA\x11\x3D\xA8\xB8\x48\xCD\x2F\x38\xB5\xA7\xAC\xB0\x98\xAE\xBF\x16\xC1\xBF\xB9\x45\xCA\x11\xB1\x16\x50\x99\xC6\x30\xB7\xC6\xB3\x50\x19\xCB\x6A\xA5\xA7\x9D\xAF\xCB\x32\xBF\xC3\x85\x95\x24\xA6\xC4\x10\x52\x65\x7F\x30\x7B\xCA\x58\xC2\xAB\x27\xB4\xC9\x03\x13\xCC\x03\x11\x1B\xC8\xBC\xCD\xFE\x25\xCC\xBB\xC7\x12\xC8\xC5\x5D\x85\xAD\xA9\xE0\xCE\xC3\xBA\xC0\xC4\x50\x11\xCD\x03\x13\xCD\x75\xA6\xCD\x2B\xB5\x5D\x30\xBC\x22\x98\xBA\xB9\x6A\x25\x85\x08\xC5\x1D\x05\x15\xA2\x0D\x9B\xCF\x1E\xCA\x12\xEE\x55\x25\x22\xC8\xC1\x08\x1C\xCC\x0A\x3D\xC4\x22\xB8\x13\xB5\xCA\xC4\xBF\x25\xCE\x71\x98\xCB\xF7\xC1\xCB\x0C\x16\x9D\x00\xDC\xCF\xDA\xC2\x10\xFF\xCD\x2F\xB1\x1B\xD1\x9F\xBD\xA9\x1B\xDB\xB7\x91\xCE\x82\x5A\x2A\xB7\xEE\x1D\x93\x32\x82\xCF\x9A\x1A\xB5\x1D\xC7\xD1\x9A\xB1\x1B\x2D\xAD\xB9\xB5\xCA\xBD\xBD\x2E\xC4\xD7\xC2\x85\x8D\x7B\xC5\x3F\x1F\xB9\x70\x96\xC9\x61\xC8\xC9\x82\xC5\xD3\x0B\xDF\xC2\x2C\xD5\x2B\x6D\xC0\xC9\x45\xD9\xC2\x7A\xBE\x5E\x25\xB8\x88\x43\xDC\xCA\xD5\x59\xB2\x19\xD0\x10\x7A\xB1\x1B\x80\xC7\xBC\x41\xD0\x39\x36\xDC\x37\xB5\xA3\xD4\x9D\xA7\xD5\x88\xBA\xD0\xF7\x98\x13\xE9\xC2\xD2\xE4\x9A\x93\x3D\x1C\xD3\x55\xDE\xC0\xDB\xC9\xD5\x7F\x3D\xB5\x37\xD0\x89\xB3\xA1\xCA\x48\xDD\xD5\x63\xD9\xB8\xFD\x2C\xD4\x15\xAD\x78\x50\xDE\xA3\xE1\xB8\xC6\x82\xBA\xB9\x9D\xA5\x01\x17\xDF\xC4\x63\x15\xC1\x07\xC3\xC2\x1A\x11\xD2\x26\xD9\xD4\xC0\x25\x25\x60\xD2\xB8\x23\xD5\xB5\x9A\xB2\x65\x87\x42\xC0\xC8\xBC\x32\xA2\xC8\xCD\x43\xD0\xD9\x9B\xD7\x9D\x68\xD8\xD7\x34\xDC\x10\x2D\xCF\xCA\x0C\x12\xB6\x21\xAE\x21\x76\xBE\x5E\x97\xDD\xB9\x99\xDB\xD8\x9F\xD2\xD7\x27\xBE\xD9\x75\xD5\x5D\xF1\x9B\x24\x65\xC7\x2A\xE9\x87\xC5\xA7\xD3\xAE\xC3\x8A\xB9\x06\x5D\xDA\x98\xBF\xDA\x0C\x1C\xD8\x32\xB2\xD6\xDE\x64\xDB\x9D\xB3\xD9\x01\x85\xCB\xF3\x2D\xAA\x80\xDD\xDB\x93\x73\x95\x9A\xB0\xC2\x07\xC4\xDC\x08\x16\xDC\x09\xDE\xD8\xEC\x1A\xDC\x98\xBC\xDC\x32\x8E\xDC\xBA\xD0\xDD\x85\xC1\xD7\x91\x94\xCA\xAA\xDF\x13\x8A\x97\x01\xD7\xD6\xD0\x04\x1A\xDD\x06\x38\xDC\x4D\x9A\xC8\xB5\xD0\xDA\xD0\xA0\x15\xE2\xD4\xDA\xBB\xD1\xDD\x08\x17\xB4\xB6\x96\x8F\x9A\xB3\xCB\x02\x12\xDC\x88\xB8\xDD\xEF\xD1\xDB\x25\x60\x8C\xF4\xDB\xDC\x67\xD7\xDF\xB8\xD2\xB3\xCF\xDD\xAE\xE5\xD2\xDD\x12\xA3\x8C\x85\xD6\xD8\x18\xE4\x10\x18\x0C\xC0\x08\xEA\xA3\x1C\xC6\xDA\x08\x17\xC2\x1F\xEC\xDB\x02\xC3\xC4\x1A\x19\x01\x1C\xE0\xC6\x32\xBE\x5E\xB7\x88\x74\x46\x97\xCC\xE6\xDB\xAB\x20\xE8\xD1\xB1\x1A\x01\x29\xED\xB9\x64\xB4\xAE\xD4\x18\xDA\x7D\x7A\xB9\x7C\xCB\xD6\x0C\x11\xD9\x8E\xC7\xC0\x39\xE6\xE1\xEE\xD2\x95\xE4\xAF\xD5\x07\xCC\xE3\x39\x15\xD6\x8D\xD3\x79\xB7\xD3\xB8\x14\xD8\x10\x1B\x07\xE3\x98\xBD\x25\xD0\x93\x12\xD4\x1E\xDF\x6A\x9E\xE3\x1A\x1D\xC7\xC0\xCB\xE0\x58\xD2\xC0\x58\xEC\xB4\x1A\x1C\xE5\x59\xEE\x11\x4A\xE2\xC0\x68\xE9\xB4\x4E\xE7\xDC\x0D\xE2\xB5\x30\xE7\xE1\x50\xCF\x13\x25\xAA\xCF\x74\xE9\xE7\x9A\xB4\x1D\x1D\x09\xE7\x00\xD6\xE2\x14\xE8\xB9\xB1\x1D\xD0\xB7\x2B\xBA\x1A\x1E\xCC\x5D\xA3\xE7\x18\xD4\x1D\x1F\x0E\xE7\x2E\xD6\xB7\xD6\xD2\xC0\x83\xE9\xDB\xFA\xD4\xDE\x39\x1D\xC9\x5E\x98\xC8\xE5\xDB\xE7\x1A\x1C\x3F\x8E\xEF\xE7\x76\xBB\xDE\x56\xED\xCD\x94\xE8\x10\xA5\xD4\xE2\x04\x1D\xE6\xB7\x91\xD0\xA4\x14\x1D\x42\xEF\xE9\xB0\xC4\xC1\x78\xC2\xE9\x47\xE2\x10\xAF\xEF\xE4\xB6\xD1\xDA\x18\xD6\xD9\x89\xD5\xEB\x00\x07\xEB\x70\xE0\xE5\xA1\xD9\xDF\xA6\xEB\xDF\x13\xEB\x41\xD3\xD4\xAE\x80\xE8\x10\x04\xE2\xB8\x8A\xD1\xE4\x1D\xE0\x9F\xC3\xE5\xEA\x2C\xC6\xEC\x97\xEE\xEB\xC2\x89\xDA\x18\xD1\xDC\xBD\xE1\xE8\x03\x10\xEC\xDB\xD2\xEC\x0E\xE2\xDA\x6C\xD4\x26\xD6\xE8\x13\x3B\xEE\xDB\xDA\xE5\xDD\x87\xED\xED\xC8\xE8\x10\xE0\xE1\xDF\x71\xE2\xC9\xF8\xD4\xED\x03\x17\xEA\xFC\xD4\x10\x6F\xCE\x6D\x9A\xB2\xEA\x02\xCF\xEC\xF0\xE1\xED\xE8\x94\xEF\x0F\xEA\xC9\xE3\xD2\xE1\xD7\xEC\x10\xAA\xE0\xE0\x76\xB2\xE0\x00\x0D\xEC\x81\xB0\xF0\x04\x11\xEF\x02\x30\xDE\x41\x74\xEC\xD5\xE6\xE9\xE8\xE8\xED\x20\xAD\xE3\x76\xB4\x1D\x25\x00\xEB\x88\xBA\xB9\x88\xD2\xF2\x8B\xEA\x11\xE6\x36\xF2\x81\xD4\xC0\x1A\x10\xF1\x53\xC4\xEA\x10\xE7\xF0\xF4\xA9\xF0\xEF\xE2\x85\xD4\xDB\xDA\x2D\xF3\xEA\x8A\xB6\xEF\xE6\xEA\xF1\x2B\x3A",
"\xEE\x1E\xFF\x13\xDC\xE4\xEB\x2A\xE6\xF0\x95\xE8\xF0\x1B\xFE\xED\x25\x65\xB6\x18\xDE\xF0\x2E\xF0\xE4\x47\xCC\xF3\xA1\x4E\xF3\xE9\xE9\xEC\xBF\xDF\xF1\x3F\xDA\xF2\x02\x3A\xB9\x0B\xC4\xF4\x35\xF3\x10\x62\xC1\xB8\x22\xEA\xC7\x09\xF4\xF2\xB3\xE2\xD3\xBE\xE1\xF6\x7B\xB3\xF6\x1A\x94\xF3\xEC\xEC\x10\x21\xCA\xB7\x12\xF0\xF6\x07\xCC\xF6\xDE\x68\xF1\xF7\xE7\xEE\x44\xD3\xCA\x84\xC4\xF3\x5A\xFF\xF7\x79\xE0",
};

			void XmlGetParserBuffer(vl::stream::MemoryStream& stream)
			{
				vl::stream::MemoryStream compressedStream;
				for (vint i = 0; i < parserBufferRows; i++)
				{
					vint size = i == parserBufferRows - 1 ? parserBufferRemain : parserBufferBlock;
					compressedStream.Write((void*)parserBuffer[i], size);
				}
				compressedStream.SeekFromBegin(0);
				vl::stream::LzwDecoder decoder;
				vl::stream::DecoderStream decoderStream(compressedStream, decoder);
				vl::collections::Array<vl::vuint8_t> buffer(65536);
				while (true)
				{
					vl::vint size = decoderStream.Read(&buffer[0], 65536);
					if (size == 0) break;
					stream.Write(&buffer[0], size);
				}
				stream.SeekFromBegin(0);
			}
/***********************************************************************
Unescaping Function Foward Declarations
***********************************************************************/

			extern void XmlMergeTextFragment(vl::collections::List<vl::Ptr<XmlNode>>& value, const vl::collections::List<vl::regex::RegexToken>& tokens);
			extern void XmlUnescapeAttributeValue(vl::parsing::ParsingToken& value, const vl::collections::List<vl::regex::RegexToken>& tokens);
			extern void XmlUnescapeCData(vl::parsing::ParsingToken& value, const vl::collections::List<vl::regex::RegexToken>& tokens);
			extern void XmlUnescapeComment(vl::parsing::ParsingToken& value, const vl::collections::List<vl::regex::RegexToken>& tokens);

/***********************************************************************
Parsing Tree Conversion Driver Implementation
***********************************************************************/

			class XmlTreeConverter : public vl::parsing::ParsingTreeConverter
			{
			public:
				using vl::parsing::ParsingTreeConverter::SetMember;

				void Fill(vl::Ptr<XmlNode> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
				}

				void Fill(vl::Ptr<XmlText> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->content, obj->GetMember(L"content"), tokens);
				}

				void Fill(vl::Ptr<XmlCData> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					if(SetMember(tree->content, obj->GetMember(L"content"), tokens))
					{
						XmlUnescapeCData(tree->content, tokens);
					}
				}

				void Fill(vl::Ptr<XmlAttribute> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->name, obj->GetMember(L"name"), tokens);
					if(SetMember(tree->value, obj->GetMember(L"value"), tokens))
					{
						XmlUnescapeAttributeValue(tree->value, tokens);
					}
				}

				void Fill(vl::Ptr<XmlComment> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					if(SetMember(tree->content, obj->GetMember(L"content"), tokens))
					{
						XmlUnescapeComment(tree->content, tokens);
					}
				}

				void Fill(vl::Ptr<XmlElement> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->name, obj->GetMember(L"name"), tokens);
					SetMember(tree->closingName, obj->GetMember(L"closingName"), tokens);
					SetMember(tree->attributes, obj->GetMember(L"attributes"), tokens);
					if(SetMember(tree->subNodes, obj->GetMember(L"subNodes"), tokens))
					{
						XmlMergeTextFragment(tree->subNodes, tokens);
					}
				}

				void Fill(vl::Ptr<XmlInstruction> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->name, obj->GetMember(L"name"), tokens);
					SetMember(tree->attributes, obj->GetMember(L"attributes"), tokens);
				}

				void Fill(vl::Ptr<XmlDocument> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->prologs, obj->GetMember(L"prologs"), tokens);
					SetMember(tree->rootElement, obj->GetMember(L"rootElement"), tokens);
				}

				vl::Ptr<vl::parsing::ParsingTreeCustomBase> ConvertClass(vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)override
				{
					if(obj->GetType()==L"Text")
					{
						vl::Ptr<XmlText> tree = new XmlText;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<XmlNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"CData")
					{
						vl::Ptr<XmlCData> tree = new XmlCData;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<XmlNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Attribute")
					{
						vl::Ptr<XmlAttribute> tree = new XmlAttribute;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<XmlNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Comment")
					{
						vl::Ptr<XmlComment> tree = new XmlComment;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<XmlNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Element")
					{
						vl::Ptr<XmlElement> tree = new XmlElement;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<XmlNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Instruction")
					{
						vl::Ptr<XmlInstruction> tree = new XmlInstruction;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<XmlNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Document")
					{
						vl::Ptr<XmlDocument> tree = new XmlDocument;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<XmlNode>(), obj, tokens);
						return tree;
					}
					else 
						return 0;
				}
			};

			vl::Ptr<vl::parsing::ParsingTreeCustomBase> XmlConvertParsingTreeNode(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				XmlTreeConverter converter;
				vl::Ptr<vl::parsing::ParsingTreeCustomBase> tree;
				converter.SetMember(tree, node, tokens);
				return tree;
			}

/***********************************************************************
Parsing Tree Conversion Implementation
***********************************************************************/

			vl::Ptr<XmlText> XmlText::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return XmlConvertParsingTreeNode(node, tokens).Cast<XmlText>();
			}

			vl::Ptr<XmlCData> XmlCData::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return XmlConvertParsingTreeNode(node, tokens).Cast<XmlCData>();
			}

			vl::Ptr<XmlAttribute> XmlAttribute::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return XmlConvertParsingTreeNode(node, tokens).Cast<XmlAttribute>();
			}

			vl::Ptr<XmlComment> XmlComment::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return XmlConvertParsingTreeNode(node, tokens).Cast<XmlComment>();
			}

			vl::Ptr<XmlElement> XmlElement::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return XmlConvertParsingTreeNode(node, tokens).Cast<XmlElement>();
			}

			vl::Ptr<XmlInstruction> XmlInstruction::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return XmlConvertParsingTreeNode(node, tokens).Cast<XmlInstruction>();
			}

			vl::Ptr<XmlDocument> XmlDocument::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return XmlConvertParsingTreeNode(node, tokens).Cast<XmlDocument>();
			}

/***********************************************************************
Visitor Pattern Implementation
***********************************************************************/

			void XmlText::Accept(XmlNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void XmlCData::Accept(XmlNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void XmlAttribute::Accept(XmlNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void XmlComment::Accept(XmlNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void XmlElement::Accept(XmlNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void XmlInstruction::Accept(XmlNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void XmlDocument::Accept(XmlNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

/***********************************************************************
Parser Function
***********************************************************************/

			vl::Ptr<vl::parsing::ParsingTreeNode> XmlParseDocumentAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"XDocument");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				return node;
			}

			vl::Ptr<vl::parsing::ParsingTreeNode> XmlParseDocumentAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return XmlParseDocumentAsParsingTreeNode(input, table, errors, codeIndex);
			}

			vl::Ptr<XmlDocument> XmlParseDocument(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"XDocument");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				if(node && errors.Count()==0)
				{
					return XmlConvertParsingTreeNode(node, state.GetTokens()).Cast<XmlDocument>();
				}
				return 0;
			}

			vl::Ptr<XmlDocument> XmlParseDocument(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return XmlParseDocument(input, table, errors, codeIndex);
			}

			vl::Ptr<vl::parsing::ParsingTreeNode> XmlParseElementAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"XElement");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				return node;
			}

			vl::Ptr<vl::parsing::ParsingTreeNode> XmlParseElementAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return XmlParseElementAsParsingTreeNode(input, table, errors, codeIndex);
			}

			vl::Ptr<XmlElement> XmlParseElement(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"XElement");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				if(node && errors.Count()==0)
				{
					return XmlConvertParsingTreeNode(node, state.GetTokens()).Cast<XmlElement>();
				}
				return 0;
			}

			vl::Ptr<XmlElement> XmlParseElement(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return XmlParseElement(input, table, errors, codeIndex);
			}

/***********************************************************************
Table Generation
***********************************************************************/

			vl::Ptr<vl::parsing::tabling::ParsingTable> XmlLoadTable()
			{
				vl::stream::MemoryStream stream;
				XmlGetParserBuffer(stream);
				vl::Ptr<vl::parsing::tabling::ParsingTable> table=new vl::parsing::tabling::ParsingTable(stream);
				table->Initialize();
				return table;
			}

		}
	}
}
namespace vl
{
	namespace reflection
	{
		namespace description
		{
#ifndef VCZH_DEBUG_NO_REFLECTION
			using namespace vl::parsing::xml;

			IMPL_TYPE_INFO_RENAME(vl::parsing::xml::XmlNode, system::XmlNode)
			IMPL_TYPE_INFO_RENAME(vl::parsing::xml::XmlText, system::XmlText)
			IMPL_TYPE_INFO_RENAME(vl::parsing::xml::XmlCData, system::XmlCData)
			IMPL_TYPE_INFO_RENAME(vl::parsing::xml::XmlAttribute, system::XmlAttribute)
			IMPL_TYPE_INFO_RENAME(vl::parsing::xml::XmlComment, system::XmlComment)
			IMPL_TYPE_INFO_RENAME(vl::parsing::xml::XmlElement, system::XmlElement)
			IMPL_TYPE_INFO_RENAME(vl::parsing::xml::XmlInstruction, system::XmlInstruction)
			IMPL_TYPE_INFO_RENAME(vl::parsing::xml::XmlDocument, system::XmlDocument)
			IMPL_TYPE_INFO_RENAME(vl::parsing::xml::XmlNode::IVisitor, system::XmlNode::IVisitor)

			BEGIN_CLASS_MEMBER(XmlNode)
				CLASS_MEMBER_METHOD(Accept, {L"visitor"})

			END_CLASS_MEMBER(XmlNode)

			BEGIN_CLASS_MEMBER(XmlText)
				CLASS_MEMBER_BASE(XmlNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<XmlText>(), NO_PARAMETER)

				CLASS_MEMBER_EXTERNALMETHOD(get_content, NO_PARAMETER, vl::WString(XmlText::*)(), [](XmlText* node){ return node->content.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_content, {L"value"}, void(XmlText::*)(const vl::WString&), [](XmlText* node, const vl::WString& value){ node->content.value = value; })

				CLASS_MEMBER_PROPERTY(content, get_content, set_content)
			END_CLASS_MEMBER(XmlText)

			BEGIN_CLASS_MEMBER(XmlCData)
				CLASS_MEMBER_BASE(XmlNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<XmlCData>(), NO_PARAMETER)

				CLASS_MEMBER_EXTERNALMETHOD(get_content, NO_PARAMETER, vl::WString(XmlCData::*)(), [](XmlCData* node){ return node->content.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_content, {L"value"}, void(XmlCData::*)(const vl::WString&), [](XmlCData* node, const vl::WString& value){ node->content.value = value; })

				CLASS_MEMBER_PROPERTY(content, get_content, set_content)
			END_CLASS_MEMBER(XmlCData)

			BEGIN_CLASS_MEMBER(XmlAttribute)
				CLASS_MEMBER_BASE(XmlNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<XmlAttribute>(), NO_PARAMETER)

				CLASS_MEMBER_EXTERNALMETHOD(get_name, NO_PARAMETER, vl::WString(XmlAttribute::*)(), [](XmlAttribute* node){ return node->name.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_name, {L"value"}, void(XmlAttribute::*)(const vl::WString&), [](XmlAttribute* node, const vl::WString& value){ node->name.value = value; })
				CLASS_MEMBER_EXTERNALMETHOD(get_value, NO_PARAMETER, vl::WString(XmlAttribute::*)(), [](XmlAttribute* node){ return node->value.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_value, {L"value"}, void(XmlAttribute::*)(const vl::WString&), [](XmlAttribute* node, const vl::WString& value){ node->value.value = value; })

				CLASS_MEMBER_PROPERTY(name, get_name, set_name)
				CLASS_MEMBER_PROPERTY(value, get_value, set_value)
			END_CLASS_MEMBER(XmlAttribute)

			BEGIN_CLASS_MEMBER(XmlComment)
				CLASS_MEMBER_BASE(XmlNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<XmlComment>(), NO_PARAMETER)

				CLASS_MEMBER_EXTERNALMETHOD(get_content, NO_PARAMETER, vl::WString(XmlComment::*)(), [](XmlComment* node){ return node->content.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_content, {L"value"}, void(XmlComment::*)(const vl::WString&), [](XmlComment* node, const vl::WString& value){ node->content.value = value; })

				CLASS_MEMBER_PROPERTY(content, get_content, set_content)
			END_CLASS_MEMBER(XmlComment)

			BEGIN_CLASS_MEMBER(XmlElement)
				CLASS_MEMBER_BASE(XmlNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<XmlElement>(), NO_PARAMETER)

				CLASS_MEMBER_EXTERNALMETHOD(get_name, NO_PARAMETER, vl::WString(XmlElement::*)(), [](XmlElement* node){ return node->name.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_name, {L"value"}, void(XmlElement::*)(const vl::WString&), [](XmlElement* node, const vl::WString& value){ node->name.value = value; })
				CLASS_MEMBER_EXTERNALMETHOD(get_closingName, NO_PARAMETER, vl::WString(XmlElement::*)(), [](XmlElement* node){ return node->closingName.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_closingName, {L"value"}, void(XmlElement::*)(const vl::WString&), [](XmlElement* node, const vl::WString& value){ node->closingName.value = value; })

				CLASS_MEMBER_PROPERTY(name, get_name, set_name)
				CLASS_MEMBER_PROPERTY(closingName, get_closingName, set_closingName)
				CLASS_MEMBER_FIELD(attributes)
				CLASS_MEMBER_FIELD(subNodes)
			END_CLASS_MEMBER(XmlElement)

			BEGIN_CLASS_MEMBER(XmlInstruction)
				CLASS_MEMBER_BASE(XmlNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<XmlInstruction>(), NO_PARAMETER)

				CLASS_MEMBER_EXTERNALMETHOD(get_name, NO_PARAMETER, vl::WString(XmlInstruction::*)(), [](XmlInstruction* node){ return node->name.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_name, {L"value"}, void(XmlInstruction::*)(const vl::WString&), [](XmlInstruction* node, const vl::WString& value){ node->name.value = value; })

				CLASS_MEMBER_PROPERTY(name, get_name, set_name)
				CLASS_MEMBER_FIELD(attributes)
			END_CLASS_MEMBER(XmlInstruction)

			BEGIN_CLASS_MEMBER(XmlDocument)
				CLASS_MEMBER_BASE(XmlNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<XmlDocument>(), NO_PARAMETER)


				CLASS_MEMBER_FIELD(prologs)
				CLASS_MEMBER_FIELD(rootElement)
			END_CLASS_MEMBER(XmlDocument)

			BEGIN_INTERFACE_MEMBER(XmlNode::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(XmlNode::IVisitor::*)(XmlText* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(XmlNode::IVisitor::*)(XmlCData* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(XmlNode::IVisitor::*)(XmlAttribute* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(XmlNode::IVisitor::*)(XmlComment* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(XmlNode::IVisitor::*)(XmlElement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(XmlNode::IVisitor::*)(XmlInstruction* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(XmlNode::IVisitor::*)(XmlDocument* node))
			END_INTERFACE_MEMBER(XmlNode)

			class XmlTypeLoader : public vl::Object, public ITypeLoader
			{
			public:
				void Load(ITypeManager* manager)
				{
					ADD_TYPE_INFO(vl::parsing::xml::XmlNode)
					ADD_TYPE_INFO(vl::parsing::xml::XmlText)
					ADD_TYPE_INFO(vl::parsing::xml::XmlCData)
					ADD_TYPE_INFO(vl::parsing::xml::XmlAttribute)
					ADD_TYPE_INFO(vl::parsing::xml::XmlComment)
					ADD_TYPE_INFO(vl::parsing::xml::XmlElement)
					ADD_TYPE_INFO(vl::parsing::xml::XmlInstruction)
					ADD_TYPE_INFO(vl::parsing::xml::XmlDocument)
					ADD_TYPE_INFO(vl::parsing::xml::XmlNode::IVisitor)
				}

				void Unload(ITypeManager* manager)
				{
				}
			};
#endif

			bool XmlLoadTypes()
			{
#ifndef VCZH_DEBUG_NO_REFLECTION
				ITypeManager* manager=GetGlobalTypeManager();
				if(manager)
				{
					Ptr<ITypeLoader> loader=new XmlTypeLoader;
					return manager->AddTypeLoader(loader);
				}
#endif
				return false;
			}
		}
	}
}
