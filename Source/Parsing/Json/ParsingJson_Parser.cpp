#include "ParsingJson_Parser.h"

namespace vl
{
	namespace parsing
	{
		namespace json
		{
/***********************************************************************
ParserText
***********************************************************************/

const wchar_t parserTextBuffer[] = 
L"\r\n" L""
L"\r\n" L"class Node"
L"\r\n" L"{"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Literal:Node"
L"\r\n" L"{"
L"\r\n" L"\tenum Value"
L"\r\n" L"\t{"
L"\r\n" L"\t\tTrue,"
L"\r\n" L"\t\tFalse,"
L"\r\n" L"\t\tNull,"
L"\r\n" L"\t}"
L"\r\n" L""
L"\r\n" L"\tValue value;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class String:Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken content(JsonUnescapingString)\t\t\t\t@Color(\"String\");"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Number:Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken content;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Array:Node"
L"\r\n" L"{"
L"\r\n" L"\tNode[] items;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class ObjectField:Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken name(JsonUnescapingString)\t\t\t\t@Color(\"AttName\");"
L"\r\n" L"\tNode value;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Object:Node"
L"\r\n" L"{"
L"\r\n" L"\tObjectField[] fields;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"token TRUEVALUE = \"true\"\t\t\t\t\t\t\t@Color(\"Keyword\");"
L"\r\n" L"token FALSEVALUE = \"false\"\t\t\t\t\t\t\t@Color(\"Keyword\");"
L"\r\n" L"token NULLVALUE = \"null\"\t\t\t\t\t\t\t@Color(\"Keyword\");"
L"\r\n" L"token OBJOPEN = \"\\{\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token OBJCLOSE = \"\\}\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token ARROPEN = \"\\[\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token ARRCLOSE = \"\\]\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token COMMA = \",\";"
L"\r\n" L"token COLON = \":\";"
L"\r\n" L"token NUMBER = \"[\\-]?\\d+(.\\d+)?([eE][+\\-]?\\d+)?\"\t@Color(\"Number\");"
L"\r\n" L"token STRING = \"\"\"([^\\\\\"\"]|\\\\[^u]|\\\\u\\d{4})*\"\"\"\t\t@ContextColor();"
L"\r\n" L""
L"\r\n" L"discardtoken SPACE = \"\\s+\";"
L"\r\n" L""
L"\r\n" L"rule Node JLiteral"
L"\r\n" L"\t= STRING:content as String"
L"\r\n" L"\t= NUMBER:content as Number"
L"\r\n" L"\t= \"true\" as Literal with {value = \"True\"}"
L"\r\n" L"\t= \"false\" as Literal with {value = \"False\"}"
L"\r\n" L"\t= \"null\" as Literal with {value = \"Null\"}"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule ObjectField JField"
L"\r\n" L"\t= STRING:name \":\" JValue:value as ObjectField"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Object JObject"
L"\r\n" L"\t= \"{\" [JField:fields {\",\" JField:fields} ] \"}\" as Object"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Array JArray"
L"\r\n" L"\t= \"[\" [JValue:items {\",\" JValue:items} ] \"]\" as Array"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Node JValue"
L"\r\n" L"\t= !JLiteral"
L"\r\n" L"\t= !JObject"
L"\r\n" L"\t= !JArray"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Node JRoot"
L"\r\n" L"\t= !JObject"
L"\r\n" L"\t= !JArray"
L"\r\n" L"\t;"
;

			vl::WString JsonGetParserTextBuffer()
			{
				return parserTextBuffer;
			}

/***********************************************************************
SerializedTable
***********************************************************************/

const vint parserBufferLength = 4313; // 20568 bytes before compressing
const vint parserBufferBlock = 1024;
const vint parserBufferRemain = 217;
const vint parserBufferRows = 5;
const char* parserBuffer[] = {
"\x00\x0B\x00\x02\x83\x80\x07\x7D\x00\x82\x03\xFF\x45\x08\x82\x83\x20\x01\x37\x00\x6C\x0F\x80\x02\x38\x03\x82\x86\x06\x0C\x80\x13\x20\x04\x38\x8A\x00\x69\x00\x2E\x20\x07\x35\x83\x8A\x84\x0A\x9A\x8E\x90\x82\x88\x89\x8B\x93\x04\x87\x1A\x81\x2D\x8D\x9A\x26\x00\x61\x00\x2D\x20\x05\x36\x92\x8D\x94\x0C\xAB\x91\x93\x8F\x92\x8E\x98\x86\x4B\x3C\x80\x19\x30\x07\x38\xA2\x00\x64\x3E\x8C\x80\xA8\x82\xA1\x97\x8F\x30\x83\x87\xA8\x89\xA5\x9C\xA6\xA7\x2E\xD0\x92\xA8\x9B\x81\xA3\x89\xAB\x45\x8C\x9B\xA4\x8D\xAB\xA5\xA7\xA7\x51\x86\xBF\x85\xB5\xAF\xB3\xA7\xAC\x02\x88\x1A\x82\x23\x8D\x3A\x90\xB1\x39\x95\x8C\xB2\xB3\xAC\xB8\x82\xAB\x77\x9A\xBA\xAC\x8C\xB8\x8A\xBF\x91\x51\x81\xEE\xA4\xC4\xB2\x96\xBB\xB0\x78\x80\x0B\xC8\x8D\xC0\x03\xC6\xC0\x1F\x83\xD9\xD4\xA7\xC7\xC8\xAC\xC5\x7B\xFD\xBF\xB1\xC1\xD3\xB0\x82\xD2\x03\x88\xD8\xDA\x89\x8C\x87\x9A\xBF\x3B\xE2\x0A\xB5\x84\xCF\xD4\x06\xCB\x10\xA3\x9E\x9D\x98\x3D\x9A\xD9\x8F\x1A\x80\x2B\xA3\x86\xC3\x80\x9B\x8A\x15\xB9\x83\xDF\x74\xED\xEB\x7F\xE5\x02\xCC\x20\x95\x9D\x99\xEB\xA0\xEB\xD6\x84\x1A\x97\x90\x89\xA9\x9E\xF0\xD5\xB5\xC8\x97\xDA\x98\x02\xDD\xEE\x05\xE8\xFF\x6A\xF4\x87\x26\xF6\x00\x6A\x4A\xA3\x35\x92\xFF\x7D\x80\x86\xF6\x7A\x69\x7D\x4F\xFB\x5E\x46\x13\x76\x3D\x52\x41\x5E\x7C\xF4\x43\x4C\x46\x47\x15\x61\x43\x49\x49\xFD\x58\x70\x01\x73\x02\x4F\x7F\x46\x74\x17\x9A\x41\x4B\x70\xED\x73\x11\x7C\x7A\x16\x9A\x7F\x87\x6E\x38\x43\x58\x84\x00\x76\x29\x82\x46\x5F\xE7\x4C\x83\x7A\x67\xED\x6F\x7F\x46\x85\xFB\x41\x7C\x77\x5F\x1E\x7D\x7D\x82\x40\x01\xB8\x7A\x7D\x4D\x3F\x80\x06\x18\x82\x43\x51\x52\x89\x7F\xFF\x48\x41\x93\x80\x00\x05\x80\x03\x81\x21\x49\x82\x5A\x78\x0C\x63\x49\x4F\x4E\x3D\x59\x6D\x91\x7D\xF7\x50\x92\x94\x95\x4A\x4A\x8D\x84\x43\x2D\xB9\x4F\x8A\x52\x3E\x9A\x4F\x83\x47\x12\xA4\x4A\x72\x46\x39\xBC\x8A\x52\x70\xC9\x40\x0F\x02\x46\x24\x1A\x4B\x9D\x9E\x80\x89\x4D\x7E\x7C\x81\xA8\x43\xA0\x7A\x85\xAF\x67\xA0\x78\x89\x82\xAB\xA1\x75\x09\x1A\x44\x14\x00\x52\x00\x05\x14\x00\x45\x00\x06\x14\x00\x34\x5A\x77\xA5\xA6\x58\x88\x40\x84\x8D\x3D\x49\x72\x02\x46\x0A\x1A\x47\x81\xA7\x1B\x58\xAA\xA4\xA7\x00\x1E\xAE\xAB\x8A\x47\xAA\x90\x02\x88\x5D\x9A\x43\x02\x46\x91\xB6\x66\xA5\xAC\xC0\x9B\xAC\xAB\xA7\x00\x21\xA4\x43\x48\x7E\x52\x42\x47\xA9\x0C\x46\xBA\x56\x46\xF6\x7C\x5A\x10\x00\xF6\x50\x1E\xAB\x4D\xCC\x88\x4C\x14\x00\x7B\x00\x0B\xAC\x43\x2B\x9B\x60\x9A\xB4\x00\x0E\x4A\x76\x7D\x1C\x59\xA9\xB4\x41\xDB\xBD\x15\xB0\x6D\x46\x73\x44\xA7\xBC\xD5\x97\xB0\x03\xBA\x03\x5B\xBB\x17\x99\x08\x56\x82\xBA\x73\xF3\x95\xA6\xB8\xB5\xAD\xAA\xBA\x47\xB6\x5D\x00\x05\x93\xBF\x02\x6B\x8E\x42\x7D\x4D\x00\x01\xC4\x4D\x99\x6C\x03\x9F\x54\xF2\x4E\xC4\xC3\xB9\x00\x37\x49\x66\x0E\x9A\x7F\x42\x8E\xAF\x97\x91\xCC\x5D\xA6\x95\x9F\x0A\x47\xBE\xDB\xAD\x00\x01\xC2\x3F\x00\x0B\xB5\x54\x2B\x00\x08\x08\x00\x2E\x32\xC2\x59\xCD\x29\x00\x01\xCF\xCD\xFB\xBD\x49\xA5\xC2\xFB\xB5\xCD\xCB\xCB\x3E\xFA\xC4\xCC\x00\x3D\xF1\xCD\xAC\x42\x4F\xC4\x45\x90\x47\x93\x95\xA9\x11\xC7\x00\x07\x10\x03\x06\x1A\x62\x06\xCC\x00\xFB\x9E\x1A\xCF\xB6\x5E\xC9\xCC\x1F\xD8\x60\xC0\x02\xDA\x5F\x66\xE8\xDE\x5F\xCC\xDC\x80\x04\x0C\x00\xEE\xBD\xCA\x08\x00\x5E\xE9\xAC\x42\xDE\x08\x59\x6B\x88\x47\xD6\xB4\x4E\x41\xA6\xDF\x9A\xB7\xAC\x00\x35\xDF\x9E\xA0\x78\x7D\x8C\x4C\xC0\x00\xD3\xA6\x8B\x8E\x77\x12\x52\x0A\x45\xE4\xDB\x60\x84\xE4\xCE\xF3\x90\x40\x46\x47\x6F\x92\x6E\x45\x03\x1A\x40\x10\x00\x08\x00\x3D\x9C\x0C\xE4\xC0\xA7\x80\x7E\xAD\x3E\x21\xCC\x40\xE6\xAE\xDB\x83\x52\x03\x97\xED\xE3\xE6\x8B\x9C\xE1\xEF\x46\x47\xBF\x4C\x46\xE8\xEA\xAB\xF4\xEB\xEC\xEC\xB2\xC8\x46\xF2\xE6\xBC\xFC\xD4\x43\xF2\x28\xB6\xA9\xCD\x0C\x00\x3A\x3A\x45\xF1\xBA\xCC\xF8\xF0\xC8\xA8\xF7\x45\xC8\x00\x27\xF3\xB8\xE8\xF7\x51\x93\x48\x9D\x4F\x78\xA8\xE9\x4E\x88\xDD\xF4\x89\x6C\x8A\xA6\xE4\xE9\xA8\xF6\x92\xDA\xF3\x51\xEC\xE4\xDE\xD3\xA8\x8C\x78\xE7\xE9\x88\xFB\xD9\x71\x7B\x50\x43\x7F\x2D\x13\x68\x0E\x7F\xDD\x48\x75\x9A\x43\x2C\x7E\xD4\x7D\x06\x7F\x5E\x73\x51\x45\x7C\x7E\x6A\xD4\x6E\x5A\x7E\x00\x14\x7D\xE6\x02\x82\x22\xFC\x50\x87\x2F\xC9\x43\x29\x05\xFF\x7E\x7F\xFA\x5C\x80\x00\x04\x8E\x2A\x01\x88\x8E\x7F\x05\xAB\x4D\x27\x0E\x9F\x80\x7B\x4A\x5D\x7E\x0B\x80\x00\x83\x1A\x95\x77\xE6\x1E\x88\x74\xAF\x75\x53\x28\xB8\x55\x84\x09\xA8\x76\x85",
"\xD7\x43\x86\x7F\x2A\x95\x27\x01\xA8\x79\x80\x16\x7C\x75\x81\x00\x0F\x81\x0F\xD3\x4C\x77\x20\xA3\x87\x82\x00\x13\x7C\xEB\x45\x86\x77\x0E\x80\x04\x7C\x54\x73\x5F\xD5\x37\x2A\x6B\xF1\x7E\x7D\x4E\xE7\x76\x4E\xFA\x07\x78\x75\x37\x51\x47\x2F\x25\x26\x77\xE3\x50\x76\x88\x89\x10\x01\x77\x5C\x9B\x71\xCE\x15\x5E\x73\x9A\x19\x50\x32\x37\x9C\x4D\x06\xDB\x8B\x83\x3A\x80\x01\x76\xA8\x66\x75\x91\x53\x5B\x52\x5B\x7C\x7B\x8E\xAF\x4E\x92\x52\x53\x71\x8B\xEB\x6C\x75\x91\x0C\x8A\x28\x0F\x80\x01\x04\xD6\x4F\x4B\x48\x1E\x31\x7D\x16\x83\x9C\x91\x27\x9A\x97\x8B\xFE\x7D\x93\xB4\x1A\x4E\x3A\xA6\x22\x92\x8B\xA5\x92\x91\x4F\x1B\x9A\x95\x00\x86\x92\x91\xB9\x64\x4E\x95\x51\x20\x92\x5D\x89\x4C\x73\x33\x08\x94\x43\x58\x7E\x96\x33\x5B\x91\x8C\x56\x78\x69\x19\xA8\x98\x74\x2D\x6D\x38\x86\xFD\x60\x67\x08\xB1\x99\x92\x68\xA4\x7E\x85\xA4\x5E\x7F\xFA\x7E\x7F\x92\x02\x75\x25\x98\x62\x38\x97\xEC\x30\x50\x3B\x14\x4C\x28\x92\xAC\x86\x9C\xE7\x32\x00\x00\x46\x16\x93\x95\x1F\x2D\x97\x21\xCC\x9D\x7F\x7D\x63\x83\x5F\xA8\x74\x9B\x0B\xFE\x74\x7D\xDA\x7B\x22\x44\x04\x8D\x8A\xD7\x16\x63\x9B\x48\x95\x9C\x9F\xFE\x7E\x9C\x1B\xF4\x6E\x7F\x84\x53\x89\x61\x23\x9B\x98\xEA\x69\x9C\x42\x1C\xAC\x74\xA2\x6E\x3B\x92\xD7\x76\x9E\x7E\x7C\x97\x96\x94\xD6\x89\xA3\x8E\x7F\x9E\x7E\xD3\x42\xA0\x00\x04\xBE\x7E\x3E\xD9\x96\x8C\xD4\x4A\xA0\x80\xEE\x48\x76\x43\xFD\x70\xA2\x6D\x8B\xA0\xA3\x4C\x2B\x92\x41\xFB\x98\x77\x71\x98\x93\x9F\x7B\x93\x23\xE7\x2E\x50\x90\xC5\x42\x22\x75\x1F\xB2\x97\x3C\x89\x9A\x61\x5C\x88\x4E\x4C\x3D\xAA\x78\x15\xD5\x4F\x97\xA0\xBD\x8E\x23\x7F\x82\x2E\x51\xA9\x74\x95\xA9\xA5\x4A\x2C\x88\x88\x87\xC5\x52\xAD\x9B\xF2\x5E\x21\x6A\x03\x33\x59\x59\xD2\x49\x67\x1A\x00\x04\x12\xEF\x84\x62\x80\x20\x93\x9F\xFC\x71\x6F\x9E\x2A\xBE\xAB\x2E\x88\xA8\x75\x23\x54\xAE\x4C\x00\x86\xA7\x07\xA9\xA9\x9E\xBD\xBF\x95\xA5\x46\x4F\xAA\x58\x30\xAD\xA1\x0F\xAE\x59\xA2\x0B\xAB\xAD\x4D\x16\xAA\xAD\x30\x74\xAA\xA3\x77\xBD\xA1\x5E\xE0\x91\x2A\xC4\xBE\xAF\xAB\x4A\x42\xAC\x13\x83\xB2\x89\x69\x5C\xB4\xAF\x89\xBF\xAF\x62\xFE\x71\xA6\xA4\x53\x8F\xB1\x36\xA0\x82\x64\x9E\x2A\xA6\x9C\x89\x7F\x79\xE4\x96\x74\x53\x39\x61\x99\x4C\x43\x9F\xA2\xF1\x8A\x9C\x66\x9C\xA8\x74\x8F\xAB\xA0\x8A\xFD\x83\xA7\x42\xA7\xA4\xB1\xA4\x87\xA0\xB1\x2F\xAC\xB5\x63\x8F\xA2\x88\x89\xB9\xB2\x9E\xE2\x92\xAA\x6D\xE8\x91\xB8\x0E\x79\x63\x6E\xBE\xA8\x20\xF6\x36\xB3\xB8\x21\x86\xBB\xA7\x2C\xB4\x9D\x74\xA3\xB3\x8B\x94\x84\x87\xB8\x4A\x30\xBA\x72\x8C\xB2\xA7\x0F\xB5\xA3\x8D\x00\x96\xB6\x85\x15\xB3\xAE\x6F\xA7\xA9\x77\xB3\xAB\x9C\x00\x57\x6F\xB6\xFE\x82\x4E\xBF\x75\xBF\x81\xB7\x78\xA5\xB1\xD3\x9E\xB2\xB1\xA1\xAC\xBD\xFF\x4D\xB6\xB4\x08\xE8\xB7\xB3\x7B\xB4\xBE\x6B\xFD\x70\xB6\xFC\x9C\x9E\xB2\x08\xC6\x77\x7E\xF2\xA7\xC0\xB3\x80\x00\xAD\x02\x26\xC2\x98\x35\x2C\xB7\x01\xF1\xA9\xC0\x98\xAB\xC2\x66\x8D\xC6\xC3\x07\xEA\xB1\xC2\x71\x6D\xBD\xFF\x6F\xB6\xB0\x33\x76\xC0\xB4\x0B\xAD\xB7\x4C\xDE\x6D\xC3\x21\xA4\xC3\xC5\xB4\xB9\x76\x6D\xD1\xA8\xB6\xDB\x96\xAB\x22\x58\xAB\x34\x40\x02\x93\xBD\xEE\x99\xA5\xA4\xFC\x58\xB4\x1F\xD0\xC3\xAC\x2D\xC2\xAC\xC5\x00\x14\x79\x09\x71\xAB\xCB\xA1\xB4\x96\x93\x20\xC6\xC7\x2B\xDD\xA5\xCD\x9A\x27\xC8\x9E\xE5\x9C\x42\x88\x80\xC9\xCC\x29\x68\xC0\xCD\xFD\xA6\xC4\x25\x84\xC2\xBC\x3C\xE5\xC2\x4A\x31\xDB\xC7\x8C\xAC\x7E\xC0\x7A\x98\xC7\x97\x00\x8C\xB9\x69\xBD\xC2\x2D\x1F\xD9\xC2\xBA\xF5\xAF\xB5\x75\x91\xB5\xCE\x22\x4A\xCE\xCA\xE7\x97\xD1\x9C\xEE\x24\x93\xF0\x84\x25\xCA\x9B\xCC\x29\x79\xDE\x64\x81\xF3\xBF\xA1\xBD\xC9\xA0\x44\x49\x92\xC3\xA1\x45\xE7\xD0\xB9\x22\xAA\xD5\x90\xD3\xB4\xA7\x49\xF9\xB8\xD3\x5D\xC9\xAF\x91\xF4\xAF\x4E\xB2\x95\xD6\x23\x4F\xC3\xA9\x56\xD1\x21\x78\x84\x08\xAA\xC5\x97\xB8\xCA\x4E\xA7\xBD\x96\x0B\xD4\x90\x64\x05\xCC\xD1\x54\x47\x90\x01\xAA\x6E\xC4\x8C\xA8\xAE\x98\x97\x22\xB1\x9A\x57\xE0\xA0\xB5\xD8\x90\x8A\x75\x81\xC7\xB5\x15\x53\x5D\xCD\xA3\x79\x74\xBA\x9C\x7B\xDD\x61\xE3\x94\x21\xC7\xDD\x70\x97\xE1\xA9\xBA\xDC\x8C\xDE\xA9\x37\xC2\xC0\xB4\xFD\xC5\xC3\x7C\xD4\xDE\xDA\x63\x99\x69\xB6\xA9\x4B\xDB\x29\x92\x9C\xDB\xF0\xA1\xA6\x02\xDF\xDE\xC2\xD4\x64\xDE\xC2\xCB\xD6\xC3\x1D\xE3\x97\xB5\x60\xF5\x26\x77\x15\x3E\x23\x56\x84\x81\xDF\xD3\xB1\x71\xE2\xF9\xC5\xDA\xBD\xCE\xDD\x54\x8F\x22\x77\xDD\x08\x24\x80\x31\x96\xCF\xE2\x4D",
"\xFA\xB0\x00\x13\xFA\xB8\xAE\x96\xE0\x75\x9A\x27\xE3\xE3\xFE\x71\xDC\x79\xCD\xA3\x9C\xDB\xA2\xE2\xD7\x4E\xC5\xE5\x8A\x19\xE8\xE4\x82\x2A\xE0\xB8\xA1\xD3\x9E\x4E\xAF\xDA\x29\x98\xF8\xB4\xE9\x3D\x34\xE6\xD0\xB7\xE5\x75\x9C\xDD\xA8\xEA\x4A\xF9\x74\xD6\xBF\xE9\xC4\xF4\xBC\x79\x67\x18\xF5\x26\xF3\x03\x27\xE9\x84\xF3\x9E\xDC\xF2\xC3\xA9\xAF\xDE\xC7\xAA\x76\xDF\xCD\xE6\x26\xFF\x75\xD1\xE4\xE6\xEA\xEC\x6B\xD9\x76\x68\xEB\xDF\x56\xE7\xDF\xED\xDE\x76\xE2\xEE\x77\xC5\xED\xDA\xEE\xC9\xD7\xAE\xC1\xC1\x02\x74\xD9\xCC\x5B\x83\xF0\xEF\xA1\xF5\x24\xEB\xDC\xD1\xDC\x8C\x85\xFE\xCE\x24\xC1\x93\x9C\x01\xC0\xEF\xDF\xC4\xE8\xE6\xE2\x55\xF1\xD9\x90\x99\x8D\xF3\x78\x85\x91\x2E\x82\xC6\x7A\xD1\xC2\xF7\xF6\x1F\x88\x59\xA1\x12\x20\xB2\x00\x8A\xF7\x50\x28\x79\x88\x8F\x0B\x89\xC7\x4E\x8A\xA9\x0C\xD3\x83\x86\x11\x92\xBB\xCD\x39\x87\x7B\xFD\x74\x9A\x7F\x8F\x14\x81\xB6\x25\x85\xF7\xE6\x34\xFB\x83\xDB\xCD\x89\xDC\xF1\xB5\x93\x14\x92\x89\x9B\x2B\xA2\xAC\xB2\xB6\x86\xF4\x66\xBF\x82\x22\x2B\x88\xFC\x88\xCA\xFC\x74\xF3\xAB\x82\xC2\xE8\xD0\x9A\x8A\xFD\x67\x42\xAD\x5E\xF6\x86\xE0\xC4\x92\x87\xBC\x7B\x92\xF7\x12\x60\x7C\x57\x55\x50\xB1\x68\x9B\x45\xFA\x46\xCC\x3D\xF7\x70\x3E\xFD\x74\x4A\x7D\xF4\x48\x4C\xD7\x62\x70\xF8\x76\x3E\xFA\x75\x13\x0D\x72\x74\x6F\x43\x21\x62\x50\x72\x40\x6D\x6C\xF9\x6F\x5D\xC2\x4C\x6F\xD2\x69\x60\x6D\x45\x6D\x62\x4A\x4C\x03\x7B\x25\xD1\x7E\x35\x07\x75\x58\x58\x78\x58\xE6\x7F\x7D\xBB\x68\x60\xA7\x55\x6F\x40\x78\x6B\xDC\x59\x74\x6D\x5E\x2A\xD1\x6B\x73\x76\x54\x5C\x69\x32\x82\x0C\x7A\x5E\xF3\x5C\x42\x3A\x65\x50\x23\x88\x83\xB2\x6A\x61\x43\x68\x34\xB0\x7E\x3F\xB6\x53\x67\x98\x7F\x6B\x27\x69\x78\x7F\x60\x66\x73\x3C\x67\x9F\x6F\x79\x08\x61\x68\x0C\x64\x68\x35\x66\x68\x16\x69\x68\xA4\x55\x50\x85\x64\x3E\x87\x60\x58\x90\x6B\x61\x44\x66\x6B\x1F\x6A\x78\x35\x1A\x82\x79\x14\x7A\xF0\x76\x2B\xCE\x22\x10\xE4\x12\x16\xA5\x2D\x28\x23\x20\x1E\x10\x8B\x57\x5B\x5F\x70\xF9\x69\x1C\x16\x02\x32\xE8\x15\x5B\xB8\x6B\x22\xB6\x59\x1C\x18\x0A\x87\x72\x8A\x75\xDF\x6B\x86\x58\x35\x1E\x4A\x19\x1C\x1A\x02\x88\xD6\x19\x77\x7D\x76\x88\x6D\x86\x1E\x79\x2C\x01\x8C\x85\x1D\x23\x61\x60\x45\x21\x60\xC9\x1E\x01\x95\x84\x1D\x1C\x08\x2F\xAE\x19\x10\xC9\x19\x19\x70\x85\x8A\x81\x2D\x1B\x09\x16\x88\xA0\x86\x8A\xAB\x86\x88\xC9\x1B\x22\x25\x86\x88\xD4\x7F\x48\x68\x82\x7C\x12\x15\x8A\x25\x21\x7E\xB6\x29\x1C\xA1\x7A\x8B\xDF\x13\x1A\x2B\x2B\x8A\xA5\x8D\x8A\x70\x80\x8B\xDF\x6B\x22\xEA\x70\x44\x4A\x1D\x8B\x69\x83\x14\xB8\x8A\x11\xB2\x77\x8B\xA8\x13\x4E\xD1\x81\x8A\x02\x13\x1F\x1A\x12\x8C\x70\x84\x8C\x8D\x26\x8C\x4A\x50\x89\x34\x24\x43\xCC\x86\x8B\xA6\x89\x8B\xCD\x82\x8D\x8E\x35\x8B\xF6\x38\x8E\x09\x13\x1A\xA4\x3C\x10\xDA\x8D\x28\xAB\x84\x8A\xF1\x2C\x10\xF9\x70\x22\x78\x2C\x8B\xEA\x87\x42\xA5\x85\x24\xFD\x77\x1F\xF0\x1A\x8F\xD4\x8E\x8B\x12\x18\x8A\xD7\x8C\x64\x03\x11\x8F\x89\x23\x8F\x70\x88\x23\x08\x88\x8F\x35\x12\x90\x52\x55\x8D\xFD\x8E\x26\x35\x1D\x80\x72\x22\x91\xB8\x54\x91\x06\x96\x8D\xDE\x26\x8A\x8D\x2D\x91\xFF\x0C\x8D\x89\x29\x19\x5C\x30\x8F\xF0\x2C\x10\x27\x90\x92\x03\x13\x8E\xEB\x8F\x91\x2C\x91\x28\x4B\x7F\x6D\x31\x99\x1C\x22\x99\x19\x16\x25\x93\x09\x15\x38\xAF\x1B\x8A\x2B\x23\x8A\x1A\x15\x01\xD9\x89\x92\x08\x12\x94\x3A\x93\x93\x4A\x54\x8F\xE0\x2A\x11\x25\x89\x1C\x73\x8F\x4B\x23\x94\x94\x85\x29\x19\x88\x78\x92\x18\x1A\x11\x55\x95\x93\x48\x97\x50\x0A\x94\x10\x2B\x21\x5D\x4E\x9E\x72\xF2\x41\x95\x57\x9D\x28\x5E\x23\x94\x65\x98\x10\x5B\x55\x91\x3E\x5F\x6D\x5D\x9C\x1C\x1E\x29\x83\x61\x9D\x73\xB8\x69\x28\x37\x93\x8D\x35\x9A\x94\x89\x25\x87\x48\x87\x5A\x73\x92\x55\xA7\x54\x96\x28\x1B\x8A\x77\x60\x94\x0C\x1E\x74\x03\x1C\x93\x2C\x9C\x97\x64\x86\x20\x16\x6F\x97\x23\x79\x6F\x45\x28\x98\x20\x9F\x94\x66\x2F\x96\x02\x15\x24\x5D\x8B\x5A\xC9\x17\x89\x48\x82\x98\x04\x15\x98\x1A\x19\x19\xEF\x88\x10\x8A\x90\x92\x8C\x9B\x84\x8E\x97\x87\x52\x9A\x6B\xA7\x55\x24\xA5\x91\x93\x96\x92\x16\x98\x9C\x73\x08\x1B\x99\xA1\x5D\x99\x4A\x86\x79\x3A\x92\x92\x63\x72\x10\xBF\x9A\x93\xED\x8F\x13\x5B\x5B\x96\xC2\x97\x9C\xA6\x82\x92\x8F\x30\x79\xC8\x9E\x91\xFE\x1A\x11\xB1\x9D\x9C\x28\x13\x1A\x99\x18\x90\x20\x9A\x97\x85\x2E\x87\x75\x9D\x9A\x5D\x76\x5B\xA0\x99\x10\xAB\x8B\x76\x81\x29\x19\x1D\x0A\x2B\xC2\x9A\x9D\x49\x70\x99",
"\x2B\x89\x74\x45\x25\x9E\x47\x92\x96\xEA\x47\x9A\xC8\x9E\x88\x6D\x7F\x9D\x02\x1E\x8A\xA3\x9A\x11\x2B\x94\x10\xF2\x95\x8A\xE8\x9F\x72\xEA\x9D\x9D\xB8\x65\x24\xFB\x9C\x92\x7C\x89\x74\xFD\x92\x9C\x5B\x9B\x4F\xA5\x82\x92\xAA\x82\x9C\x86\x8B\x22\xC6\x9D\x28\x07\xAF\x72\x2B\x25\xA0\x95\x94\x88\xDF\x85\x8C\x4C\x95\x88\x92\x26\x7C\xCB\x8B\x8F\x86\x4F\x8C\x0C\x14\x91\x78\x9B\x91\x04\x9E\x9C\xC1\x80\xA1\x1A\x12\xA1\x0A\xA0\x9F\x1C\x27\xA1\x2F\xAD\x96\x1B\xAD\x8D\x1D\xAA\x54\xC8\x85\x45\x21\xA3\x90\xE7\x85\x8E\xD0\x89\xA2\x1A\x9A\x6B\xD5\x82\x92\x45\x25\x9B\xC9\x11\xA1\x1A\x13\xA1\x89\x25\xA1\xF2\x42\xA3\xEF\x94\xA3\x07\x58\x9F\x4B\x98\x26\x1E\xAE\x2B\x21\x42\x11\x2E\x9C\x8F\x0D\x9F\xA3\x3D\xA1\xA4\x5D\x73\xA4\xA3\x16\x21\x94\x9C\x8A\x2D\xA9\xA4\x33\xA2\x73\x49\x7E\xA4\x5A\x9A\xA1\x07\x5E\x9C\x77\x69\x95\x31\x9E\x93\x66\xAF\xA4\x68\xA6\xA1\xFA\x97\xA6\x4F\x74\x93\xD7\x8E\x8E\x68\x95\x93\x48\xAC\x10\x4A\xA5\x28\x4C\xAA\x4E\x6A\xA2\x9B\x6C\xAB\x4F\xD8\x9F\x2C\xF6\x8F\x90\x77\x21\x91\x27\xA2\xA4\x40\xA0\x87\xFE\x8E\x3E\x00\x98\x1C\x8F\xAF\xA5\x29\xA2\x92\xD6\x97\x2F\x2C\xA3\xA5\x6A\x98\xA7\xEB\x96\xA7\x2A\x90\xAA\x5D\x78\x75\x89\xA2\x10\x0E\x9A\x23\x10\x9E\x11\x5E\xAF\x7E\xE4\x8C\x96\x08\x1E\x46\xDB\x1E\x80\xAD\xA1\x80\x9B\x3E\x9C\x99\x16\x39\x3A\x97\xAA\x79\x29\x89\x48\x8A\x9B\x47\x8D\x98\x05\x1B\x8A\xF6\x9A\x27\x70\x84\x9E\xE6\x94\xA7\x60\x22\xAC\xC0\xAE\x6B\xC2\xAD\x9E\xC2\x9E\x99\xC2\xA9\xA0\x3A\x94\x9F\x5C\x65\xAC\x52\xAD\x37\x77\xAC\x10\xD4\xAB\xA4\xD0\x2F\xAB\xF5\x8E\xAC\xAA\x96\x9B\x04\x18\xA1\x3E\xA1\xAC\xE3\xAD\xAD\x86\xA0\xA5\x0C\xA8\x9C\x9A\xAA\x11\x13\x02\x9C\x72\xAC\x10\xD1\x90\x92\xD2\xA3\xAE\xBC\xA6\x88\xDA\x69\x88\xDC\x94\x85\xAC\x91\x92\xD4\x9A\x11\x14\x02\x9D\xEE\xA3\x1A\xCB\x94\xB0\x36\x93\x1A\x9B\xA1\xAF\x3A\x93\xAF\x08\x13\xA6\x24\xA2\xAE\x96\x79\xAF\x1A\x1B\xAF\x6F\x89\x96\x91\x90\x64\xAF\x13\x1A\x0F\xAA\x93\x7F\xA8\x10\x70\xA6\xA0\x30\xAE\x16\x85\xA2\xB2\xEC\xA9\x4D\xD9\xAE\x95\x37\xA1\xA5\x1F\xA3\x41\x3B\xA3\x91\x91\xAD\x28\xE6\x8F\xAA\x97\xAE\xAA\x2F\x92\x92\x2B\xAE\xB1\x65\xAC\x10\x21\xB9\xA1\x74\x99\xA6\xDB\xAB\xA6\x27\xBC\x3F\x29\xB0\x97\x54\xA8\xA3\xAA\x2A\xA3\x3D\x19\xA5\x23\xAB\xA5\x25\xA1\xB3\x08\x1C\xB4\xA6\x74\xA4\x7D\xA1\x93\x1F\xB4\x10\x3D\xB6\x8A\x83\xA1\xA3\x41\xBB\xAE\x52\x58\x75\x45\xBD\x30\x2B\xBB\x4F\xE0\x87\xA5\xB7\x50\xA9\x5D\xAE\xB4\x08\x16\xA2\xE9\x8C\xA3\xE4\x82\x92\x62\xA2\xAF\x3B\xB0\xB2\xA4\xA8\x74\xA2\xA8\x10\xE6\xA0\xAB\x79\xAA\x54\x6E\xA8\x95\x72\xBE\xA9\x58\xB5\xB7\x70\x67\xB7\xE5\xA2\xB8\x5E\x7C\x26\xA3\x11\x9C\xC1\x9D\x9C\x22\x95\xAF\x9C\xAA\xB3\x80\xB3\x10\x59\xBA\xB7\xA1\xAD\xA4\x5D\xB6\xB2\x5F\xBF\x6D\xBC\xA9\xAA\x76\x28\x3E\x8E\xAD\xB6\x30\xB9\xB6\x14\xA3\x23\xB8\x15\xA9\x15\x15\xAB\xD9\x7B\x39\xEF\xA6\x95\x7E\xA3\xB7\x81\xBA\xAC\x95\xB4\xA8\x97\xBE\xB3\x99\xB9\x94\x6A\xB4\x10\xF7\x8D\xA8\xAC\xA5\xB3\xB6\xAC\x3B\x94\xB2\x10\xB2\xA1\x27\x25\x18\xBA\x6C\xB7\x9C\x22\x90\x79\x46\x98\xB0\x35\x9E\xA0\x55\xBC\x92\x57\xB3\x10\xC9\xBE\xB5\x19\xBB\x57\x25\xB4\xBB\x7B\xBC\xB2\x36\xA7\xB4\xD8\xB8\x10\xB3\x8F\xB2\x28\xA2\xBA\x89\x23\xB3\x2F\x94\xBC\x99\xA0\x8C\xCD\xB0\x92\xCF\xB2\x10\xD1\xB8\xB9\xD3\xBF\x4B\xD5\xBA\xB5\x87\xA8\xB2\x1C\xAA\xBD\xFB\x49\xA3\xEB\x7E\xBD\x68\xB4\xB3\x32\xBC\xA5\xFA\xB1\xB5\x22\xA3\xB5\xA3\x15\xA4\x9D\xA8\x10\x2B\x2B\xBE\xD6\xBE\x9A\x16\x6F\xBE\xBF\xBE\x5C\x64\xB3\xBF\x08\x11\x8B\xA4\xBE\x7A\x67\xB8\xA9\xE0\xB5\x28\xE2\xBA\xA5\xA0\xBF\xBD\x6F\xB1\xA6\x1A\x10\xB1\xDB\x8E\xBA\xD0\xB6\xB8\xE5\x63\xBB\xF0\xB3\xB4\x89\x82\x92\x6F\xAF\xB7\x04\xC1\x94\x22\xC9\xC0\x24\xCB\xC0\x66\x73\x9C\x53\x1E\xB8\x46\xAA\x11\xE9\xB0\x00\x06\xC5\xC2\x80\x9E\xC2\xA3\xA0\xBB\xA5\xAA\xB9\xB7\xB3\x10\xB9\xBE\xB9\xBB\xB9\xC1\xF9\xB3\xBE\x92\xA1\xC1\xFE\x76\xA9\x46\xC4\xC1\x1B\xCF\x13\x9B\xA5\xC3\xCD\x20\xC2\xEA\xBD\xC2\xF9\x6A\xC0\x49\xC6\xC2\xB9\x2B\xBF\x8B\xAA\xAA\xBA\xB9\x27\x52\xB7\xAB\x59\xC1\xAB\x17\x93\xAB\x19\x9C\xBB\xA9\xBC\x3B\x22\x99\x1C\x17\x0A\xBC\x08\xBB\xBA\x08\x1C\xB0\x79\x99\x9F\x8D\x2A\xAF\x04\x7C\xAF\x18\xB8\xC0\xF9\x6B\xC6\x1A\x19\x01\x6E\xC2\x9C\x28\xCE\xB7\x7F\xC2\xC3\x28\x19\x1C\x79\xB3\xC8\x09\xBF\x13\x1D\xB5\x93\xF2\x98\xC5\xA3\xBA\xC5\xEF\x29\xBD\x0F\xC5\xA5\xDC",
"\xB0\xA2\x4B\xBF\xBF\x62\xCC\xC5\x6B\xB0\xB5\x04\x11\xC6\x6A\xC6\xBE\xAC\xB1\x93\x8D\xCF\xC2\x63\xC7\xBD\x0D\xC2\xC9\x04\x15\x82\xF6\xBA\x8C\x97\xCE\xB6\x48\xCA\xC9\x04\x15\xBC\x9D\xC8\xC9\x9F\xCF\x13\x02\xCA\x93\xA3\xCD\xC3\x42\xB5\xBB\xDB\xB9\x9D\x63\xB2\xBF\x56\xA2\xC1\x9E\xCB\x8B\x41\xC9\x1D\x9C\xCD\x92\xB4\xC6\x2B\x70\xBD\xC1\xC2\x9E\x37\xA4\xCF\xC8\xBC\xCC\xA0\x81\xCC\xB3\xCD\xC4\xC5\x5B\x36\xB8\x58\x74\xC8\xAF\x14\xC3\xC2\x99\xCB\x78\xB8\xCD\x40\xC0\xCB\x42\xCC\xA8\x44\xC0\xC6\xC9\xCE\x8C\xA5\xC3\x10\xFF\x86\x23\xA7\xB8\xC6\x60\xA0\xC5\xE7\xB6\x8A\xDE\xC5\xB8\x3E\xCC\xC0\xD9\x4B\xB9\x74\x24\xCE\x76\x24\xBE\x15\xC2\x93\x16\x93\x2A\xC2\xB6\xCE\xAE\xC7\x42\x7C\xCC\x10\xEE\x98\xC8\x0D\xAC\xC1\x87\x95\xCD\x91\xB2\x10\x07\xD1\x93\xD6\xA3\x54\x7D\xB4\xCD\xBB\xA6\xCD\x0F\xDC\x92\x11\xDF\xB9\x7B\xAF\x13\xC9\x1A\x32\x08\xD9\xD0\x3F\x11\xB7\x1F\xD3\xD2\xC7\x90",
};

			void JsonGetParserBuffer(vl::stream::MemoryStream& stream)
			{
				vl::stream::MemoryStream compressedStream;
				for (vint i = 0; i < parserBufferRows; i++)
				{
					vint size = i == parserBufferRows - 1 ? parserBufferRemain : parserBufferBlock;
					compressedStream.Write((void*)parserBuffer[i], size);
				}
				compressedStream.SeekFromBegin(0);
				vl::stream::LzwDecoder decoder;
				vl::stream::DecoderStream decoderStream(compressedStream, decoder);
				vl::collections::Array<vl::vuint8_t> buffer(65536);
				while (true)
				{
					vl::vint size = decoderStream.Read(&buffer[0], 65536);
					if (size == 0) break;
					stream.Write(&buffer[0], size);
				}
				stream.SeekFromBegin(0);
			}
/***********************************************************************
Unescaping Function Foward Declarations
***********************************************************************/

			extern void JsonUnescapingString(vl::parsing::ParsingToken& value, const vl::collections::List<vl::regex::RegexToken>& tokens);

/***********************************************************************
Parsing Tree Conversion Driver Implementation
***********************************************************************/

			class JsonTreeConverter : public vl::parsing::ParsingTreeConverter
			{
			public:
				using vl::parsing::ParsingTreeConverter::SetMember;

				bool SetMember(JsonLiteral::JsonValue& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
				{
					vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
					if(token)
					{
						if(token->GetValue()==L"True") { member=JsonLiteral::JsonValue::True; return true; }
						else if(token->GetValue()==L"False") { member=JsonLiteral::JsonValue::False; return true; }
						else if(token->GetValue()==L"Null") { member=JsonLiteral::JsonValue::Null; return true; }
						else { member=JsonLiteral::JsonValue::True; return false; }
					}
					member=JsonLiteral::JsonValue::True;
					return false;
				}

				void Fill(vl::Ptr<JsonNode> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
				}

				void Fill(vl::Ptr<JsonLiteral> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->value, obj->GetMember(L"value"), tokens);
				}

				void Fill(vl::Ptr<JsonString> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					if(SetMember(tree->content, obj->GetMember(L"content"), tokens))
					{
						JsonUnescapingString(tree->content, tokens);
					}
				}

				void Fill(vl::Ptr<JsonNumber> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->content, obj->GetMember(L"content"), tokens);
				}

				void Fill(vl::Ptr<JsonArray> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->items, obj->GetMember(L"items"), tokens);
				}

				void Fill(vl::Ptr<JsonObjectField> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					if(SetMember(tree->name, obj->GetMember(L"name"), tokens))
					{
						JsonUnescapingString(tree->name, tokens);
					}
					SetMember(tree->value, obj->GetMember(L"value"), tokens);
				}

				void Fill(vl::Ptr<JsonObject> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->fields, obj->GetMember(L"fields"), tokens);
				}

				vl::Ptr<vl::parsing::ParsingTreeCustomBase> ConvertClass(vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)override
				{
					if(obj->GetType()==L"Literal")
					{
						vl::Ptr<JsonLiteral> tree = new JsonLiteral;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"String")
					{
						vl::Ptr<JsonString> tree = new JsonString;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Number")
					{
						vl::Ptr<JsonNumber> tree = new JsonNumber;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Array")
					{
						vl::Ptr<JsonArray> tree = new JsonArray;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"ObjectField")
					{
						vl::Ptr<JsonObjectField> tree = new JsonObjectField;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Object")
					{
						vl::Ptr<JsonObject> tree = new JsonObject;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else 
						return 0;
				}
			};

			vl::Ptr<vl::parsing::ParsingTreeCustomBase> JsonConvertParsingTreeNode(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				JsonTreeConverter converter;
				vl::Ptr<vl::parsing::ParsingTreeCustomBase> tree;
				converter.SetMember(tree, node, tokens);
				return tree;
			}

/***********************************************************************
Parsing Tree Conversion Implementation
***********************************************************************/

			vl::Ptr<JsonLiteral> JsonLiteral::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonLiteral>();
			}

			vl::Ptr<JsonString> JsonString::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonString>();
			}

			vl::Ptr<JsonNumber> JsonNumber::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonNumber>();
			}

			vl::Ptr<JsonArray> JsonArray::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonArray>();
			}

			vl::Ptr<JsonObjectField> JsonObjectField::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonObjectField>();
			}

			vl::Ptr<JsonObject> JsonObject::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonObject>();
			}

/***********************************************************************
Visitor Pattern Implementation
***********************************************************************/

			void JsonLiteral::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void JsonString::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void JsonNumber::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void JsonArray::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void JsonObjectField::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void JsonObject::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

/***********************************************************************
Parser Function
***********************************************************************/

			vl::Ptr<vl::parsing::ParsingTreeNode> JsonParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"JRoot");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				return node;
			}

			vl::Ptr<vl::parsing::ParsingTreeNode> JsonParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return JsonParseAsParsingTreeNode(input, table, errors, codeIndex);
			}

			vl::Ptr<JsonNode> JsonParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"JRoot");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				if(node && errors.Count()==0)
				{
					return JsonConvertParsingTreeNode(node, state.GetTokens()).Cast<JsonNode>();
				}
				return 0;
			}

			vl::Ptr<JsonNode> JsonParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return JsonParse(input, table, errors, codeIndex);
			}

/***********************************************************************
Table Generation
***********************************************************************/

			vl::Ptr<vl::parsing::tabling::ParsingTable> JsonLoadTable()
			{
				vl::stream::MemoryStream stream;
				JsonGetParserBuffer(stream);
				vl::Ptr<vl::parsing::tabling::ParsingTable> table=new vl::parsing::tabling::ParsingTable(stream);
				table->Initialize();
				return table;
			}

		}
	}
}
namespace vl
{
	namespace reflection
	{
		namespace description
		{
#ifndef VCZH_DEBUG_NO_REFLECTION
			using namespace vl::parsing::json;

			IMPL_TYPE_INFO_RENAME(vl::parsing::json::JsonNode, system::JsonNode)
			IMPL_TYPE_INFO_RENAME(vl::parsing::json::JsonLiteral, system::JsonLiteral)
			IMPL_TYPE_INFO_RENAME(vl::parsing::json::JsonLiteral::JsonValue, system::JsonLiteral::JsonValue)
			IMPL_TYPE_INFO_RENAME(vl::parsing::json::JsonString, system::JsonString)
			IMPL_TYPE_INFO_RENAME(vl::parsing::json::JsonNumber, system::JsonNumber)
			IMPL_TYPE_INFO_RENAME(vl::parsing::json::JsonArray, system::JsonArray)
			IMPL_TYPE_INFO_RENAME(vl::parsing::json::JsonObjectField, system::JsonObjectField)
			IMPL_TYPE_INFO_RENAME(vl::parsing::json::JsonObject, system::JsonObject)
			IMPL_TYPE_INFO_RENAME(vl::parsing::json::JsonNode::IVisitor, system::JsonNode::IVisitor)

			BEGIN_CLASS_MEMBER(JsonNode)
				CLASS_MEMBER_METHOD(Accept, {L"visitor"})

			END_CLASS_MEMBER(JsonNode)

			BEGIN_CLASS_MEMBER(JsonLiteral)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonLiteral>(), NO_PARAMETER)


				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(JsonLiteral)

			BEGIN_ENUM_ITEM(JsonLiteral::JsonValue)
				ENUM_ITEM_NAMESPACE(JsonLiteral::JsonValue)
				ENUM_NAMESPACE_ITEM(True)
				ENUM_NAMESPACE_ITEM(False)
				ENUM_NAMESPACE_ITEM(Null)
			END_ENUM_ITEM(JsonLiteral::JsonValue)

			BEGIN_CLASS_MEMBER(JsonString)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonString>(), NO_PARAMETER)

				CLASS_MEMBER_EXTERNALMETHOD(get_content, NO_PARAMETER, vl::WString(JsonString::*)(), [](JsonString* node){ return node->content.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_content, {L"value"}, void(JsonString::*)(const vl::WString&), [](JsonString* node, const vl::WString& value){ node->content.value = value; })

				CLASS_MEMBER_PROPERTY(content, get_content, set_content)
			END_CLASS_MEMBER(JsonString)

			BEGIN_CLASS_MEMBER(JsonNumber)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonNumber>(), NO_PARAMETER)

				CLASS_MEMBER_EXTERNALMETHOD(get_content, NO_PARAMETER, vl::WString(JsonNumber::*)(), [](JsonNumber* node){ return node->content.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_content, {L"value"}, void(JsonNumber::*)(const vl::WString&), [](JsonNumber* node, const vl::WString& value){ node->content.value = value; })

				CLASS_MEMBER_PROPERTY(content, get_content, set_content)
			END_CLASS_MEMBER(JsonNumber)

			BEGIN_CLASS_MEMBER(JsonArray)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonArray>(), NO_PARAMETER)


				CLASS_MEMBER_FIELD(items)
			END_CLASS_MEMBER(JsonArray)

			BEGIN_CLASS_MEMBER(JsonObjectField)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonObjectField>(), NO_PARAMETER)

				CLASS_MEMBER_EXTERNALMETHOD(get_name, NO_PARAMETER, vl::WString(JsonObjectField::*)(), [](JsonObjectField* node){ return node->name.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_name, {L"value"}, void(JsonObjectField::*)(const vl::WString&), [](JsonObjectField* node, const vl::WString& value){ node->name.value = value; })

				CLASS_MEMBER_PROPERTY(name, get_name, set_name)
				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(JsonObjectField)

			BEGIN_CLASS_MEMBER(JsonObject)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonObject>(), NO_PARAMETER)


				CLASS_MEMBER_FIELD(fields)
			END_CLASS_MEMBER(JsonObject)

			BEGIN_INTERFACE_MEMBER(JsonNode::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonLiteral* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonString* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonNumber* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonArray* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonObjectField* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonObject* node))
			END_INTERFACE_MEMBER(JsonNode)

			class JsonTypeLoader : public vl::Object, public ITypeLoader
			{
			public:
				void Load(ITypeManager* manager)
				{
					ADD_TYPE_INFO(vl::parsing::json::JsonNode)
					ADD_TYPE_INFO(vl::parsing::json::JsonLiteral)
					ADD_TYPE_INFO(vl::parsing::json::JsonLiteral::JsonValue)
					ADD_TYPE_INFO(vl::parsing::json::JsonString)
					ADD_TYPE_INFO(vl::parsing::json::JsonNumber)
					ADD_TYPE_INFO(vl::parsing::json::JsonArray)
					ADD_TYPE_INFO(vl::parsing::json::JsonObjectField)
					ADD_TYPE_INFO(vl::parsing::json::JsonObject)
					ADD_TYPE_INFO(vl::parsing::json::JsonNode::IVisitor)
				}

				void Unload(ITypeManager* manager)
				{
				}
			};
#endif

			bool JsonLoadTypes()
			{
#ifndef VCZH_DEBUG_NO_REFLECTION
				ITypeManager* manager=GetGlobalTypeManager();
				if(manager)
				{
					Ptr<ITypeLoader> loader=new JsonTypeLoader;
					return manager->AddTypeLoader(loader);
				}
#endif
				return false;
			}
		}
	}
}
