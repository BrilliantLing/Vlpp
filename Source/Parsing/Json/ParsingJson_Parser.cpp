#include "ParsingJson_Parser.h"

namespace vl
{
	namespace parsing
	{
		namespace json
		{
/***********************************************************************
ParserText
***********************************************************************/

const wchar_t parserTextBuffer[] = 
L"\r\n" L""
L"\r\n" L"class Node"
L"\r\n" L"{"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Literal:Node"
L"\r\n" L"{"
L"\r\n" L"\tenum Value"
L"\r\n" L"\t{"
L"\r\n" L"\t\tTrue,"
L"\r\n" L"\t\tFalse,"
L"\r\n" L"\t\tNull,"
L"\r\n" L"\t}"
L"\r\n" L""
L"\r\n" L"\tValue value;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class String:Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken content(JsonUnescapingString)\t\t\t\t@Color(\"String\");"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Number:Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken content;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Array:Node"
L"\r\n" L"{"
L"\r\n" L"\tNode[] items;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class ObjectField:Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken name(JsonUnescapingString)\t\t\t\t@Color(\"AttName\");"
L"\r\n" L"\tNode value;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Object:Node"
L"\r\n" L"{"
L"\r\n" L"\tObjectField[] fields;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"token TRUEVALUE = \"true\"\t\t\t\t\t\t\t@Color(\"Keyword\");"
L"\r\n" L"token FALSEVALUE = \"false\"\t\t\t\t\t\t\t@Color(\"Keyword\");"
L"\r\n" L"token NULLVALUE = \"null\"\t\t\t\t\t\t\t@Color(\"Keyword\");"
L"\r\n" L"token OBJOPEN = \"\\{\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token OBJCLOSE = \"\\}\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token ARROPEN = \"\\[\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token ARRCLOSE = \"\\]\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token COMMA = \",\";"
L"\r\n" L"token COLON = \":\";"
L"\r\n" L"token NUMBER = \"[\\-]?\\d+(.\\d+)?([eE][+\\-]?\\d+)?\"\t@Color(\"Number\");"
L"\r\n" L"token STRING = \"\"\"([^\\\\\"\"]|\\\\[^u]|\\\\u\\d{4})*\"\"\"\t\t@ContextColor();"
L"\r\n" L""
L"\r\n" L"discardtoken SPACE = \"\\s+\";"
L"\r\n" L""
L"\r\n" L"rule Node JLiteral"
L"\r\n" L"\t= STRING:content as String"
L"\r\n" L"\t= NUMBER:content as Number"
L"\r\n" L"\t= \"true\" as Literal with {value = \"True\"}"
L"\r\n" L"\t= \"false\" as Literal with {value = \"False\"}"
L"\r\n" L"\t= \"null\" as Literal with {value = \"Null\"}"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule ObjectField JField"
L"\r\n" L"\t= STRING:name \":\" JValue:value as ObjectField"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Object JObject"
L"\r\n" L"\t= \"{\" [JField:fields {\",\" JField:fields} ] \"}\" as Object"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Array JArray"
L"\r\n" L"\t= \"[\" [JValue:items {\",\" JValue:items} ] \"]\" as Array"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Node JValue"
L"\r\n" L"\t= !JLiteral"
L"\r\n" L"\t= !JObject"
L"\r\n" L"\t= !JArray"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Node JRoot"
L"\r\n" L"\t= !JObject"
L"\r\n" L"\t= !JArray"
L"\r\n" L"\t;"
;

			vl::WString JsonGetParserTextBuffer()
			{
				return parserTextBuffer;
			}

/***********************************************************************
SerializedTable
***********************************************************************/

const vint parserBufferLength = 4304; // 20568 bytes before compressing
const vint parserBufferBlock = 1024;
const vint parserBufferRemain = 208;
const vint parserBufferRows = 5;
const char* parserBuffer[] = {
"\x00\x0B\x00\x02\x83\x80\x07\x7D\x00\x82\x03\xFF\x45\x08\x82\x83\x20\x01\x37\x00\x6C\x0F\x80\x02\x38\x03\x82\x86\x06\x0C\x80\x13\x20\x04\x38\x8A\x00\x69\x00\x2E\x20\x07\x35\x83\x8A\x84\x0A\x9A\x8E\x90\x82\x88\x89\x8B\x93\x04\x87\x1A\x81\x2D\x8D\x9A\x26\x00\x61\x00\x2D\x20\x05\x36\x92\x8D\x94\x0C\xAB\x91\x93\x8F\x92\x8E\x98\x86\x4B\x3C\x80\x19\x30\x07\x38\xA2\x00\x64\x3E\x8C\x80\xA8\x82\xA1\x97\x8F\x30\x83\x87\xA8\x89\xA5\x9C\xA6\xA7\x2E\xD0\x92\xA8\x9B\x81\xA3\x89\xAB\x45\x8C\x9B\xA4\x8D\xAB\xA5\xA7\xA7\x51\x86\xBF\x85\xB5\xAF\xB3\xA7\xAC\x02\x88\x1A\x82\x23\x8D\x3A\x90\xB1\x39\x95\x8C\xB2\xB3\xAC\xB8\x82\xAB\x77\x9A\xBA\xAC\x8C\xB8\x8A\xBF\x91\x51\x81\xEE\xA4\xC4\xB2\x96\xBB\xB0\x78\x80\x0B\xC8\x8D\xC0\x03\xC6\xC0\x1F\x83\xD9\xD4\xA7\xC7\xC8\xAC\xC5\x7B\xFD\xBF\xB1\xC1\xD3\xB0\x82\xD2\x03\x88\xD8\xDA\x89\x8C\x87\x9A\xBF\x3B\xE2\x0A\xB5\x84\xCF\xD4\x06\xCB\x10\xA3\x9E\x9D\x98\x3D\x9A\xD9\x8F\x1A\x80\x2B\xA3\x86\xC3\x80\x9B\x8A\x15\xB9\x83\xDF\x74\xED\xEB\x7F\xE5\x02\xCC\x20\x95\x9D\x99\xEB\xA0\xEB\xD6\x84\x1A\x97\x90\x89\xA9\x9E\xF0\xD5\xB5\xC8\x97\xDA\x98\x02\xDD\xEE\x05\xE8\xFF\x6A\xF4\x87\x26\xF6\x00\x6A\x4A\xA3\x35\x92\xFF\x7D\x80\x86\xF6\x7A\x69\x7D\x4F\xFB\x5E\x46\x13\x76\x3D\x52\x41\x5E\x7C\xF4\x43\x4C\x46\x47\x15\x61\x43\x49\x49\xFD\x58\x70\x01\x73\x02\x4F\x7F\x46\x74\x17\x9A\x41\x4B\x70\xED\x73\x11\x7C\x7A\x16\x9A\x7F\x87\x6E\x38\x43\x58\x84\x00\x76\x29\x82\x46\x5F\xE7\x4C\x83\x7A\x67\xED\x6F\x7F\x46\x85\xFB\x41\x7C\x77\x5F\x1E\x7D\x7D\x82\x40\x01\xB8\x7A\x7D\x4D\x3F\x80\x06\x18\x82\x43\x51\x52\x89\x7F\xFF\x48\x41\x93\x80\x00\x05\x80\x03\x81\x21\x49\x82\x5A\x78\x0C\x63\x49\x4F\x4E\x3D\x59\x6D\x91\x7D\xF7\x50\x92\x94\x95\x4A\x4A\x8D\x84\x43\x2D\xB9\x4F\x8A\x52\x3E\x9A\x4F\x83\x47\x12\xA4\x4A\x72\x46\x39\xBC\x8A\x52\x70\xC9\x40\x0F\x02\x46\x24\x1A\x4B\x9D\x9E\x80\x89\x4D\x7E\x7C\x81\xA8\x43\xA0\x7A\x85\xAF\x67\xA0\x78\x89\x82\xAB\xA1\x75\x09\x1A\x44\x14\x00\x52\x00\x05\x14\x00\x45\x00\x06\x14\x00\x34\x5A\x77\xA5\xA6\x58\x88\x40\x84\x8D\x3D\x49\x72\x02\x46\x0A\x1A\x47\x81\xA7\x1B\x58\xAA\xA4\xA7\x00\x1E\xAE\xAB\x8A\x47\xAA\x90\x02\x88\x5D\x9A\x43\x02\x46\x91\xB6\x66\xA5\xAC\xC0\x9B\xAC\xAB\xA7\x00\x21\xA4\x43\x48\x7E\x52\x42\x47\xA9\x0C\x46\xBA\x56\x46\xF6\x7C\x5A\x10\x00\xF6\x50\x1E\xAB\x4D\xCC\x88\x4C\x14\x00\x7B\x00\x0B\xAC\x43\x2B\x9B\x60\x9A\xB4\x00\x0E\x4A\x76\x7D\x1C\x59\xA9\xB4\x41\xDB\xBD\x15\xB0\x6D\x46\x73\x44\xA7\xBC\xD5\x97\xB0\x03\xBA\x03\x5B\xBB\x17\x99\x08\x56\x82\xBA\x73\xF3\x95\xA6\xB8\xB5\xAD\xAA\xBA\x47\xB6\x5D\x00\x05\x93\xBF\x02\x6B\x8E\x42\x7D\x4D\x00\x01\xC4\x4D\x99\x6C\x03\x9F\x54\xF2\x4E\xC4\xC3\xB9\x00\x37\x49\x66\x0E\x9A\x7F\x42\x8E\xAF\x97\x91\xCC\x5D\xA6\x95\x9F\x0A\x47\xBE\xDB\xAD\x00\x01\xC2\x3F\x00\x0B\xB5\x54\x2B\x00\x08\x08\x00\x2E\x32\xC2\x59\xCD\x29\x00\x01\xCF\xCD\xFB\xBD\x49\xA5\xC2\xFB\xB5\xCD\xCB\xCB\x3E\xFA\xC4\xCC\x00\x3D\xF1\xCD\xAC\x42\x4F\xC4\x45\x90\x47\x93\x95\xA9\x11\xC7\x00\x07\x10\x03\x06\x1A\x62\x06\xCC\x00\xFB\x9E\x1A\xCF\xB6\x5E\xC9\xCC\x1F\xD8\x60\xC0\x02\xDA\x5F\x66\xE8\xDE\x5F\xCC\xDC\x80\x04\x0C\x00\xEE\xBD\xCA\x08\x00\x5E\xE9\xAC\x42\xDE\x08\x59\x6B\x88\x47\xD6\xB4\x4E\x41\xA6\xDF\x9A\xB7\xAC\x00\x35\xDF\x9E\xA0\x78\x7D\x98\x4A\x47\xB4\x1A\x9E\x7C\x50\x04\x8F\xF0\xA0\x75\x8A\x4C\x79\xC5\xA4\x44\x10\x5E\x4F\x9A\x64\x1E\x4A\xE2\x40\x10\x00\x20\x00\x01\x9F\x3C\x00\x00\xE7\x47\x92\xC0\x0E\x0E\xC2\x95\xD1\xE8\xE4\x00\xBF\x4C\x4B\xEB\xE5\x1C\xB9\xCF\xE7\x47\x1E\x7C\xD4\x40\xE9\xA6\xE9\xE7\xEF\x86\x6E\x6F\xE5\x93\xF0\xAD\xCC\xCA\xEA\xE5\xC4\xD9\xE0\x01\x0C\xAE\x8C\x42\xF0\xF3\xAD\xEF\xE0\xCA\xE9\x5E\xFB\xBE\xD4\xF0\x69\xE6\xE3\xB7\xA6\xB6\xB0\x85\xE8\x00\xD7\xDB\x70\x8B\x4E\x22\xA6\xED\xB4\xF6\x00\x16\xCE\xD6\xF7\xAF\xA1\xFA\x52\xE9\xE5\xE7\x8D\x4C\xFA\xE3\xEE\xB6\xE9\xC2\xEC\xC9\xCF\xF9\x8A\xE9\x74\x7B\xEC\x47\x72\x80\x0E\x4A\x78\x79\xB3\x79\x67\x0C\x51\x78\x21\xE9\x72\x74\x43\xD6\x63\x7D\xF6\x78\x63\x7D\x7D\x70\x78\x7C\x43\x22\x7C\xFD\x63\x76\x7F\x10\x63\x7B\x7D\x14\x8E\x7F\xF8\x5F\x7E\x44\x52\x63\x7D\x7E\x3B\x58\x7E\xE9\x7A\x78\x69\xFE\x54\x86\x74\x39\x21\x83\x03\xEE\x24\x75\x03\x80\x5D\x83\xDE\x32\x22\xEF\x03\x23\x5A\x13\x7B\x41\x87\x38\x6F\x78\x00\x7A\x1A\x23",
"\xE9\x7E\x80\x44\x40\x91\x82\xE9\x54\x63\x5F\xAB\x77\x22\x6B\x1B\x86\x75\x9D\x78\x4D\x26\x3C\x70\x87\x70\x4B\x95\x25\x84\x7F\x25\x24\xD2\x4D\x00\x00\xA9\x46\x8A\xF9\x28\x46\x56\x25\x98\x6D\x64\x00\x07\x67\xBC\x51\x81\x4B\x89\x14\x8E\x4E\x57\x81\x80\x7B\x39\x38\x44\x2F\xA0\x88\x00\x62\x98\x85\x09\xE6\x8E\x6B\x51\x62\x7F\x7F\x31\x83\x7F\x11\xE4\x83\x28\xEE\x4E\x2F\x44\x68\x1F\x83\xF8\x69\x49\x83\xF9\x40\x05\x07\x12\x80\x03\xA4\x15\x2F\x8F\xFC\x40\x07\x8B\x61\x8B\x7B\x20\xF0\x35\x8C\xF2\x51\x95\x56\x43\x38\x57\x0B\x80\x82\x91\x31\x9C\x95\x90\xE3\x67\x91\x4D\x09\x9A\x7D\x45\xA5\x82\x83\x8F\x91\x93\x81\x36\x52\x95\xFF\x6E\x58\x93\x78\x9A\x92\x29\xC4\x72\x22\x3E\xBF\x29\x59\x43\x20\x90\x16\xB7\x8F\x87\x12\x86\x93\x8C\xAC\x91\x6E\xE9\x0C\x9B\x4D\x9E\x26\x70\x92\xEC\x6C\x3E\xB2\x23\x9E\x5C\x0B\x53\x5F\x49\x43\x5E\x21\xD4\x3C\x84\x60\x01\x59\x99\x88\xD0\x77\x6A\xF4\x4B\x78\x9A\x02\x75\x26\x97\xDD\x5B\x79\x05\xA3\x83\x4A\x24\x66\x4C\x8D\x47\x55\x49\x92\x43\x90\x84\xAF\x62\x80\x7E\x64\x56\x49\x54\x70\x9E\x9C\xB1\x01\x84\x85\xFC\x74\x82\xBB\x42\x91\x81\x72\xAD\x8E\x23\x04\x93\x84\x53\x0E\x01\x76\xD6\x49\x83\x5E\x9C\x75\x25\xA6\x10\x30\x20\x3E\x79\x90\x81\x10\x83\x7C\xE9\x04\x88\x83\x66\xA1\x66\x76\xF1\x6D\x91\x4F\x39\x60\x7A\x48\xA3\x9C\x84\xF2\x7D\x26\x19\xA1\x0B\x78\x85\x80\x06\x8E\x99\x88\xA6\x48\xAE\x7E\x92\xD3\x6C\xA5\x87\xBB\x80\x88\x4C\x97\xA1\xA4\x8F\xAB\xA4\x9C\x61\x5F\x98\xE9\x2B\x43\x5B\xCD\x53\x26\x23\xD6\x90\xA3\x51\xE0\x90\x01\x12\x05\x8B\x79\x46\xBD\x70\x4D\xE5\x77\xA7\x02\xB4\x87\x92\x77\x93\x79\x54\xE7\x95\xA6\x00\x15\xAE\xA0\x52\x55\x85\xE5\x1B\x9C\x96\x00\x14\x70\xA4\x64\xA0\x8A\xE6\x13\x22\xAB\x89\xA2\x2F\x8B\x0C\x28\x76\x2E\xFA\x8D\x92\xD3\x64\x71\xA9\x60\xB5\x27\x36\x82\x27\x9B\xA0\xA6\x9E\x23\x0A\x80\x02\x38\x8D\x80\xA8\x6F\xBF\xAB\xAA\x91\x89\x9F\x3A\xF8\x9D\x9F\x7D\x9D\xA9\x9E\x65\x5E\x9E\x22\xEC\x77\x9F\xE5\x79\x9B\x9E\xFC\x92\x9E\x99\x7F\x93\x7D\x80\x9E\x6B\xA0\xE3\x61\x92\xE9\x79\xAE\x23\x8D\x95\x77\xB2\x66\x56\x84\x6A\xE2\x24\xA4\x4F\xA7\xA5\x9D\x9A\xA2\x2E\x19\xCC\x86\x6A\xAC\x50\x8D\xAB\x5A\x4D\x3D\x4F\x5C\x7E\x6A\x90\x7F\x7A\xA6\x1E\xAC\x8C\x33\xA6\x81\x8F\xF1\x64\xB0\xB6\x91\xB1\x29\x42\x8E\xA6\x81\x86\xB8\x76\x2D\x39\x72\x04\x00\x0C\x1F\xA8\x8C\x85\x7D\xAB\x13\x9F\x7E\x05\xCB\x7D\xA2\xE2\x9D\xAD\x83\xF8\x7C\x79\x3D\xED\x73\x94\xE0\x9E\xB8\x85\xE7\x63\x98\x40\x91\x9E\x7F\xD0\x83\x9E\xA5\xB8\x8E\x80\x73\xD7\xB5\x7D\xEC\x8B\xB4\xBB\xAF\x8E\x90\x7A\xCA\x2A\x85\x97\x8A\x99\x84\xE5\xBD\xA7\x79\x9C\x89\x84\xF5\x9D\xB4\xBD\xA3\x82\xB6\x55\xCC\x2C\xA3\xFC\xBD\x24\xA1\x20\xBD\xBA\xF8\x6B\xA1\xA2\x8F\x2E\xA9\x2A\xA2\x67\x74\x4F\x92\xCA\x29\xD7\x76\xA8\x76\x20\xAB\xB5\x54\x2A\xBD\xB1\x20\x8B\x80\x64\xAF\xA2\xC4\x62\xD9\x85\x6A\xC1\xB6\xB7\x84\xE3\x79\xB4\x97\x11\x9E\xB6\x76\x9C\xC6\x99\x5D\xA3\xB8\x2C\x8A\xC7\xB8\x15\xC3\xAD\x72\x5B\xBE\x20\x5C\x88\x25\xA8\xB6\xB5\x24\xC2\x4B\xB7\xC3\x1D\xF1\xAC\xA7\x20\xF4\xA7\xC3\x78\xBE\xAF\x41\xFA\x45\x73\xE3\x88\xCD\xAD\xAB\x34\x76\x45\xD3\x77\xB8\x0F\xFE\xBC\x80\x2A\xC4\xC5\x6C\xD1\x21\xBA\xD7\x84\xB3\x5A\x2A\xD3\xB6\x24\xCD\x8F\xC4\x36\xB2\xC6\x91\xBD\xB4\x80\xF7\x66\xB0\x97\xF2\x7A\xC6\x91\x3C\xD2\xCB\x98\x25\xCB\xB9\xE7\x8C\x2E\x86\x2E\xB9\x67\xDC\x19\x5F\xB4\x97\xBE\x92\x7B\xF7\xB4\xCE\x7E\x84\xC9\xBD\x00\xA3\xBA\x84\x73\xC2\xC1\x9D\x8C\xDC\xBE\x03\xFB\x78\xC1\x04\xA3\x7E\x4B\xE0\xC5\xC4\x08\xC4\xC8\xB9\xFA\x81\x8A\x93\xCA\xC9\xC2\xB9\xA8\xCD\xC4\x5E\xD7\xAD\x95\xFA\xCA\xAF\x55\xC6\xB3\xCA\x65\xD4\x11\x75\xDD\x92\x49\xC3\xA8\x9B\x94\xDB\xA7\xD7\x98\xB0\xC6\x74\xC8\xA1\xD2\x44\xE2\xB1\x91\x65\xBA\xD9\xB8\x5E\xC6\x4D\xC4\x9C\xB7\xD0\xFB\x20\xB5\xB9\xD1\xAC\xD2\xC8\x59\xA5\xB1\xAD\xD3\xC7\xD6\xED\xAC\x9A\xC5\x99\xA5\xD9\x00\xA4\x7F\xD1\x00\xD8\xDF\xB1\xC8\xD6\x92\xB2\x82\xA9\xC1\x61\x87\xB9\xCA\xAF\xD2\x4B\x5E\xD2\xD2\x4D\x23\xF2\x6E\xC5\xAF\xBD\xC8\x76\xF1\x66\xDA\xC6\xBB\xD1\xDB\xBF\xD3\xB0\x80\xEA\x96\xDF\x62\xF8\xDB\x9E\xC9\xCD\x84\xB9\x99\xDE\xD9\x74\xC4\x4D\x72\x37\xC6\xAC\xC2\x8E\xC2\xD4\x23\xDE\x75\x26\xA0\x75\xA0\x43\x5C\x76\xD4\x49\xDD\xC0\xC4\x9F\xC9\xE1\xED\x19\xEC\xE0\xDD\x50\xE4\x77\x4B\xC8\x20\xF7\x53\x79\xE0\xE3\x67\xB5\xC4\x67\xBF\xD2\x8A\xD7\xC5\x27\xDD",
"\x55\x21\x74\x1A\x34\xE0\x4F\xE9\xC8\xE2\x82\x04\xD9\xD4\x1B\xF6\xE4\xA8\xF3\x9E\xE2\x8F\x11\xE3\x87\xA3\x63\x7F\xF4\x34\xE4\xA8\xA5\x92\xAF\x4F\x9F\xCE\xC8\xCB\x8F\xEE\xE6\x90\xC0\xEE\xBF\xA6\x75\xE2\x93\xAF\x75\xE8\x27\xD9\xC5\xC8\x15\xC1\x8A\xCB\xAD\xD3\xE2\xA1\xD0\xAE\xE1\x34\xB6\x85\x5A\xA5\x82\x03\xB1\xB9\xA5\x84\x4B\xED\x55\xD3\xAF\xE8\xAB\xAE\xD1\xEC\xA7\x63\xFD\x92\xD8\xE7\xE6\x56\x4F\xFA\xE1\xEE\x43\x3D\xE5\x8A\x6C\xE9\xE7\x81\x23\xE3\xAE\xC5\x9D\x90\xBA\xD3\xD2\x4B\x08\x2E\xD4\xF0\xEE\xCE\xCB\xD6\x9E\x2D\xEF\xA0\xEF\xEC\xCB\xCF\xD4\xA7\xE0\xED\xD0\xDA\x90\x96\xCA\xED\x7B\xF5\x25\x86\xFF\xED\xAE\x83\xDE\x26\xE4\x20\xAE\xA4\xA0\xF3\xBE\x79\x1A\x0C\x84\x20\xF2\xBE\xCF\x8A\x94\x88\xD0\xD3\x79\xD6\xE2\x38\xDB\xBF\xFD\x74\x92\xD9\x00\xC9\xE4\x8D\xE0\xB6\xD2\xC0\xE5\x65\xDC\x19\xA4\xF7\xCB\x27\xFB\xD6\x98\xC5\xD2\xD0\x33\xE8\xF6\xB2\xA8\xDD\xA8\x6D\xAE\xCF\x88\x63\xEF\xC8\xC7\x71\xDF\xB4\xEC\xC6\xD7\xCE\x1C\xF9\xCE\xF3\x3B\xE6\x4E\x58\xE8\xA4\xEF\xA1\x0F\xE8\xA7\x74\xB9\xEC\x00\x52\xB4\x89\xD7\xB8\xED\x97\xCA\xEB\xCD\x6D\xCD\xFC\x8D\x29\xBB\x46\x8A\xA4\x99\x8B\xA8\x71\x4D\x8A\xAC\xB1\xA4\x98\x48\x9B\x8D\x57\xB7\x28\x8C\x35\x95\x55\xFD\x6E\x4F\x7E\x35\x1D\x6C\x58\x38\x1B\xF7\x10\x1F\x3B\x59\x47\x81\x73\x14\xBE\x4E\x47\x4A\x14\x70\xF8\x74\x48\x12\x16\x3A\xAA\x4E\x11\xC9\x40\x42\xD5\x73\x3E\xD0\x44\x41\x93\x46\x42\xB6\x4E\x5F\xF1\x50\x78\xF9\x7D\x49\xF5\x57\x6C\xB4\x4F\x80\xEE\x51\x40\xE7\x79\x4A\xC8\x4A\x6F\x19\x8F\x4C\xB2\x45\x42\xB5\x46\x49\x09\x82\x82\x12\x8B\x7A\x5E\x38\x2C\x43\x12\x11\x10\x8B\x82\x14\x8D\x82\xAD\x4B\x4C\x0C\x70\x83\xD1\x44\x23\xD3\x4F\x81\xAA\x66\x79\x91\x7B\x6E\x9D\x78\x78\x80\x50\x00\xA6\x73\x58\xC7\x7D\x84\x94\x78\x83\xF4\x69\x68\xD9\x72\x16\xFF\x6B\x59\xFA\x66\x4F\xDE\x65\x62\x5B\x82\x59\x2B\x47\x60\xCB\x6D\x7B\xC6\x51\x79\xA6\x5E\x38\xA1\x7F\x7B\x2B\x2E\x52\x8D\x22\x10\x6D\x21\x61\x0C\x7E\x2C\x02\x14\x1E\x62\x15\x2A\x1A\x16\x01\x22\x38\x1E\x9C\x6B\x6B\x19\x6D\x63\x25\x69\x1C\x18\x0B\x87\xE0\x15\x75\x60\x74\x87\x58\x35\x1E\x4A\x19\x1C\x1A\x04\x88\xD6\x13\x77\xE1\x72\x11\x88\x86\x87\xE6\x19\x27\x1C\x0E\x88\xD5\x13\x79\xDF\x45\x24\xC7\x59\x1C\x1E\x08\x89\xD4\x1C\x01\xF8\x2E\x1A\x09\x19\x1C\x99\x1F\x86\xA8\x88\x8A\xBD\x19\x10\xEB\x63\x8A\xA9\x89\x8A\xAB\x80\x87\x88\x88\x88\xA8\x88\x88\x2B\x2E\x8A\xA8\x8D\x67\xCD\x3C\x2F\x04\x17\x01\xAF\x88\x10\x0D\x69\x52\xEF\x2D\x28\x2B\x29\x81\x88\x8D\x81\xE2\x30\x89\x0B\x82\x11\xA8\x85\x22\xDD\x7C\x8C\xA8\x1C\x7D\x91\x84\x8A\x70\x8B\x22\xB4\x8F\x86\xB6\x8A\x11\xB8\x8F\x86\xBA\x8D\x3A\x2B\x2E\x8B\xBF\x83\x10\xC1\x83\x53\xD7\x80\x2E\x1A\x19\x81\x2B\x23\x4B\xA1\x4A\x14\xCA\x83\x82\x43\x1D\x8C\x1A\x1B\x82\xC9\x1D\x8E\x37\x81\x8B\x05\x15\x24\xE5\x89\x28\xD9\x8C\x10\xDB\x8D\x28\xDD\x83\x3B\xDF\x81\x8E\xE2\x8B\x70\xC2\x89\x8F\x04\x15\x8C\x73\x83\x23\xC0\x42\x11\xF4\x87\x4A\xD0\x8D\x28\xCE\x83\x8D\xF3\x86\x76\xD3\x86\x8F\xD7\x1A\x11\x2B\x28\x8A\xAE\x87\x8B\x02\x92\x10\xFF\x8C\x21\x01\x9D\x91\xE3\x8E\x51\xD4\x85\x10\xAD\x8D\x91\xF7\x28\x91\xDA\x88\x92\x1F\x9E\x16\x21\x92\x90\x23\x96\x42\x16\x9F\x74\x85\x38\x92\x3F\x13\x1A\x43\x64\x10\x06\x91\x28\xFB\x88\x10\xFD\x89\x28\x2D\x9C\x14\x2F\x91\x8E\x31\x92\x3E\xA7\x81\x2F\x0C\x1E\x7E\x20\x28\x27\x13\x92\x8D\xCB\x89\x8A\x45\x23\x47\x07\x88\x1C\xD1\x8F\x69\x2B\x86\x91\x76\x73\x10\x3B\x90\x28\x3D\x94\x10\x3F\x95\x28\x41\x9C\x8B\x03\x10\x8E\x30\x94\x90\x33\x57\x94\x6A\x14\x27\x01\x8B\x94\x35\x1D\x94\x56\x9F\x8C\x50\x9E\x26\x5A\x4B\x1D\x13\x29\x27\x0D\x95\x56\x25\x96\x8F\x45\x28\x8A\x68\x99\x28\x6D\x8F\x7B\xC9\x11\x96\xFF\x0E\x8A\x83\x95\x95\x85\x29\x19\x5C\x3C\x10\x35\x9F\x8B\x7F\x9A\x7A\x81\x9E\x5C\xBB\x85\x24\x89\x95\x96\x6B\x8A\x7A\x8B\x96\x93\x0D\x30\x64\x60\x75\x98\x69\x9D\x28\x99\x14\x96\x04\x17\x99\xA9\x8D\x98\xBB\x8F\x98\x95\x91\x99\x1A\x10\x9A\xBF\x81\x96\xA2\x96\x93\x45\x9B\x88\x85\x26\x91\x99\x1B\x6E\x36\x96\x91\xAE\x86\x21\xA6\x89\x9A\x2B\x9A\x86\x08\x1A\x9A\xAF\x87\x97\x40\x4D\x9A\x2C\x96\x96\x24\x9F\x8B\x16\x9A\x3C\x4F\x78\x99\xAF\x13\x1A\x59\x92\x10\x19\x6A\x91\x2A\x96\x8E\x1D\x9A\x89\x87\x5D\x97\x3A\x9A\x11\xCF\x79\x27\x7D\x85\x6C\xAA\x83\x1A\x99\x19\x93\xCA\x95\x10\xA2\x9C\x99\x08\x1D\x78\x79\x29\x19\x65\x7C\x8F",
"\xF0\x2C\x10\xE9\x94\x99\x1C\x72\x8C\x5F\x9C\x1C\x1E\x25\x60\x22\x26\x9A\x9F\x6E\x52\xE4\x94\x10\xCD\x97\x9E\x1A\x16\x78\xEA\x9C\x9B\x04\x1E\x9F\xEE\x9A\x73\x09\x76\x9D\xF2\x98\x26\x0C\x76\x9F\x3A\x7A\x62\xF9\x93\x10\xE6\x99\x9B\xFF\x9E\x93\xEB\x92\xA1\x22\x94\x9C\x26\x41\x9F\x99\x9C\x10\xB9\x75\x9F\x13\xAA\x73\x6E\x81\x9B\xDE\x9E\x27\xE1\x93\xA2\x28\x11\xA2\x0C\x19\x72\xE1\x86\xA0\x80\x2C\x89\x91\x79\x1C\xD4\x93\x65\x0D\xA0\x87\xAE\x8A\x3C\x10\xA8\x10\x93\x91\x9A\xC3\x90\x20\x2D\xA8\x94\x9F\x67\x5C\x92\x98\x92\x2F\xA2\x25\xC2\x9D\x91\x86\x89\x75\x31\xA7\x31\x89\x2F\x99\xBA\x29\xA3\x4E\x2B\xA3\x9D\x9D\xA3\x91\x75\x24\xBE\x99\x8A\x41\xA5\x13\x43\xA3\xA0\xDC\x49\x70\xB5\x93\x1A\xE6\x92\xA0\x24\xA1\x28\x33\x9B\xA4\x5F\xA6\x91\x19\x6D\x9E\x5F\xA0\x8B\x26\xA8\x10\x13\x08\x92\x2A\xA9\x27\x7F\x81\x79\x2A\x6A\xA0\xDC\x4C\xA0\x84\x9E\x8A\x14\x0F\x86\x99\x15\x01\x62\xA2\x90\x6F\xA8\x7D\x71\xAD\xA1\x73\xAC\x67\x1A\x1A\xA7\x15\xA1\x62\x25\x68\xA1\x35\x73\x10\xBE\x60\x70\x79\x25\xA5\x3D\x26\xA7\x78\xA1\x9D\x08\x17\xA5\x85\x2D\xA7\x4E\x89\x85\x51\x12\xA7\x7C\x58\xA9\x89\xA9\xA1\x58\xAB\xA9\x2A\x68\xA8\x45\x2B\xA8\x5C\x8E\xA2\x87\x75\x85\x67\xAF\x86\x16\x93\x8B\x28\x9D\x95\x03\x1E\xA5\xAB\x91\x7C\xC5\x63\x94\xB1\xA2\x87\x05\x9F\x86\x08\x97\xAB\x0C\x18\x8C\xEC\x84\x91\x4F\x90\x8F\x0C\x12\x8F\x86\x9C\x4D\x57\x93\x1A\xD6\x8D\xAA\x92\xA1\xA0\x4C\xAB\xA0\x25\x64\xAB\xAF\x8F\x9A\x3D\x1B\x95\x62\x92\x10\xE8\x8A\x2A\x32\x8D\xAB\x4E\x9E\x8E\x0F\x99\x28\x11\x9F\xAB\xC3\xAB\xA9\xC5\xAF\x13\xF8\x88\xAC\xD2\x98\x10\xB0\xAF\xAC\xB2\xA1\x6A\xCE\xA1\x97\xB6\xA4\x8E\xB8\xA7\x8E\x09\x9E\x2B\x0B\x9F\x51\x6F\x92\x91\x6F\x8D\xAD\xDA\xA6\x97\xBE\xA9\xAF\x16\x96\x21\x19\x9F\x86\x1B\x9D\x9F\xCB\xA1\xA8\xBB\x6B\xAE\xB9\x86\xA1\xE2\x39\x97\x27\x9D\x91\x01\xBC\x10\xE7\xAC\xAE\x2A\x7D\xAC\xBA\x95\xA8\xEF\x93\x53\x09\x18\x93\x1A\x12\xAD\xC9\x1E\xAA\x02\x1F\xB0\x07\xB6\xA8\x05\xB3\xB1\x9F\xA8\x5F\xC2\x8D\xA6\x38\x2B\x96\x77\x2D\x96\xDF\xA6\x83\x0E\x90\xB1\x04\x12\x95\x36\x25\x11\x6E\x97\x77\x70\x98\x95\x19\xB4\xAE\x08\x1B\x22\x1E\xBC\x8D\xE9\xA3\x4F\x06\xBC\xB3\xED\xAE\x51\x26\xBA\x96\x3A\x2C\x96\x1E\x13\xB3\xC4\xA0\x97\x1F\xB8\x10\x6F\x2B\x45\x75\x98\xB4\xE0\xAA\xB4\x17\xBF\x13\xAC\xAD\x91\x1C\xB0\x00\x66\xA5\xAB\xF7\x9C\x86\x22\xB4\x94\x08\xBA\x14\xD2\xA9\xAB\xEE\xAB\xAB\x1F\x19\x8C\xFB\xA7\x83\xC0\xA8\x10\xC2\xAC\x10\xC0\x95\x42\x16\x97\xAC\x56\xB9\xAC\x03\x19\xB5\xE8\xA7\x9A\xDE\x8D\xB5\x5A\xB4\xA0\xF1\xAE\x97\xF0\xA2\x8C\xE9\x87\xAD\x3D\x1D\xB6\xB6\x29\xB6\x04\x1B\xB6\x08\x12\xB8\xDF\x13\x1A\xE3\xA1\xB7\xE5\xA4\x10\x74\xBE\xB2\xDC\x4E\x52\x3F\xBE\x8F\x5F\xB1\xAD\xEF\xA8\xA0\xBA\xAB\x1E\x46\x83\x14\x88\xBB\xAD\x85\x28\xAF\x68\xBB\xB2\xE0\x7F\x94\xFD\xA2\xB7\xAF\x8D\xB0\x08\x1F\xB8\x4B\xBE\xA1\x5C\xBC\x10\x53\xAB\xBA\x59\xA9\xA0\x16\x9B\xB0\x02\x98\xBA\x8E\xB3\xB0\x9B\xA2\xB9\x78\xB5\xB7\x15\xB5\x9C\x79\x90\x9E\x02\x1A\xB1\x37\xBD\xB8\x73\xB8\xBB\x2D\x5D\xBA\xBD\x96\xBC\x8A\x69\x2B\x10\x94\xB4\x76\x25\x45\x2A\xBC\xB6\x67\xBD\xB2\xB0\xB5\x87\x34\x24\x47\xF0\x10\xB5\x2C\xB5\x56\x36\xBD\x2C\x38\xB7\x90\x1A\x1A\xBA\x40\xBB\xB5\xAA\x73\xB9\x40\x95\xB9\x16\x17\xAF\xCE\xBF\x46\x4C\x92\xBA\x11\x84\xBD\xE3\xB4\x10\x4D\xB4\x97\x72\x2A\xBD\xA3\xB9\xAF\x28\x97\x9C\xA8\x29\xAA\x79\x99\x61\x84\xAC\xBF\x89\x2D\xBD\x08\x1F\x9C\x00\xB6\xBA\x00\x0F\xBF\xE1\x8E\xA8\xE9\xBD\x28\x88\x89\x9D\x9A\xA8\x7C\xBB\x66\x91\xC9\x1F\xBA\x00\xC7\x93\x54\xB3\xBC\x02\x92\x9A\xE6\xB0\x96\xE8\xB1\xB6\x7D\xB3\xB6\x08\x1C\xAB\x81\xB3\xBD\x78\x9A\xBE\xC1\xA2\xB5\xD2\xB9\xAD\xF5\x86\xAC\x18\xC1\x8E\x1A\xCB\xBB\x90\xBB\xA9\x09\x7E\xC1\x98\xB3\x53\x7F\xB7\x82\x23\xCA\xC2\xF0\xBD\xBC\x27\xC6\xAF\x29\xC5\xAF\xA4\xBA\xB8\x2D\xCF\x8B\x2F\xCE\xBA\xCA\xB3\x7D\x34\xC8\x10\xC6\x8A\x90\x3B\x84\xAF\x34\xBE\xC3\xDC\xA1\x8F\x28\xC7\xB8\x24\xC0\x44\xA5\xB4\xBC\xAF\x8E\x37\x30\xC5\xBD\x24\xB6\xB1\xB3\xBB\x9B\x02\x9A\xC5\x46\xC4\xB1\x7A\xB2\x8C\x53\xB3\x15\xC0\xB3\x8C\x19\xC6\xC0\x14\xC4\xB9\x41\xB6\x42\x43\xB9\x94\x28\xB0\xBD\x47\xBE\xBE\x86\xBC\xC1\xF2\xA5\x23\x28\x26\xBF\xEF\xBC\xBD\xCC\x93\xC4\xAF\x85\xC4\xC9\xB4\xC6\xB1\xB5\xB2\x26\xC8\x10\x4A\x99\xB2\x75\xCF\xC3\x4F\xCE\xAD\x6E\xCC\xB4\x73\x94\x7F\xFA\xAA\xC3\x7E",
"\xCF\x13\xC9\x19\x01\x15\xCB\xA5\x3F\x1B\x9F\x04\xCE\x99\x1A\x1D\xA6\x0D\xC9\x22\x33\x6F\xC0\x37\x73\x4F\x12\xCA\x11\x37\xA9\xC9\x20\xAF\x13\xFE\xAC\xA6\x06\xC9\xCA\xAF\x85\xA4\x4B\x5A\xB0\x60\xC9\xA2\xAF\xC8\x92\xB2\xC2\x55\x25\xA6\xC9\x1A\x1D\x01\xAA\xCB\xCA\x53\x15\xB5\xB5\xB0\xC8\x79\x22\xB6\x1E\x57\x8C\x65\xB8\xAD\x40\xC8\xBF\x87\xC5\xB8\x53\xC4\x10\x9D\xB9\x97\x70\xB3\xCC\xDE\xB4\x8C\x1F\xCE\x51\x37\xCB\x8E\x39\xCB\xCC\xA1\xBC\xC3\x6A\xBF\xCC\x03\x11\xCD\x16\x9B\xB8\xD4\xC8\x10\x49\xC4\x10\x4B\xC9\xC7\xD3\x41\xCD\x84\xB3\x10\x77\xC1\xCE\x55\xC5\x42\x53\x18\xB1\xD5\xC5\xCE\x04\x11\xC7\x88\xC3\xC7\x76\x2C\xC7\xEF\xCB\xA2\x4C\xC8\xBD\x54\x9C\xC8\x49\xB5\x91\x7F\xC5\xCF\xE1\x8E\x8A\xF8\xC4\x10\x89\xC4\xC7\x93\xCC\xCD\x3B\xC7\xBE\x0C\x13\xBF\x92\xCC\xCF\x35\xB3\x1A\xC9\x1A\x32\xBF\xC1\xC0\xA3\x1D\xCA\x19\xDD\xD1\xAF\x80",
};

			void JsonGetParserBuffer(vl::stream::MemoryStream& stream)
			{
				vl::stream::MemoryStream compressedStream;
				for (vint i = 0; i < parserBufferRows; i++)
				{
					vint size = i == parserBufferRows - 1 ? parserBufferRemain : parserBufferBlock;
					compressedStream.Write((void*)parserBuffer[i], size);
				}
				compressedStream.SeekFromBegin(0);
				vl::stream::LzwDecoder decoder;
				vl::stream::DecoderStream decoderStream(compressedStream, decoder);
				vl::collections::Array<vl::vuint8_t> buffer(65536);
				while (true)
				{
					vl::vint size = decoderStream.Read(&buffer[0], 65536);
					if (size == 0) break;
					stream.Write(&buffer[0], size);
				}
				stream.SeekFromBegin(0);
			}
/***********************************************************************
Unescaping Function Foward Declarations
***********************************************************************/

			extern void JsonUnescapingString(vl::parsing::ParsingToken& value, const vl::collections::List<vl::regex::RegexToken>& tokens);

/***********************************************************************
Parsing Tree Conversion Driver Implementation
***********************************************************************/

			class JsonTreeConverter : public vl::parsing::ParsingTreeConverter
			{
			public:
				using vl::parsing::ParsingTreeConverter::SetMember;

				bool SetMember(JsonLiteral::JsonValue& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
				{
					vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
					if(token)
					{
						if(token->GetValue()==L"True") { member=JsonLiteral::JsonValue::True; return true; }
						else if(token->GetValue()==L"False") { member=JsonLiteral::JsonValue::False; return true; }
						else if(token->GetValue()==L"Null") { member=JsonLiteral::JsonValue::Null; return true; }
						else { member=JsonLiteral::JsonValue::True; return false; }
					}
					member=JsonLiteral::JsonValue::True;
					return false;
				}

				void Fill(vl::Ptr<JsonNode> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
				}

				void Fill(vl::Ptr<JsonLiteral> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->value, obj->GetMember(L"value"), tokens);
				}

				void Fill(vl::Ptr<JsonString> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					if(SetMember(tree->content, obj->GetMember(L"content"), tokens))
					{
						JsonUnescapingString(tree->content, tokens);
					}
				}

				void Fill(vl::Ptr<JsonNumber> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->content, obj->GetMember(L"content"), tokens);
				}

				void Fill(vl::Ptr<JsonArray> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->items, obj->GetMember(L"items"), tokens);
				}

				void Fill(vl::Ptr<JsonObjectField> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					if(SetMember(tree->name, obj->GetMember(L"name"), tokens))
					{
						JsonUnescapingString(tree->name, tokens);
					}
					SetMember(tree->value, obj->GetMember(L"value"), tokens);
				}

				void Fill(vl::Ptr<JsonObject> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->fields, obj->GetMember(L"fields"), tokens);
				}

				vl::Ptr<vl::parsing::ParsingTreeCustomBase> ConvertClass(vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)override
				{
					if(obj->GetType()==L"Literal")
					{
						vl::Ptr<JsonLiteral> tree = new JsonLiteral;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"String")
					{
						vl::Ptr<JsonString> tree = new JsonString;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Number")
					{
						vl::Ptr<JsonNumber> tree = new JsonNumber;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Array")
					{
						vl::Ptr<JsonArray> tree = new JsonArray;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"ObjectField")
					{
						vl::Ptr<JsonObjectField> tree = new JsonObjectField;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Object")
					{
						vl::Ptr<JsonObject> tree = new JsonObject;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else 
						return 0;
				}
			};

			vl::Ptr<vl::parsing::ParsingTreeCustomBase> JsonConvertParsingTreeNode(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				JsonTreeConverter converter;
				vl::Ptr<vl::parsing::ParsingTreeCustomBase> tree;
				converter.SetMember(tree, node, tokens);
				return tree;
			}

/***********************************************************************
Parsing Tree Conversion Implementation
***********************************************************************/

			vl::Ptr<JsonLiteral> JsonLiteral::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonLiteral>();
			}

			vl::Ptr<JsonString> JsonString::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonString>();
			}

			vl::Ptr<JsonNumber> JsonNumber::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonNumber>();
			}

			vl::Ptr<JsonArray> JsonArray::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonArray>();
			}

			vl::Ptr<JsonObjectField> JsonObjectField::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonObjectField>();
			}

			vl::Ptr<JsonObject> JsonObject::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonObject>();
			}

/***********************************************************************
Visitor Pattern Implementation
***********************************************************************/

			void JsonLiteral::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void JsonString::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void JsonNumber::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void JsonArray::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void JsonObjectField::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void JsonObject::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

/***********************************************************************
Parser Function
***********************************************************************/

			vl::Ptr<vl::parsing::ParsingTreeNode> JsonParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"JRoot");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				return node;
			}

			vl::Ptr<vl::parsing::ParsingTreeNode> JsonParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return JsonParseAsParsingTreeNode(input, table, errors, codeIndex);
			}

			vl::Ptr<JsonNode> JsonParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"JRoot");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				if(node && errors.Count()==0)
				{
					return JsonConvertParsingTreeNode(node, state.GetTokens()).Cast<JsonNode>();
				}
				return 0;
			}

			vl::Ptr<JsonNode> JsonParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return JsonParse(input, table, errors, codeIndex);
			}

/***********************************************************************
Table Generation
***********************************************************************/

			vl::Ptr<vl::parsing::tabling::ParsingTable> JsonLoadTable()
			{
				vl::stream::MemoryStream stream;
				JsonGetParserBuffer(stream);
				vl::Ptr<vl::parsing::tabling::ParsingTable> table=new vl::parsing::tabling::ParsingTable(stream);
				table->Initialize();
				return table;
			}

		}
	}
}
namespace vl
{
	namespace reflection
	{
		namespace description
		{
#ifndef VCZH_DEBUG_NO_REFLECTION
			using namespace vl::parsing::json;

			IMPL_TYPE_INFO_RENAME(vl::parsing::json::JsonNode, system::JsonNode)
			IMPL_TYPE_INFO_RENAME(vl::parsing::json::JsonLiteral, system::JsonLiteral)
			IMPL_TYPE_INFO_RENAME(vl::parsing::json::JsonLiteral::JsonValue, system::JsonLiteral::JsonValue)
			IMPL_TYPE_INFO_RENAME(vl::parsing::json::JsonString, system::JsonString)
			IMPL_TYPE_INFO_RENAME(vl::parsing::json::JsonNumber, system::JsonNumber)
			IMPL_TYPE_INFO_RENAME(vl::parsing::json::JsonArray, system::JsonArray)
			IMPL_TYPE_INFO_RENAME(vl::parsing::json::JsonObjectField, system::JsonObjectField)
			IMPL_TYPE_INFO_RENAME(vl::parsing::json::JsonObject, system::JsonObject)
			IMPL_TYPE_INFO_RENAME(vl::parsing::json::JsonNode::IVisitor, system::JsonNode::IVisitor)

			BEGIN_CLASS_MEMBER(JsonNode)
				CLASS_MEMBER_METHOD(Accept, {L"visitor"})

			END_CLASS_MEMBER(JsonNode)

			BEGIN_CLASS_MEMBER(JsonLiteral)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonLiteral>(), NO_PARAMETER)


				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(JsonLiteral)

			BEGIN_ENUM_ITEM(JsonLiteral::JsonValue)
				ENUM_ITEM_NAMESPACE(JsonLiteral::JsonValue)
				ENUM_NAMESPACE_ITEM(True)
				ENUM_NAMESPACE_ITEM(False)
				ENUM_NAMESPACE_ITEM(Null)
			END_ENUM_ITEM(JsonLiteral::JsonValue)

			BEGIN_CLASS_MEMBER(JsonString)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonString>(), NO_PARAMETER)

				CLASS_MEMBER_EXTERNALMETHOD(get_content, NO_PARAMETER, vl::WString(JsonString::*)(), [](JsonString* node){ return node->content.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_content, {L"value"}, void(JsonString::*)(const vl::WString&), [](JsonString* node, const vl::WString& value){ node->content.value = value; })

				CLASS_MEMBER_PROPERTY(content, get_content, set_content)
			END_CLASS_MEMBER(JsonString)

			BEGIN_CLASS_MEMBER(JsonNumber)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonNumber>(), NO_PARAMETER)

				CLASS_MEMBER_EXTERNALMETHOD(get_content, NO_PARAMETER, vl::WString(JsonNumber::*)(), [](JsonNumber* node){ return node->content.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_content, {L"value"}, void(JsonNumber::*)(const vl::WString&), [](JsonNumber* node, const vl::WString& value){ node->content.value = value; })

				CLASS_MEMBER_PROPERTY(content, get_content, set_content)
			END_CLASS_MEMBER(JsonNumber)

			BEGIN_CLASS_MEMBER(JsonArray)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonArray>(), NO_PARAMETER)


				CLASS_MEMBER_FIELD(items)
			END_CLASS_MEMBER(JsonArray)

			BEGIN_CLASS_MEMBER(JsonObjectField)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonObjectField>(), NO_PARAMETER)

				CLASS_MEMBER_EXTERNALMETHOD(get_name, NO_PARAMETER, vl::WString(JsonObjectField::*)(), [](JsonObjectField* node){ return node->name.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_name, {L"value"}, void(JsonObjectField::*)(const vl::WString&), [](JsonObjectField* node, const vl::WString& value){ node->name.value = value; })

				CLASS_MEMBER_PROPERTY(name, get_name, set_name)
				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(JsonObjectField)

			BEGIN_CLASS_MEMBER(JsonObject)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonObject>(), NO_PARAMETER)


				CLASS_MEMBER_FIELD(fields)
			END_CLASS_MEMBER(JsonObject)

			BEGIN_INTERFACE_MEMBER(JsonNode::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonLiteral* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonString* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonNumber* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonArray* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonObjectField* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonObject* node))
			END_INTERFACE_MEMBER(JsonNode)

			class JsonTypeLoader : public vl::Object, public ITypeLoader
			{
			public:
				void Load(ITypeManager* manager)
				{
					ADD_TYPE_INFO(vl::parsing::json::JsonNode)
					ADD_TYPE_INFO(vl::parsing::json::JsonLiteral)
					ADD_TYPE_INFO(vl::parsing::json::JsonLiteral::JsonValue)
					ADD_TYPE_INFO(vl::parsing::json::JsonString)
					ADD_TYPE_INFO(vl::parsing::json::JsonNumber)
					ADD_TYPE_INFO(vl::parsing::json::JsonArray)
					ADD_TYPE_INFO(vl::parsing::json::JsonObjectField)
					ADD_TYPE_INFO(vl::parsing::json::JsonObject)
					ADD_TYPE_INFO(vl::parsing::json::JsonNode::IVisitor)
				}

				void Unload(ITypeManager* manager)
				{
				}
			};
#endif

			bool JsonLoadTypes()
			{
#ifndef VCZH_DEBUG_NO_REFLECTION
				ITypeManager* manager=GetGlobalTypeManager();
				if(manager)
				{
					Ptr<ITypeLoader> loader=new JsonTypeLoader;
					return manager->AddTypeLoader(loader);
				}
#endif
				return false;
			}
		}
	}
}
